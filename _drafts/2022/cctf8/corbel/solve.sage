enc = 0x3127818e90a691b1c00f9593454819534c3d08f6e172bbb7181f0fb8e41c2990a16be4306fc7167c1fc4316d0bb5a652dc98af35e11b3d3c38bdaef6a04e25423ded5d408137a6dcf0e3c1f569c5100b1ff6762e4c1f5c56462d94443269ba076df6d4f872f7ca7886e81a4815c9a5e17fbe474d5dd877eacbe277774473ea3630fcea2c9b174eaad83a02893509ee577db8d791152703c228863da3f5acda7ebffe43128b2da149e0c41fb7589198b8dee8f4b6d8ada8193ea51b97f865b4e91ce30dcf3f1ab82badedbf3448f30cf1af6e2b038361eac5782262cb1cab707a95e989c3326948531c9a9c10b28a2eba3165a26b6b59605242692bff789686f486549c9ca576a5f269641163746513d8200c60c3391f8628eac7edc0d8852d71e2f5ab69051f79167debad5e714d3611e9deaa03b7f8cf61486f37e85ca93f6d622e1361dc35b2e3ebe2d6f2ca79d35da48d1fc70596686bedeadcbeafe4c04166d57923db4acd1c319dfe078aaeb0429876f1734af7c85e79918eb2ff175077
enc = str(enc)

e = 13711
n = 111549701499257337875353617463263084052699396315101107389584096005881090296607159468938485773826507371394554038712264085810326004488181370382551140946144095876516520473477202087465717718869655040856581438076687317784283418642384893788435924889272851853480113180920142089866327612079056409611069245096908163071
C1 = 41918324858246261180825892157019402789913549494457466958735396394791507530938655701057270750260036366938571172947489520479737585139980248866590651829447416564252582058186037501470591129472015278089394611906625999992535669038458784198634448522566494553231192117442907793651023739821844964112794311519702608312
C2 = 98464603133484578784922510625793792832767019909578678295217612293018665217541762193709057078920137667602626564590221041769749584018102181416361431754530482568837968114035622332627396021950544672873970114858999823872961910814488804303619178921492187268097208437604397058535940789006506737241440392544444174455

PRxy.<x,y> = PolynomialRing(Zmod(n))
PRx.<xn> = PolynomialRing(Zmod(n))
PRZZ.<xz,yz> = PolynomialRing(Zmod(n))

print("here1")
g1 = x**e - C1
g2 = (x+y)**e - C2
print("here2")
q1 = g1.change_ring(PRZZ)
q2 = g2.change_ring(PRZZ)
print("here3")
#h = q2.resultant(q1)
#print("here4")
#h = h.univariate_polynomial() # x is hopefully eliminated
#print("here5")
#h = h.change_ring(PRx).subs(y=xn)
#print("here6")
#h = h.monic()
#
#roots = h.small_roots(X=2**33, beta=0.3)
#assert roots, "Failed1"
#
#diff = roots[0]
#if diff > 2**32:
#    diff = -diff
#    C1, C2 = C2, C1
#
#r = diff
#R.<X> = Zmod(n)[]
#f1 = X^3 - C1
#f2 = (X + r)^3 - C2
#
#def my_gcd(a, b):
#    return a.monic() if b == 0 else my_gcd(b, a % b)
#
#mint=-my_gcd(f1, f2).coefficients()[0]
#print(mint) # coefficient 0 = -m
#print(bytes.fromhex(hex(mint)[2:]))
