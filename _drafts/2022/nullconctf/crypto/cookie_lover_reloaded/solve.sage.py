

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_10005 = Integer(10005); _sage_const_16 = Integer(16); _sage_const_0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff = Integer(0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff); _sage_const_3 = Integer(3); _sage_const_0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b = Integer(0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b); _sage_const_0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551 = Integer(0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551); _sage_const_2 = Integer(2); _sage_const_128 = Integer(128); _sage_const_0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296 = Integer(0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296); _sage_const_0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5 = Integer(0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5); _sage_const_0 = Integer(0); _sage_const_6 = Integer(6); _sage_const_1 = Integer(1); _sage_const_4 = Integer(4); _sage_const_10 = Integer(10)
from ec import *
from hashlib import md5
import pwn
from os import urandom
HOST, PORT = "52.59.124.14", _sage_const_10005 

def hashmd5(msg):
    return int(md5(msg).hexdigest(),_sage_const_16 )


p = _sage_const_0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff 
a = -_sage_const_3 
b = _sage_const_0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b 
q = _sage_const_0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551 
B = _sage_const_2 **_sage_const_128 

curve = EllipticCurve(p,a,b, order=q)
G = ECPoint(curve, _sage_const_0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296 , _sage_const_0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5 )

REM = pwn.remote(HOST, PORT)
REM.recvline()
P_a = REM.recvline().split(b',')
P_a = ECPoint(curve, int(P_a[_sage_const_0 ][_sage_const_6 :]), int(P_a[_sage_const_1 ][_sage_const_1 :-_sage_const_2 ]))
REM.recvuntil(b'\n\n')

def get_sign(msg):
    REM.sendline(b'1:'+msg)
    data = REM.recvuntil(b'\n\n')
    print(data)
    return eval(data.split(b'\n')[_sage_const_0 ])


ri_s, si_s, mi_s = [],[],[]

for _ in range(_sage_const_4 ):
    msg = urandom(_sage_const_10 )
    mi_s.append(hashmd5(msg))
    r,s = get_sign(msg)
    ri_s.append(r)
    si_s.append(s)

ti_s, ai_s = [], []
for r,s,m in zip(ri_s, si_s, mi_s):
    print(s)
    s_inv = pow(s,-_sage_const_1 ,q)
    ti_s.append((r*s_inv)%q)
    ai_s.append((-m*s_inv)%q)

num_sigs = len(mi_s)
M = matrix(QQ,num_sigs+_sage_const_2 , num_sigs+_sage_const_2 )
for i in range(len(mi_s)):
    M[i,i] = q
    M[-_sage_const_2 , i] = ti_s[i]
    M[-_sage_const_1 , i] = ai_s[i]

M[-_sage_const_1 ,-_sage_const_1 ] = B
M[-_sage_const_2 ,-_sage_const_2 ] = B/q

# rows = M.LLL()
# for row in rows:
#     d = ((QQ(-(row[-2])) * q) / B) % q









