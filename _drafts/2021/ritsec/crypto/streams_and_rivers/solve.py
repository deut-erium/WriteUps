from functools import reduce

from pwn import xor

upper_mask = 0x80000000
lower_mask = 0x7fffffff

flag = '__BS{                   }'

enc_0 = bytes.fromhex('ee3c88bd2b71425e356e2d714f8304336faa6e8368f5c97bc002b4953111ef695b06068e000a2851397fa426c799900184f72b247805a82a603b6a276533dd2f454beeeeaf5a3170bf4a358eee07e92ceb5456247c2fd3190e6a9d839125ee8a030b8e907d33c21906b4cd21dd102cee2ee12b8eb2bbcb64671072396bdc58b4d0735ed2a44cbf5d2afe5fe181178836110ed004a07814032c58ca690e47f6ffea1afa20c05d489dfd730602cd7d3f2c113884c8febb50f1703e541c33d54917ee59b0db447db6daca7ac5a2908b92092e9f2c959b354f5ae8732f1cb3c87c3e6b1e06143f7d2b3fc1f9cdb250c9ec89822037c13fab04093ee08717331601888a4f394593f4c1459fb38de02ad9889984900833d7172c71a9a45a8c7a630e39f9957360a171dd9e2f25a074a8266d92d88584be946d799a002cd2126bfdf3f0fafbaaa4134281dcd954f41daa00807fc53a1efd46051614bb13ca559b688f7066f8278c5b65364b73b615ebf0ad0c0a8eafe83bc4f368eaea4fdf9837f3ffb897159a8bb6b2e649a5e5635af0128fc7b6f1ce46c47bc36bb4a87faafb3f0f34c91b517015fff2c947ddc7b1eaf12ea96176c4d5bca4941387d5e1fdb2b3076b7f693807122dc25fddcd53097351bf3977516777465ea464cdb1e4c40fd291656597bcc6ce34ca515dc22181ffe168a7eb854f5dd41cb84b159cd9d7303da818de131273f40f32cc58cd00e59d8863639ab5894e53c7a36ead34a356640e19b8dc1e32d63ede502da40bf80134f08819a6175de79d1bb87d24a3c237d29b24fe8af05f5f1b4e8b80effecf9e6304542f26f722606d694b12ecf965c9fdbace490eddc14eb639e27ee84681fe9a212afa7cd6b3dafcb8210bcaee437abe3727fbb370baa8ad3acd30a714991db1ac62c0c77d33232eea73d099faecef84ed7621ac95c50e7836f87b1ef07fcad882862929a657e1b18d8f4520e42e66f7c080f361796ae0fbebe3ddecf90ef5d5f417990fd183f34390a8b0744fa47584c1d3c0c61aecc414c35a5e80213536e67bdedcf347298c5e5b678c0d5596981935cdcec8e8ad057e18417fcc4d5dd3b224e26583ba54e103d9df45cda404efb5e321f8a732c3dcadc7e699d91c0426ab2d77c892c923d4e0c45e3f68e2baa072779db4e3f2d5d4b2558934bdc2a63af8d1464767f03560189d8b61db569b5ca9cda99b4eaa8db667b905826bdb0b20625305479fab9f765417a0d95043f79259cb6711e24380682c179e0af124ca4bd138f27a157b642defef32c262731fd48ce927a1843475c82b8975fb36ed4b18332ba216272c83b0162de0e57dc0727403069351dca2db4b513fc5f43b4b2c5a1a81d97df6e047d1ecea6433873224d55a1457ea7b0243ace0c8e95164779e25e40c4410be6b03a5d130a0072a2f1459e35abe016745a41a910a32dccb5b835f534117f6822cac15e616cec733c915066815bda797df2e587d0c7a8b353bc570da11f9d6e30473000fd2bc7242dfe8e5b9691436b21bef5e1730059ea2ede049a05d0c4eb6461c29e2874719a3aa75c0b24914846a1f8a70e8b9886ae42a23542ee48a7d6ab6313bd9d3a4182d2addfed9920ba944e4320705fff4c834aab585c5c127eb8e990828e2e0302f255ee49da6096a6d6ace791eb0428417eb3c430defca52fa437b289cd34d4143921718be613ddf6917d9b53e0ca5bb276f59f407433f43a5e191c0c100ec5a4b60ccadb3c853b39cae7a378d4286a339bcd2f4d1198277b1d3691c3752ef07f1380ea350a06642e29aee6a5bed5f3e0e571f338208194888b90aad1c1c55ad990cbeabd0e464429ab46a29bd19635e5be1420ec3bd26f9383718a10ffdb03ffbcac07a0c44c77b598deeff0bcac8a7228216ada70b2819fab3f5a662c9fc764c291cf8165ccdec6fa1141768b7dd0c79e2278ffd955ae4296936acf82e62f9ffc3d2b8506006c2d09a7b9dd507f4e278b5598d622298d6c78f2bb6ebb86fffdc4d30f00f66c8d70625fa39c9a1b2e1a8443405d7c668ce1a6b3863ba4e6764a878ac1f570d387722c444de7dab186d570425710fe5147462dcbe497a7b2c0b5e3a8cec6b427e6e18e3950ccdcc8844861955ed7f7eaa2ba34e21038f80f0a0d906dc80fe14127010c2b8fc8eda05f950ba841276f72c0a07413337fcff27a9f83551df42843c0a58c98b60d83f7f552cdb3f95e54e2f2d44d3df5105ca4050346e993787b33b4fc83e0d51d2aff1ed64316625b37e0414bf113d471a10317e6c75859e3e2082585718b0261f3810b75235e83e8ac4dd0871a9ca87e1b3c8c962e1a531a6760793fb12d31790f78d4b93bed3e6aa5d2a0b45e1422ae5ec8ec7418c732f637fc30eea7e7597c10dd94b39ffd99858b67f645e35c34cffee35b3c71d74a1bf51d12ec4729e2c3731af33812b24b3d87dba265c6e7b6de7b01f28521f4d56384b02de95f7e2c8dee6e7bce41f53a0ac952745b358af2a1d81af19299c3132a7c9956812ce79da3102beffc320433f8b631c3709b1465cc7283e3f7ac6b606a95f3a4bbca116c398c69762d9755be1cc2a7fe3da2f292c41e0d1ec1d74336940ce3ad3f03e09fffadcbcc321adaea936710b993b581fc7bbca43f0b13e13d8f235d66145a04d6764fbc902a2f59a94c2d54473d8541e9b9b865589e253f7410826a9f2e3539a8a9e38308a972f0366f32cc8ad040f44bdcea0d940338cd33a918bcaac40c0a21af0cd932264e73ec6735a88aaf9b2aec50f23f56b361fe84ea04accebe7f77634fd9a7b7a6fd1676c451b11dd7ac432eb5ad41c6e19a22c8de58f97b696b9b1026e3440f26c0d5bcd16d64b1b5c9c0d06a00a8fd4d52cb8a372f33ef2b1b637865be10a4b07c52b127b03aad5180747cf0448ea710102a863ad52c21e634ab9fa6ca8dc925c1ef075065df8c409eb35f0abf95b480be380bf3056fbc51ee25f5cf6b2bea04a8d74c87ede0f3262439e19252f6ba21986a2244fdacbddf1c2f1c118e1c7fbfb26c5ee38d02e7da3065333f9ddddc214fef5bc7833bf3a5d244a57f580e500a45b2ded3c8da522566ab5c400151a853e98ca4d21e9b16b2de1809441bbf2ff41eaed62a6a8b235381cea50aba059581701b504f4012ead408713d5a3c60a96e14ace8372e750057d5e8b895adb650d7f13edec0304f8e969beb147eb10c16f64bc81aba5f75bb557ad8f0c168aa1d93b9e4bf3dd132102791326bfcc72279918556248fd77d200d6a856b99e3b10cad87df77232be643f7459988c4a684dac1ccfb9480e28348cac0ba9b90931fb2e65e0f9764a0b3ac16d41d244b11af4d652154b1d7547f3776e82ff47cd0284566722c25c5cb0faf0377e14e6ccf34ed60f7306a0fae5bde3a963fce3171e58f7dd9771237348369b6f310d632f21429caeef5fb052a25a37b0a6dfb6c75c4ddbc1739c143b045cdfa95c8382fc0e4c8b83b1a3eca7ed4beec5ec86fe318d2a24236a7c88aadfc22d72f72a9e48ef9eb72902fc795f7447ce60eb92a6a330220215137916bec9d3a97022690ff0044f3958363b6522f00ec2eda25b12a7a3bca9aa5c6ecccc21c509af1d9c286347f952f19194f7bda85924e7b5e65e63459ad4bb5a986489afe77524eb4148b2e9cfaf15')


def get_ith(self, outputs):
    i_min_624, i_min_623, i_min_227 = outputs
    x = (i_min_624 & upper_mask) + \
        (i_min_623 & lower_mask)
    xA = x >> 1
    if (x % 2) != 0:
        xA = xA ^ self.a
    return = i_min_227 ^ xA

def transform(x):
    unshiftRight = lambda res,next : x^(res>>next)
    makeUnshiftLeft = lambda mask: lambda res,next : x^(res << next & mask)
    makeList = lambda x: [x for i in range(32)]
    x = reduce(unshiftRight, makeList(18))
    x = reduce(makeUnshiftLeft(0xefc60000), makeList(15))
    x = reduce(makeUnshiftLeft(0x9d2c5680), makeList(7))
    x = reduce(unshiftRight, makeList(11))
    return x

def make_plaintext(padlen, num_iters=8):
    if padlen*num_iters > 325:
        padlen = 325/num_iters
    if padlen < len(flag):
        padlen = len(flag)
    gen_rand = random.Random()
    padding = ""
    for i in range(num_iters):
        padding += chr(gen_rand.getrandbits(8))*padlen
    padded_msg = (flag + padding)
    plaintext = padded_msg
    while(len(plaintext) < 2600):
        plaintext += padded_msg[:2600-len(plaintext)]
    return plaintext


