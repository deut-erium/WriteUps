from Crypto.PublicKey import RSA
from labmath import nextprime
from Crypto.Util.number import bytes_to_long

flag = bytes_to_long(b"REDACTED")

key = RSA.generate(2048)

p, q = key.p, key.q

n1 = p * q
n2 = nextprime(p + 0x1337) * nextprime(q + 0x69420)
e = 0x10001
print(n1)
print(n2)

# for alice
c1 = pow(flag, e, n1)
print(c1)

# for bob
c2 = pow(flag, e, n2)
print(c2)

"""
22243767031601205606016724543394930965574710684607939977002923653467515703910708073153303837197514453047530981163061414432553406922379064426711180712199214148695524074852292709843679483946765826870486767413648398940133262658583561865532248340848798197069347180941760889923311080443408332311280000720444030202313987744329723440602348873266088225457793745023406168229198052883533457979075930671593721756049119623439980058663481487875407803740428753364349578448179538422057210061297317455298747898736294488215527556155413660495462710790183196097603497852931743336515415984055572082317119324317677742645961245335632851491
22243767031601205606016724543394930965574710684607939977002923653467515703910708073153303837197514453047530981163061414432553406922379064426711180712199214148695524074852292709843679483946765826870486767413648398940133262658583561865532248340848798197069347180941760889923311080443408332311280000720444088631755201518863682427020328661800944870199966918281743538003953548886667168717595850683487724572933861527424312817284865432246601050829245671332285117732021604161087765520706258045960134431616629369489298042899004980834927326168764114693314977815338647689995504140027507603785895207956532803125995629781105125051
21015887075421597796881082947987101126069551861907298153305115458195043650321017152078923571591176106457664970164210111446945546910454719331155256239779901883809540555018856905735566026769497037893656895619950331023776596397084788049341711529298269351942650618644778314295214814482899243754667427202019028761299527182084519600480383057195877660162355968191754720194183870387237310465727792481211316959702803683072186328458267125586299697285649619652001364385177367764033046337354326442405138998227801884286911634858441035727869447332895575415317302333865925984575835983462914397463753678529746998277861755912512542253
18033234810107245295695114288774462048246048944427175259056227859740672397821846313589796303990554738083820877989535464331501271594079843486103405062004322473117600744907503540878867935169489970847351064017904893197458137188082397861749636500835816496558787142262141012162812477082366819283819468962564030638030928952176361809500503798659677504678332595023403916483873209678034982645507279773866148541604275432492431487352311749602260256947218870522211767983081790530171144505947660791630104016196546975050608195933787622438390086522065812781475998593315648139280245968689513117433828903087114386318416667811613662962
"""
