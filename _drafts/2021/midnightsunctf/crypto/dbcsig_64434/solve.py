#from gmpy2 import next_prime
from hashlib import sha256
from tqdm import tqdm

p = 403564885370838178925695432427367491470237155186244212153913898686763710896400971013343861778118177227348808022449550091155336980246939657874541422921996385839128510463

pub = 246412225456431779180824199385732957003440696667152337864522703662113001727131541828819072458270449510317065822513378769528087093456569455854781212817817126406744124198

r = 195569213557534062135883086442918136431967939088647809625293990874404630325238896363416607124844217333997865971186768485716700133773423095190740751263071126576205643521

s = 156909661984338007650026461825579179936003525790982707621071330974873615448305401425316804780001319386278769029432437834130771981383408535426433066382954348912235133967

message = b"blockchain-ready deterministic signatures"
hash_m = sha256(message).digest()
hash_m_int = int.from_bytes(hash_m,'big')

def keygen(password):
    h = password
    for i in range(256):
        h = sha256(h).digest()
    x = int.from_bytes(h*2,'big')
    return pow(3,x,p),x

#with open('/home/deuterium/yo/wordlists/rockyou.txt','rb') as f:
with open('/usr/share/dict/words','rb') as f:
    passwords = list(map(lambda x:x.strip(),f.readlines())) # dont care much about memory

for passwd in tqdm(passwords):
    if keygen(passwd)[0]==pub:
        print(keygen(passwd))
    

