from sympy import factorint
from collections import Counter
from math import gcd
from libnum import n2s
n1 = 21669699875387343975765484834175962461348837371447024695458479154615348697330944566714587217852888702291368306637977095490953192701450127798670425959768118384915082017373951315699899009631834471691811815393784748930880954114446745814058132752897827717077886547911476575751254872623927783670252969995075629255541621917767501261249192653546875104532649043219697616464205772025267019328364349763854659490144531087349974469079255236823096415094552037488277752927579909539401311624671444833332618177513356173537573280352724384376372955100031534236816681805396608147647003653628203258681097552049114308367967967184116839561

e1 = 20717541468269984768938524534679430706714860712589983300712432366828367981392533792814384884126053081363266457682162675931547901815985830455612301105504518353600255693451085179954519939635263372257973143178677586338992274607959326361412487748088349413448526455377296931144384663805056580662706419414607407821761761574754611275621927387380065975844282519447660467416826579669726178901884060454994606177784839804528666823956703141147239309978420776148158425922031573513062568162012505209805669623841355103885621402814626329355281853436655713194649170570579414480803671531927080535374958180810697826214794117466378050607

c = 17653913822265292046140436077352027388518012934178497059850703004839268622175666123728756590505344279395546682262531546841391088108347695091027910544112830270722179480786859703225421972669021406495452107007154426730798752912163553332446929049057464612267870012438268458914652129391150217932076946886301294155031704279222594842585123671871118879574946424138391703308869753154497665630799300138651304835205755177940116680821142858923842124294529640719629497853598914963074656319325664210104788201957945801990296604585721820046391439235286951088086966253038989586737352467905401107613763487302070546247282406664431777475

d1 = 36167461773898995192586226632578677184913220227461899855497899052924496298787

n = 22346087036331379968192118389403047568445805414881948978518580277027027486284293415097623011228506968071753709256352246733181304513713003096615266613365080909760605498017330085960699607777361429562376124376340215426398797920168016137830563564636922257215066266075494625782943973857490781916694118187094786034792437781964601089843549995939887939410763350338658901108020658475956489391300528691289604149598720803012371765770928211044755626045817053870803040863722458554924076011151695567147976903053993914859714631837755435592006986598006207692599019026644753575853382810261910332197447386727419606073948645238377595719

ct = 12732299056226934743176360461051108799706450051853623472248552066649321279227693844417404789169416642586313895494292082308084823101092675162498154181999270703392144766031531668783213589136974486867571090321426005719333327425286160436925591205840653712046866950957876967715226097699016798471712274797888761218915345301238306497841970203137048433491914195023230951832644259526895087301990301002618450573323078919808182376666320244077837033894089805640452791930176084416087344594957596135877833163152566525019063919662459299054294655118065279192807949989681674190983739625056255497842063989284921411358232926435537518406

p = pow(c,d1,n1)+1
q = n//p

pf=[2,4919,4933,434167,5619323,1681887251891865253075633302309842952872847573388829427046143602188662560179598244970252062243957002862539006790172448618182393102233447950019510755602480824692780664207219845403713946669299554868415976022413987942918185891902747803164334074941130140069932067230240577801950579269701952347]


qf=[2,2,5,89,1153,4919,28349,572361911840697152684591,685032639889211325572243035479111251029611076781229249748327125250756303957911175041318648025807020361282287649593130574886863093243097277114551697902767362493095436913531216678102597557803998468211915720579083314610901473483446304098011845526571610805558477411843095041]


def xgcd(a,b):
    a1=1; b1=0; a2=0; b2=1; aneg=1; bneg=1
    if(a < 0):
        a = -a; aneg=-1
    if(b < 0):
        b = -b; bneg=-1
    while (1):
        quot = -(a // b)
        a = a % b
        a1 = a1 + quot*a2; b1 = b1 + quot*b2
        if(a == 0):
            return (b, a2*aneg, b2*bneg)
        quot = -(b // a)
        b = b % a;
        a2 = a2 + quot*a1; b2 = b2 + quot*b1
        if(b == 0):
            return (a, a1*aneg, b1*bneg)

def SqrRoots(a,n):
    def inverse_mod(a,n):
        (g,xa,xb) = xgcd(a,n)
        if(g != 1): raise ValueError("***** Error *****: {0} has no inverse (mod {1}) as their gcd is {2}, not 1.".format(a,n,g))
        return xa % n
    def TSRsqrtmod(a,grpord,p):
        ordpow2=0; non2=grpord
        while(not ((non2&0x01)==1)):
            ordpow2+=1; non2//=2
        for g in range(2,grpord-1):
            if (pow(g,grpord//2,p)!=1):
                break
        g = pow(g,non2,p)
        gpow=0; atweak=a
        for pow2 in range(0,ordpow2+1):
            if(pow(atweak,non2*2**(ordpow2-pow2),p)!=1):
                gpow+=2**(pow2-1)
                atweak = (atweak * pow(g,2**(pow2-1),p)) % p
        d = inverse_mod(2,non2)
        tmp = pow(a*pow(g,gpow,p),d,p) 
        return (tmp*inverse_mod(pow(g,gpow//2,p),p)) % p
    x1=TSRsqrtmod(a,n-1,n)
    return x1,-x1%n


def rabin_decrypt(CT,p,q):
    n=p*q
    mp1,mp2=SqrRoots(CT,p)
    mq1,mq2=SqrRoots(CT,q)
    _,yp,yq=xgcd(p,q)
    r1=(yp*p*mq1+yq*q*mp1)%n
    r2=(yp*p*mq1+yq*q*mp2)%n
    r3=(yp*p*mq2+yq*q*mp1)%n
    r4=(yp*p*mq2+yq*q*mp2)%n
    return [r1,r2,r3,r4]

def forth_roots(CT,p,q):
    roots = []
    for c_2 in rabin_decrypt(CT,p,q):
        roots.extend(rabin_decrypt(c_2,p,q))
    assert all(pow(i,4,p*q)==CT for i in roots)
    return list(set(roots))

def rsa_dec(CT,e,p,q):
    return pow(CT,pow(e,-1,(p-1)*(q-1)),p*q)

def gen_rsa_dec(CT,e,p,q):
    phi = (p-1)*(q-1)
    n = p*q
    facs = list(Counter(factorint(e)).elements())
    results = [CT]
    prod=1
    for fac in facs:
        if fac==2:
            new_res = []
            for result in results:
                new_res.extend(rabin_decrypt(result,p,q))
            results = list(set(new_res))
        elif gcd(fac,phi)!=1:
            return []
        else:
            new_res = []
            for result in results:
                new_res.append(rsa_dec(result,fac,p,q))
            results = new_res.copy()
        prod*=fac
        results = [i for i in results if pow(i,prod,n)==CT]
    return results

e = 10440
phi = (p-1)*(q-1)
n=p*q
while True:
    if gcd(e,phi)!=1:
        for m in gen_rsa_dec(ct,e,p,q):
            print(pow(m,e,n)==ct)
            mes = n2s(m)
            print(e,mes)
            if b'*CTF' in mes:
                break
    e+=1


def gen_rsa(ct,p,q):
    n = p*q 
    phi = (p-1)*(q-1)
    e = 4200
    while True:
        if e%2!=0 and gcd(e,phi)!=1:

        e+=1

from itertools import product
def nth_root(ct,e,p,q):
    n=p*q
    if e%2==0:
        return []
    p_roots = GF(p)(ct).nth_root(e,all=True)
    if p_roots == []:
        return []
    q_roots = GF(q)(ct).nth_root(e,all=True)
    if q_roots == []:
        return []
    roots = []
    for rp,rq in product(p_roots,q_roots):
        roots.append(crt(int(rp),int(rq),int(p),int(q)))
    return roots

e=4201
e=4918
phi = (int(p)-1)*(int(q)-1)
while True:
    if gcd(phi,e)!=1:
        for root in nth_root(ct,e,p,q):
            m = long_to_bytes(root)
            # print(e,m)
            if b'CTF' in m:
                print(m)
                break
        print(e)
    e+=1
