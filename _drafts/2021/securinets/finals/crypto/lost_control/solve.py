
from Crypto.Cipher import AES
import random
import hashlib
import signal


def is_prime(n):
    _B = [0x2, 0x3, 0x5, 0x7, 0xb, 0xd, 0x11, 0x13, 0x17, 0x1d, 0x1f, 0x25, 0x29, 0x2b, 0x2f, 0x35, 0x3b, 0x3d, 0x43, 0x47, 0x49, 0x4f, 0x53, 0x59, 0x61, 0xc5, 0xc7, 0x1cf,
          0x209, 0x373, 0x463, 0x517, 0x65b, 0x9ad, 0xbe1, 0xc25, 0xc89, 0xd3f, 0xd8d, 0xe6b, 0xfa1, 0x10f1, 0x1127, 0x1645, 0x179b, 0x187f, 0x19b5, 0x19db, 0x19fd, 0x1c8d]

    if n == 2 or n == 3:
        return True
    if n % 2 == 0:
        return False

    r, s = 0, n - 1
    while s % 2 == 0:
        r += 1
        s //= 2

    for a in _B:
        x = pow(a, s, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(r - 1):
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False
    return True


def send_flag(shared_secret):
    shared_secret = shared_secret.to_bytes(
        (shared_secret.bit_length() + 7) // 8, 'big')
    key = hashlib.sha1(shared_secret).digest()[:16]
    iv = hashlib.sha1(shared_secret).digest()[-16:]
    flag = open("flag.txt", "rb").read()
    return AES.new(key, AES.MODE_CBC, iv).encrypt(flag).hex()

flag = bytes.fromhex('a3a907bd4799a741c879bf118594c407a85c8b8c76774e8cce4e5712a825f5ff48a62a7ac2c3f82a9c2413775b020725345e29dc79c357c52b614c1290a6b49057544670ff07616f17813dd7a3c1f828')

shared_secret = b'\x01'
key = hashlib.sha1(shared_secret).digest()[:16]
iv = hashlib.sha1(shared_secret).digest()[-16:]
decrypted = AES.new(key,AES.MODE_CBC,iv).decrypt(flag)
print(decrypted)
 


def exchange():
    g = 2
    p = int(input("p = "))

    assert p.bit_length() > 2200 and p.bit_length() < 2500
    assert is_prime(p)

    x = int(input("x = "))
    assert x > 2 and x < p - 2

    user = pow(g, x, p)
    server = pow(g, random.randrange(2, p - 2), p)
    shared_secret = pow(server, x, p)

    print(send_flag(shared_secret))


#p1 = pow(2,576)*0x24a027808260908b96d740bef8355ded63f6edb7f70de9a9 \
#        + pow(2,384)*0xb99c408f131cef3855b4b0aea6b17a4469ed5a7ec8b2be62 \
#        + pow(2,192)*0x66c3a9eae83a6769e175cb2598256da977b9e191b9b847a7 \
#        + 0xe2cf4750d9bc2d64ccd3406f5db662c22c3fc65e3c56eff3
#k2,k3 = 641,677
#p2 = k2*(p1-1)+1
#p3 = k3*(p1-1)+1

n = 4979619245603662087808199316228395046820198104618360133386415284998672317458663276431688583051670135187857541340090710779787145220962358720013319837913916696190617982393715019629429626103282009957295996394417876993602443511741558790516075522670309134579038299076949460280390876000293172339037062598735505558885389530765668719511563595692168260842213525483681032830321221443080790226038672940828691278746802413844520054919027055356776761074835650706657844949730711650808260818442870053005148782360983778060948514031837195019619596358361117393586091269250296261620412030295424149820505870705709782163813735022683743571424359695131674126524423486354951480592235911723

p1 = 2281239820974017009887432476755643594109605839465399902579060142869678992447208049420520869025560934356394158391860038541141847957739523954732799434185125382104022878364325992104164653175499510089589547708200267986520043
p2 = 230405221918375717998630680152320003005070189786005390160485074429837578237168012991472607771581654369995809997577863892655326643731691919428012742852697663592506310714796925202520629970725450519048544318528227066638524243
p3 = 9473988976505092642062507075966187846337193051299805795410836773337776855633255029243423169063154560382104939801394740061362094568492242984005316050170825711878007013847045845208595804637849465402065391632155712948017734427
order = (p1-1)*(p2-1)*(p3-1)
