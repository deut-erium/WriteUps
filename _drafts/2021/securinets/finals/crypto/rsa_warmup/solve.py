from itertools import product, chain, combinations
from math import prod,gcd

def powerset(lst):
    return chain.from_iterable(combinations(lst,r) 
                               for r in range(1,len(lst)+1))

def divisors(factor_list):
    return [prod(i) for i in powerset(factor_list)]

def possible_256(factor_list):
    product = prod(factor_list)
    possibilities = set()
    for c1 in divisors(factor_list):
        c2 = product//c1
        if c1.bit_length()<=256 and c2.bit_length()<=256:
            possibilities.add(tuple(sorted((c1,c2))))
            #print(c1,c2)
    return list(possibilities)

def solve_linear(a1,a2,c1,c2,v1,v2):
    b1,b2 = (c1*v1-a1*v2)//(c1*a2-a1*c2), (c2*v1-a2*v2)//(a1*c2-a2*c1)
    #assert a1*b2+a2*b1==v1
    #assert c1*b2+c2*b1==v2
    return b1,b2

mask_512 = (1<<512)-1
n =  17597986518084889064495904581659754012292560908739002352946606132325337344190116734025514412786012343684053315299322638837124885197497122773007158505504325625750623488803953181037509076332884939869649594899252482662064956991880469824330098169357356225953201612782440267839755735169302350205440221600195968804904062013555305772189906553152864709623993290149472389991583702024098903971867785580355168746856776012890208439287460359662455016537429202035771283917664177774847612461933940607135217159170891924314044462908379748123913668663677681943876181382293936250589796431597008101273346250320723145195825900467596258446443829205695806903086411865745028755321639238563151547479099401837575503242517034591860523123336333776570782383732871236536188965541324759943390664212499
e =  65537
c =  16246194204498378526119705040827171355304789459219366231057983894644030367068319229536878411890848097491554031603505780098106761899640833144658975084003102552209666357319896062092508466087608512158014320721171730857243994137306389142414940788621153039478139864467458626431547107990685554513842394632168485640324582752770963627338352041437824555434865879978752447688741823733392950703654266726791215374731230667432445553493664030537982019024678141544309294945642705846610686763576336572950571763900936850000844278725231598056125593783881790554309763552167615277194607078021004750382517275743139265337299108092116837410777618386489798275351808634317999507961688756085958006281687982214595010727809819262433102534692942199449029640565483182946487574951642386211761585124346

c1c2 = n&mask_512
a1a2 = n>>2048
v1 = (n>>(2048-512))&mask_512  # a1b2+a2b1
v2 = (n>>(512))&mask_512      # b1c2+b2c1
v3 = (n>>1024)&mask_512       #  a1c2+a2c1+b1b2

c1c2_facs = [3, 167, 173, 643, 2663, 10111, 68171, 407503, 1195127, 86697223, 69269300423, 2176490150467, 1380714033016463, 3354750090049454333, 907281973526686186831, 438661697241581772883216132132796341]
a1a2_facs = [2,2,2, 3, 5,5, 11, 839, 24378379, 10127635337, 35167214689, 29679094389250441500647, 157572042162346477971246438851, 501902635500636955617816959983, 4825316747962653278470626096549480659]
a1a2_poss = possible_256(a1a2_facs)
c1c2_poss = possible_256(c1c2_facs)

for a1,a2 in a1a2_poss:
    for c1,c2 in c1c2_poss:
        b1,b2 = solve_linear(a1,a2,c1,c2,v1,v2)
        p1 = (a1<<1024) + (b1<<512) + c1
        q1 = (a2<<1024) + (b2<<512) + c2
        if p1*q1==n:
            p,q=p1,q1
            
m = pow(c, pow(e,-1,(p-1)*(q-1)), n)
print(m.to_bytes( (m.bit_length()+7)//8,'big'))


