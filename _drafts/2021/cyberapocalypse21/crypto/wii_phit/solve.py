from itertools import combinations, chain
from math import prod
from gmpy2 import is_prime,isqrt
from sympy import *


def powerset(lst):
    for subs in chain.from_iterable([combinations(lst,r) for r in range(1,len(lst)+1)  ]):
        yield subs


flag = 0x12f47f77c4b5a72a0d14a066fedc80ba6064058c900a798f1658de60f13e1d8f21106654c4aac740fd5e2d7cf62f0d3284c2686d2aac261e35576df989185fee449c20efa171ff3d168a04bce84e51af255383a59ed42583e93481cbfb24fddda16e0a767bff622a4753e1a5df248af14c9ad50f842be47ebb930604becfd4af04d21c0b2248a16cdee16a04b4a12ac7e2161cb63e2d86999a1a8ed2a8faeb4f4986c2a3fbd5916effb1d9f3f04e330fdd8179ea6952b14f758d385c4bc9c5ae30f516c17b23c7c6b9dbe40e16e90d8734baeb69fed12149174b22add6b96750e4416ca7addf70bcec9210b967991e487a4542899dde3abf3a91bbbaeffae67831c46c2238e6e5f4d8004543247fae7ff25bbb01a1ab3196d8a9cfd693096aabec46c2095f2a82a408f688bbedddc407b328d4ea5394348285f48afeaafacc333cff3822e791b9940121b73f4e31c93c6b72ba3ede7bba87419b154dc6099ec95f56ed74fb5c55d9d8b3b8c0fc7de99f344beb118ac3d4333eb692710eaa7fd22

w = 25965460884749769384351428855708318685345170011800821829011862918688758545847199832834284337871947234627057905530743956554688825819477516944610078633662855
w_facs = [3,3,5,7,13,29,434042467,2653449587,829389339613,83650191286538267,230273040692341057927424921859691070112571,11883177505668730792493643213740187762213318933976534979289089]

def solve_for_q(p):
    return (25965460884749769384351428855708318685345170011800821829011862918688758545847199832834284337871947234627057905530743956554688825819477516944610078633662851*p**2 + 69042160492549636792990449327328419384332807061378385243342543500793408973407704355506362054401507696873346970806248180478917587853990717555718199086909520817*p + 45895743730596265120928670751055497150336876812588766839484669527323770254124589161323063132807979901562514115021071564543414773164908055148267492080424811889847)//(-4*p**2 + 51930921769499538768702857711416637370690340023601643658023725837377517091694399665668568675743894469254115811061487913109377651638955033889220157267315082*p + 68990229570780137254221746469617002746962116721354783599684519774956031456316009955840693485725763802404092854995186692565808210202351762521828978929635146087)

def solve_for_p(q):
    v1 = (51930921769499538768702857711416637370690340023601643658023725837377517091694399665668568675743894469254115811061487913109377651638955033889220157267315082*q - isqrt(2696820635829881106797430917818068714099698544675545797477606831661176517334418472146676443643128820216634627734116848262147935499861347776938058719229032118395628812135428227669560746750760827766273696685914097106471979186177531656149760212003548771501457342521027378162270076145485800124328704135975227004116*q**2 - 5393641271659762213594861835636137428199397089351091594955213663322353034668836944293352887286257640433269255468233696524295870999722695553876117438458064029067570546272701380527690647834972172771187298965253562118040608862286696534700857749732394567425037668578810510372887714780365044428521851391321384705392*q + 3371025794787351383496788647272585892624623180844432246847008539576470646668023090183345554553911025270793284667646060327684919374826684721172573399036289940270848937171130209775520087771901551946482026450817989288186624472653547792588537590729732988798944661688039976751185157671250694335275323289339964452301) - 69042160492549636792990449327328419384332807061378385243342543500793408973407704355506362054401507696873346970806248180478917587853990717555718199086909520817)//(2*(4*q + 25965460884749769384351428855708318685345170011800821829011862918688758545847199832834284337871947234627057905530743956554688825819477516944610078633662851))
    v2 = (51930921769499538768702857711416637370690340023601643658023725837377517091694399665668568675743894469254115811061487913109377651638955033889220157267315082*q + isqrt(2696820635829881106797430917818068714099698544675545797477606831661176517334418472146676443643128820216634627734116848262147935499861347776938058719229032118395628812135428227669560746750760827766273696685914097106471979186177531656149760212003548771501457342521027378162270076145485800124328704135975227004116*q**2 - 5393641271659762213594861835636137428199397089351091594955213663322353034668836944293352887286257640433269255468233696524295870999722695553876117438458064029067570546272701380527690647834972172771187298965253562118040608862286696534700857749732394567425037668578810510372887714780365044428521851391321384705392*q + 3371025794787351383496788647272585892624623180844432246847008539576470646668023090183345554553911025270793284667646060327684919374826684721172573399036289940270848937171130209775520087771901551946482026450817989288186624472653547792588537590729732988798944661688039976751185157671250694335275323289339964452301) - 69042160492549636792990449327328419384332807061378385243342543500793408973407704355506362054401507696873346970806248180478917587853990717555718199086909520817)//(2*(4*q + 25965460884749769384351428855708318685345170011800821829011862918688758545847199832834284337871947234627057905530743956554688825819477516944610078633662851))
    results = []
    if is_prime(v1):
        results.append(v1)
    if is_prime(v2):
        results.append(v2)
    return results


for subs in powerset(w_facs):
    t = prod(subs)
    if is_prime(t-1328):
        p = t-1328
        q = solve_for_q(p)
        if is_prime(q):
            x = p + 1328
            y = p + 1329
            z = q - 1
            if w*(x*z + y*z - x*y) == 4*x*y*z:
                print(p,q)
                break
    if is_prime(t-1329):
        p = t-1329
        q = solve_for_q(p)
        if is_prime(q):
            x = p + 1328
            y = p + 1329
            z = q - 1
            if w*(x*z + y*z - x*y) == 4*x*y*z:
                print(p,q)
                break
    if is_prime(t+1):
        q = t+1
        for p in solve_for_p(q):
            x = p + 1328
            y = p + 1329
            z = q - 1
            if w*(x*z + y*z - x*y) == 4*x*y*z:
                print(p,q)


p,q = symbols('p q')
x = p + 1328
y = p + 1329
z = q - 1
t = solve(w*(x*z + y*z - x*y) - 4*x*y*z, p*p*(p-1)*(q-1))

q = p//2+665

#
#wxz + wyz = 4xyz+wxy
#
#wxz + wyz -wxy -4xyz = 0
#
#z-x = q-p-1329 = q-y
#
#y+z-x = q
#
#wy*(z - x) + xz(w - 4y) = 0
# z-x = q-y
#-w*(p**2 + 2657*p + 1764912) = k(4*p**2 - 2*p*w + 10628*p - 2657*w + 7059648)
#
# w(xz + xz + z - x(x+1)
# w(2xz-x2 + z-x) = 4 x(x+1)z

# w(z(2x+1) -x(x+1)) =  4(x(x+1)z

# w =  4zx(x+1)/ ( z(2x+1) - x(x+1))

# x(x+1) = k
# w(z(2x+1) -k) = 4kz
# wz(2x+1) = k(4z+w)
# wz sqrt(4k+1) = 4kz+wk
# x2+x - k = 0
# sqrt(1+4k) = 2x+1

# w(z sqrt(4k+1) -k) = 4kz

#p*2(p-1)(q-1)

# w(x(z+ q-y ) + q-y)

# 1/a + 1/(a+4) = 1/z + 1/w

p = 12982730442374884692175714427854159342672585005900410914505931459344379272923599916417142168935973617313528952765371978277344412909738758472305039316830099

q = 4376511920801673769046982367789644084746600661635151104602579081967083768976309788885633491753761209012042953502416064276555378570438196809829053232168930363213412874907199642703512833211163084612185095343783021125928854760406110492494016250237689683218940269389627326164130063600050024089561671913076715913062539181517022517918888557966172136200366952844819842691032260278270002343732370611629511112677638724984890716752906711541254394792207074699964511035503381

#CHTB{Erdos-Straus-Conjecture}

