<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://deut-erium.github.io/WriteUps/feed.xml" rel="self" type="application/atom+xml" /><link href="https://deut-erium.github.io/WriteUps/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-08-22T02:45:31+05:30</updated><id>https://deut-erium.github.io/WriteUps/feed.xml</id><title type="html">CTF Writeups</title><subtitle>Himanshu Sheoran deut-erium deuterium cryptography Capture The Flag  CTF hacking cybersecurity SAT SMT solvers and computer science
  
</subtitle><author><name>deuterium</name><email>farziemailid69@gmail.com</email></author><entry><title type="html">Nullcon HackIM 2023 Crypto - Curvy Decryptor</title><link href="https://deut-erium.github.io/WriteUps/2023/nullcon_hackim/crypto/curvy_decryptor/2023-08-21-Nullcon-HackIM-Curvy-Decryptor" rel="alternate" type="text/html" title="Nullcon HackIM 2023 Crypto - Curvy Decryptor" /><published>2023-08-21T00:00:00+05:30</published><updated>2023-08-21T00:00:00+05:30</updated><id>https://deut-erium.github.io/WriteUps/2023/nullcon_hackim/crypto/curvy_decryptor/Nullcon-HackIM-Curvy-Decryptor</id><content type="html" xml:base="https://deut-erium.github.io/WriteUps/2023/nullcon_hackim/crypto/curvy_decryptor/2023-08-21-Nullcon-HackIM-Curvy-Decryptor"><![CDATA[<!--more-->

<h2 id="challenge-description">Challenge Description</h2>

<blockquote>
  <p>Curvy Decryptor
473 points
Alice has hidden 2 flags in this challenge. And even though she is willing to decrypt most ciphers, she has some basic saveguards against stealing flags.
Please submit flag1 here.
nc 52.59.124.14 10005</p>
</blockquote>

<h2 id="source-files">Source Files</h2>

<blockquote>
  <p><a href="./curvy_decryptor.py">curvy_decryptor.py</a><br />
<a href="./ec.py">ec.py</a><br />
<a href="./utils.py">utils.py</a></p>
</blockquote>

<h2 id="source-analysis">Source Analysis</h2>
<p>From <code class="language-plaintext highlighter-rouge">curvy_decryptor.py</code></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
</span><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">sys</span>
<span class="kn">import</span> <span class="n">string</span>
<span class="kn">from</span> <span class="n">Crypto.Util</span> <span class="kn">import</span> <span class="n">number</span>
<span class="kn">from</span> <span class="n">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">bytes_to_long</span><span class="p">,</span> <span class="n">long_to_bytes</span>
<span class="kn">from</span> <span class="n">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
<span class="kn">from</span> <span class="n">binascii</span> <span class="kn">import</span> <span class="n">hexlify</span>

<span class="kn">from</span> <span class="n">ec</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="n">utils</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="n">secret</span> <span class="kn">import</span> <span class="n">flag1</span><span class="p">,</span> <span class="n">flag2</span>

<span class="c1">#P-256 parameters
</span><span class="n">p</span> <span class="o">=</span> <span class="mh">0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff</span>
<span class="n">a</span> <span class="o">=</span> <span class="o">-</span><span class="mi">3</span>
<span class="n">b</span> <span class="o">=</span> <span class="mh">0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b</span>
<span class="n">n</span> <span class="o">=</span> <span class="mh">0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551</span>
<span class="n">curve</span> <span class="o">=</span> <span class="nc">EllipticCurve</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span> <span class="n">order</span> <span class="o">=</span> <span class="n">n</span><span class="p">)</span>
<span class="n">G</span> <span class="o">=</span> <span class="nc">ECPoint</span><span class="p">(</span><span class="n">curve</span><span class="p">,</span> <span class="mh">0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296</span><span class="p">,</span> <span class="mh">0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5</span><span class="p">)</span>

<span class="n">d_a</span> <span class="o">=</span> <span class="nf">bytes_to_long</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="nf">urandom</span><span class="p">(</span><span class="mi">32</span><span class="p">))</span>
<span class="n">P_a</span> <span class="o">=</span> <span class="n">G</span> <span class="o">*</span> <span class="n">d_a</span>

<span class="n">printable</span> <span class="o">=</span> <span class="p">[</span><span class="nf">ord</span><span class="p">(</span><span class="n">char</span><span class="p">.</span><span class="nf">encode</span><span class="p">())</span> <span class="k">for</span> <span class="n">char</span> <span class="ow">in</span> <span class="n">string</span><span class="p">.</span><span class="n">printable</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">msg</span> <span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">pubkey</span> <span class="p">:</span> <span class="n">ECPoint</span><span class="p">):</span>
    <span class="n">x</span> <span class="o">=</span> <span class="nf">bytes_to_long</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
    <span class="n">y</span> <span class="o">=</span> <span class="nf">modular_sqrt</span><span class="p">(</span><span class="n">x</span><span class="o">**</span><span class="mi">3</span> <span class="o">+</span> <span class="n">a</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">b</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
    <span class="n">m</span> <span class="o">=</span> <span class="nc">ECPoint</span><span class="p">(</span><span class="n">curve</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="n">d_b</span> <span class="o">=</span> <span class="n">number</span><span class="p">.</span><span class="nf">getRandomRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">n</span><span class="p">)</span>
    <span class="nf">return </span><span class="p">(</span><span class="n">G</span> <span class="o">*</span> <span class="n">d_b</span><span class="p">,</span> <span class="n">m</span> <span class="o">+</span> <span class="p">(</span><span class="n">pubkey</span> <span class="o">*</span> <span class="n">d_b</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">B</span> <span class="p">:</span> <span class="n">ECPoint</span><span class="p">,</span> <span class="n">c</span> <span class="p">:</span> <span class="n">ECPoint</span><span class="p">,</span> <span class="n">d_a</span> <span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">B</span><span class="p">.</span><span class="n">inf</span> <span class="ow">or</span> <span class="n">c</span><span class="p">.</span><span class="n">inf</span><span class="p">:</span> <span class="k">return</span> <span class="sa">b</span><span class="s">''</span>
    <span class="k">return</span> <span class="nf">long_to_bytes</span><span class="p">((</span><span class="n">c</span> <span class="o">-</span> <span class="p">(</span><span class="n">B</span> <span class="o">*</span> <span class="n">d_a</span><span class="p">)).</span><span class="n">x</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">loop</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">'I will decrypt anythin as long as it does not talk about flags.'</span><span class="p">)</span>
    <span class="n">balance</span> <span class="o">=</span> <span class="mi">1024</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">'B:'</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="s">''</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="nf">flush</span><span class="p">()</span>
        <span class="n">B_input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nb">buffer</span><span class="p">.</span><span class="nf">readline</span><span class="p">().</span><span class="nf">strip</span><span class="p">().</span><span class="nf">decode</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">'c:'</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="s">''</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="nf">flush</span><span class="p">()</span>
        <span class="n">c_input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nb">buffer</span><span class="p">.</span><span class="nf">readline</span><span class="p">().</span><span class="nf">strip</span><span class="p">().</span><span class="nf">decode</span><span class="p">()</span>
        <span class="n">B</span> <span class="o">=</span> <span class="nc">ECPoint</span><span class="p">(</span><span class="n">curve</span><span class="p">,</span> <span class="o">*</span><span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">B_input</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="s">','</span><span class="p">)])</span>
        <span class="n">c</span> <span class="o">=</span> <span class="nc">ECPoint</span><span class="p">(</span><span class="n">curve</span><span class="p">,</span> <span class="o">*</span><span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">c_input</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="s">','</span><span class="p">)])</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d_a</span><span class="p">)</span>
        <span class="k">if</span> <span class="sa">b</span><span class="s">'ENO'</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">:</span>
            <span class="n">balance</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">balance</span> <span class="o">-=</span> <span class="mi">1</span> <span class="o">+</span> <span class="nf">len</span><span class="p">([</span><span class="n">c</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">msg</span> <span class="k">if</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">printable</span><span class="p">])</span>
        <span class="k">if</span> <span class="n">balance</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="nf">hexlify</span><span class="p">(</span><span class="n">msg</span><span class="p">))</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">'balance left: %d'</span> <span class="o">%</span> <span class="n">balance</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">'You cannot afford any more decryptions.'</span><span class="p">)</span>
            <span class="k">return</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">'My public key is:'</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">P_a</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">'Good luck decrypting this cipher.'</span><span class="p">)</span>
    <span class="n">B</span><span class="p">,</span><span class="n">c</span> <span class="o">=</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">flag1</span><span class="p">,</span> <span class="n">P_a</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
    <span class="n">key</span> <span class="o">=</span> <span class="nf">long_to_bytes</span><span class="p">((</span><span class="n">d_a</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="mi">8</span><span class="o">*</span><span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="p">(</span><span class="n">d_a</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffffffffffffffffffff</span><span class="p">))</span>
    <span class="n">enc</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_ECB</span><span class="p">)</span>
    <span class="n">cipher</span> <span class="o">=</span> <span class="n">enc</span><span class="p">.</span><span class="nf">encrypt</span><span class="p">(</span><span class="n">flag2</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="nf">hexlify</span><span class="p">(</span><span class="n">cipher</span><span class="p">).</span><span class="nf">decode</span><span class="p">())</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="nf">loop</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">err</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="curvy-decryptor-part-1">Curvy Decryptor part 1</h2>
<p>The solution of Curvy Decryptor part 1 is to find out <code class="language-plaintext highlighter-rouge">flag1</code></p>

<h2 id="curvy-decryptor-part-2">Curvy Decryptor part 2</h2>
<p>The solution of Curvy Decryptor part 1 is to find out <code class="language-plaintext highlighter-rouge">flag2</code><br />
The <code class="language-plaintext highlighter-rouge">flag2</code> appears to be AES encrypted with a key which is</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>key = long_to_bytes((d_a &gt;&gt; (8*16)) ^ (d_a &amp; 0xffffffffffffffffffffffffffffffff))
</code></pre></div></div>
<p>The xor of most significant and least significant 64 bits of the 128 bits private key <code class="language-plaintext highlighter-rouge">d_a</code><br />
So in order to recover the <code class="language-plaintext highlighter-rouge">flag2</code> we will need to break the ECC and recover <code class="language-plaintext highlighter-rouge">d_a</code></p>

<h3 id="analysing-curvy_decryptorpy">Analysing curvy_decryptor.py</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#P-256 parameters
</span><span class="n">p</span> <span class="o">=</span> <span class="mh">0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff</span>
<span class="n">a</span> <span class="o">=</span> <span class="o">-</span><span class="mi">3</span>
<span class="n">b</span> <span class="o">=</span> <span class="mh">0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b</span>
<span class="n">n</span> <span class="o">=</span> <span class="mh">0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551</span>
<span class="n">curve</span> <span class="o">=</span> <span class="nc">EllipticCurve</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span> <span class="n">order</span> <span class="o">=</span> <span class="n">n</span><span class="p">)</span>
<span class="n">G</span> <span class="o">=</span> <span class="nc">ECPoint</span><span class="p">(</span><span class="n">curve</span><span class="p">,</span> <span class="mh">0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296</span><span class="p">,</span> <span class="mh">0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5</span><span class="p">)</span>

<span class="n">d_a</span> <span class="o">=</span> <span class="nf">bytes_to_long</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="nf">urandom</span><span class="p">(</span><span class="mi">32</span><span class="p">))</span>
<span class="n">P_a</span> <span class="o">=</span> <span class="n">G</span> <span class="o">*</span> <span class="n">d_a</span>
</code></pre></div></div>
<p>indeed look like a standard curve P-256 (note that a = -3 is equivalent to a = p - 3)<br />
So there doesnt appear to be any standard weakness based on weak curve parameters.<br />
The private key <code class="language-plaintext highlighter-rouge">d_a</code> is initialized to be per-instance system-random 128 bit number<br />
And the Public key <code class="language-plaintext highlighter-rouge">P_a</code> is simply <code class="language-plaintext highlighter-rouge">G*d_a</code></p>

<h4 id="encryption">Encryption</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">msg</span> <span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">pubkey</span> <span class="p">:</span> <span class="n">ECPoint</span><span class="p">):</span>
    <span class="n">x</span> <span class="o">=</span> <span class="nf">bytes_to_long</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
    <span class="n">y</span> <span class="o">=</span> <span class="nf">modular_sqrt</span><span class="p">(</span><span class="n">x</span><span class="o">**</span><span class="mi">3</span> <span class="o">+</span> <span class="n">a</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">b</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
    <span class="n">m</span> <span class="o">=</span> <span class="nc">ECPoint</span><span class="p">(</span><span class="n">curve</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="n">d_b</span> <span class="o">=</span> <span class="n">number</span><span class="p">.</span><span class="nf">getRandomRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">n</span><span class="p">)</span>
    <span class="nf">return </span><span class="p">(</span><span class="n">G</span> <span class="o">*</span> <span class="n">d_b</span><span class="p">,</span> <span class="n">m</span> <span class="o">+</span> <span class="p">(</span><span class="n">pubkey</span> <span class="o">*</span> <span class="n">d_b</span><span class="p">))</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">msg</code> is encoded as the x coordinate of the point, the corresponding <code class="language-plaintext highlighter-rouge">y</code> is found
so as to find the point on the curve to generate the point <code class="language-plaintext highlighter-rouge">m</code><br />
A secure random number <code class="language-plaintext highlighter-rouge">d_b</code> in range (0 - curve order) is generated as the nonce,
The points <code class="language-plaintext highlighter-rouge">G*d_b</code> and <code class="language-plaintext highlighter-rouge">m + (pubkey * d_b)</code> are returned</p>

<h4 id="decryption">Decryption</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">B</span> <span class="p">:</span> <span class="n">ECPoint</span><span class="p">,</span> <span class="n">c</span> <span class="p">:</span> <span class="n">ECPoint</span><span class="p">,</span> <span class="n">d_a</span> <span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">B</span><span class="p">.</span><span class="n">inf</span> <span class="ow">or</span> <span class="n">c</span><span class="p">.</span><span class="n">inf</span><span class="p">:</span> <span class="k">return</span> <span class="sa">b</span><span class="s">''</span>
    <span class="k">return</span> <span class="nf">long_to_bytes</span><span class="p">((</span><span class="n">c</span> <span class="o">-</span> <span class="p">(</span><span class="n">B</span> <span class="o">*</span> <span class="n">d_a</span><span class="p">)).</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div>

<p>It simply reverses the encrypt function if correct <code class="language-plaintext highlighter-rouge">d_a</code> is provided<br />
i.e if we do</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">B</span><span class="p">,</span><span class="n">c</span> <span class="o">=</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">flag1</span><span class="p">,</span> <span class="n">P_a</span><span class="p">)</span>
<span class="n">xx</span> <span class="o">=</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">B</span><span class="p">,</span><span class="n">c</span><span class="p">)</span>
</code></pre></div></div>

<p>We will get,</p>

\[\text{decrypt}((G * d_b * d_a), \text{flag}_m + (P_a * d_b))\]

\[= (\text{flag}_m + (P_a * d_b) - G * d_b * d_a).x\]

\[= (\text{flag}_m + G * d_a * d_b - G * d_b * d_a).x\]

\[= (\text{flag}_m).x = \text{flag}\]

<h4 id="main-loop">Main Loop</h4>
<p>The main loop of the program just repeatedly asks for input of two EC points <code class="language-plaintext highlighter-rouge">B</code> and <code class="language-plaintext highlighter-rouge">c</code>  and tries to decrypt it with the servers private key <code class="language-plaintext highlighter-rouge">d_a</code><br />
BUT<br />
if the decryption contains <code class="language-plaintext highlighter-rouge">b'ENO'</code> i.e the start of the flag, it exits.<br />
Otherwise it decreases the balance proportionate to the number of printable characters in the decryption.</p>

<p>So If we directly input the <code class="language-plaintext highlighter-rouge">B</code> and <code class="language-plaintext highlighter-rouge">c</code> corresponding to the <code class="language-plaintext highlighter-rouge">flag1</code>, it will abort and hence no flags for us :’(</p>

<p>But it doesnt care what points we ask it to decrypt.<br />
So what if we try to decrypt the points <code class="language-plaintext highlighter-rouge">B</code>, <code class="language-plaintext highlighter-rouge">c + A</code></p>

<p>We will get,</p>

\[\text{decrypt}((G * d_b * d_a), \text{flag}_m + (P_a * d_b) + A)\]

\[= (\text{flag}_m + (P_a * d_b) + A - G * d_b * d_a).x\]

\[= (\text{flag}_m + A + G * d_a * d_b - G * d_b * d_a).x\]

\[= (\text{flag}_m + A).x\]

<p>As long as we know A, we can always get the point from the x coordinate, and subtract A from it to get the original point from the curve for the sake of simplicity, we can even pick it to be <code class="language-plaintext highlighter-rouge">G</code></p>

<p>or we can even try decrypting the points <code class="language-plaintext highlighter-rouge">B + A</code>, <code class="language-plaintext highlighter-rouge">c</code> which will lead to</p>

\[\text{decrypt}((G * d_b * d_a) + A, \text{flag}_m + (P_a * d_b))\]

\[= (\text{flag}_m + (P_a * d_b) - (G * d_b + A) * d_a).x\]

\[= (\text{flag}_m + G * d_a * d_b - G * d_b * d_a - A * d_a).x\]

\[= (\text{flag}_m - A * d_a).x\]

<p>if we choose <code class="language-plaintext highlighter-rouge">A</code> to be <code class="language-plaintext highlighter-rouge">G</code> or <code class="language-plaintext highlighter-rouge">-G</code>, we will end up with the point <code class="language-plaintext highlighter-rouge">flag - P_a</code> or <code class="language-plaintext highlighter-rouge">flag + P_a</code> and since we even know <code class="language-plaintext highlighter-rouge">P_a</code>, it will also work<br />
With a high probability, we wont observe any <code class="language-plaintext highlighter-rouge">b'ENO'</code> in the resulting point, and if we do, we can always pick countless possibilities of <code class="language-plaintext highlighter-rouge">A</code> to make it work</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">ec</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="n">utils</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="n">pwn</span>

<span class="n">p</span> <span class="o">=</span> <span class="mh">0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff</span>
<span class="n">a</span> <span class="o">=</span> <span class="o">-</span><span class="mi">3</span>
<span class="n">b</span> <span class="o">=</span> <span class="mh">0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b</span>
<span class="n">n</span> <span class="o">=</span> <span class="mh">0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551</span>
<span class="n">curve</span> <span class="o">=</span> <span class="nc">EllipticCurve</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span> <span class="n">order</span> <span class="o">=</span> <span class="n">n</span><span class="p">)</span>
<span class="n">G</span> <span class="o">=</span> <span class="nc">ECPoint</span><span class="p">(</span><span class="n">curve</span><span class="p">,</span> <span class="mh">0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296</span><span class="p">,</span> <span class="mh">0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5</span><span class="p">)</span>

<span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span> <span class="o">=</span> <span class="s">"52.59.124.14"</span><span class="p">,</span> <span class="mi">10005</span>
<span class="n">REM</span> <span class="o">=</span> <span class="n">pwn</span><span class="p">.</span><span class="nf">remote</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>

<span class="n">REM</span><span class="p">.</span><span class="nf">recvline</span><span class="p">()</span> <span class="c1"># My public key is:
</span><span class="n">pubkey</span> <span class="o">=</span> <span class="n">REM</span><span class="p">.</span><span class="nf">recvline</span><span class="p">().</span><span class="nf">strip</span><span class="p">()[</span><span class="mi">6</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nf">split</span><span class="p">(</span><span class="sa">b</span><span class="s">','</span><span class="p">)</span>
<span class="n">P_a</span> <span class="o">=</span> <span class="nc">ECPoint</span><span class="p">(</span><span class="n">curve</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">pubkey</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nf">int</span><span class="p">(</span><span class="n">pubkey</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>

<span class="n">REM</span><span class="p">.</span><span class="nf">recvline</span><span class="p">()</span> <span class="c1"># Good luck decrypting this cipher.
</span><span class="n">B_text</span> <span class="o">=</span> <span class="n">REM</span><span class="p">.</span><span class="nf">recvline</span><span class="p">().</span><span class="nf">strip</span><span class="p">()[</span><span class="mi">6</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nf">split</span><span class="p">(</span><span class="sa">b</span><span class="s">','</span><span class="p">)</span>
<span class="n">B</span> <span class="o">=</span> <span class="nc">ECPoint</span><span class="p">(</span><span class="n">curve</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">B_text</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nf">int</span><span class="p">(</span><span class="n">B_text</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>

<span class="n">c_text</span> <span class="o">=</span> <span class="n">REM</span><span class="p">.</span><span class="nf">recvline</span><span class="p">().</span><span class="nf">strip</span><span class="p">()[</span><span class="mi">6</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nf">split</span><span class="p">(</span><span class="sa">b</span><span class="s">','</span><span class="p">)</span>
<span class="n">c</span> <span class="o">=</span> <span class="nc">ECPoint</span><span class="p">(</span><span class="n">curve</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">c_text</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nf">int</span><span class="p">(</span><span class="n">c_text</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>

<span class="n">flag2_enc</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="nf">fromhex</span><span class="p">(</span><span class="n">REM</span><span class="p">.</span><span class="nf">recvline</span><span class="p">().</span><span class="nf">strip</span><span class="p">().</span><span class="nf">decode</span><span class="p">())</span>

<span class="n">REM</span><span class="p">.</span><span class="nf">recvline</span><span class="p">()</span> <span class="c1"># I will decrypt anythin as long as it does not talk about flags.
</span>
<span class="k">def</span> <span class="nf">get_decryption</span><span class="p">(</span><span class="n">B</span><span class="p">,</span><span class="n">c</span><span class="p">):</span>
    <span class="n">REM</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="s">"{},{}"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">B</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">B</span><span class="p">.</span><span class="n">y</span><span class="p">))</span>
    <span class="n">REM</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="s">"{},{}"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">c</span><span class="p">.</span><span class="n">y</span><span class="p">))</span>
    <span class="n">status</span> <span class="o">=</span> <span class="n">REM</span><span class="p">.</span><span class="nf">recvline</span><span class="p">()</span>
    <span class="k">if</span> <span class="sa">b</span><span class="s">'cannot afford'</span> <span class="ow">in</span> <span class="n">status</span><span class="p">:</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="bp">None</span>
    <span class="n">balance</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">REM</span><span class="p">.</span><span class="nf">recvline</span><span class="p">().</span><span class="nf">strip</span><span class="p">().</span><span class="nf">split</span><span class="p">(</span><span class="sa">b</span><span class="s">': '</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">balance</span><span class="p">,</span> <span class="nb">bytes</span><span class="p">.</span><span class="nf">fromhex</span><span class="p">(</span><span class="n">status</span><span class="p">.</span><span class="nf">strip</span><span class="p">()[</span><span class="mi">6</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nf">decode</span><span class="p">())</span>

<span class="n">bal</span><span class="p">,</span> <span class="n">BG</span> <span class="o">=</span> <span class="nf">get_decryption</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="n">c</span><span class="o">+</span><span class="n">G</span><span class="p">)</span>
<span class="n">BG_int</span> <span class="o">=</span> <span class="nb">int</span><span class="p">.</span><span class="nf">from_bytes</span><span class="p">(</span><span class="n">BG</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="nf">modular_sqrt</span><span class="p">(</span><span class="n">BG_int</span><span class="o">**</span><span class="mi">3</span><span class="o">+</span><span class="n">a</span><span class="o">*</span><span class="n">BG_int</span><span class="o">+</span><span class="n">b</span><span class="p">,</span><span class="n">p</span><span class="p">)</span>  <span class="c1"># getting the valid y coordinate for the x
</span><span class="n">point_BG1</span> <span class="o">=</span> <span class="nc">ECPoint</span><span class="p">(</span><span class="n">curve</span><span class="p">,</span> <span class="n">BG_int</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
<span class="n">point_BG2</span> <span class="o">=</span> <span class="o">-</span><span class="n">point_BG1</span>
<span class="nf">print</span><span class="p">(</span><span class="nb">int</span><span class="p">.</span><span class="nf">to_bytes</span><span class="p">((</span><span class="n">point_BG1</span><span class="o">-</span><span class="n">G</span><span class="p">).</span><span class="n">x</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span><span class="s">'big'</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="nb">int</span><span class="p">.</span><span class="nf">to_bytes</span><span class="p">((</span><span class="n">point_BG2</span><span class="o">-</span><span class="n">G</span><span class="p">).</span><span class="n">x</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span><span class="s">'big'</span><span class="p">))</span>
</code></pre></div></div>

<blockquote>
  <p>Note that we only get the x coordinate of the given point lifting the point would
result in two points and we will need to try with both of them (x,y) and (x,-y)</p>
</blockquote>

<p>The last part will also work with</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bal</span><span class="p">,</span> <span class="n">BG</span> <span class="o">=</span> <span class="nf">get_decryption</span><span class="p">(</span><span class="n">B</span><span class="o">-</span><span class="n">G</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
<span class="n">BG_int</span> <span class="o">=</span> <span class="nb">int</span><span class="p">.</span><span class="nf">from_bytes</span><span class="p">(</span><span class="n">BG</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="nf">modular_sqrt</span><span class="p">(</span><span class="n">BG_int</span><span class="o">**</span><span class="mi">3</span><span class="o">+</span><span class="n">a</span><span class="o">*</span><span class="n">BG_int</span><span class="o">+</span><span class="n">b</span><span class="p">,</span><span class="n">p</span><span class="p">)</span>  <span class="c1"># getting the valid y coordinate for the x
</span><span class="n">point_BG1</span> <span class="o">=</span> <span class="nc">ECPoint</span><span class="p">(</span><span class="n">curve</span><span class="p">,</span> <span class="n">BG_int</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
<span class="n">point_BG2</span> <span class="o">=</span> <span class="o">-</span><span class="n">point_BG1</span>
<span class="nf">print</span><span class="p">(</span><span class="nb">int</span><span class="p">.</span><span class="nf">to_bytes</span><span class="p">((</span><span class="n">point_BG1</span><span class="o">-</span><span class="n">P_a</span><span class="p">).</span><span class="n">x</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span><span class="s">'big'</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="nb">int</span><span class="p">.</span><span class="nf">to_bytes</span><span class="p">((</span><span class="n">point_BG2</span><span class="o">-</span><span class="n">P_a</span><span class="p">).</span><span class="n">x</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span><span class="s">'big'</span><span class="p">))</span>
</code></pre></div></div>

<p>And we get the flag to part 1
<code class="language-plaintext highlighter-rouge">b'\x00\x00ENO{ElGam4l_1s_mult1pl1cativ3}'</code></p>

<h3 id="analysing-ecpy">Analysing ec.py</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">inverse</span>

<span class="k">class</span> <span class="nc">EllipticCurve</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
        <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">order</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="n">p</span> <span class="o">=</span> <span class="n">p</span>
                <span class="n">self</span><span class="p">.</span><span class="n">a</span> <span class="o">=</span> <span class="n">a</span>
                <span class="n">self</span><span class="p">.</span><span class="n">b</span> <span class="o">=</span> <span class="n">b</span>
                <span class="n">self</span><span class="p">.</span><span class="n">n</span> <span class="o">=</span> <span class="n">order</span>

        <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
                <span class="k">return</span> <span class="s">'y^2 = x^3 + %dx + %d modulo %d'</span> <span class="o">%</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">a</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">b</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">p</span><span class="p">)</span>

        <span class="k">def</span> <span class="nf">__eq__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
                <span class="nf">return </span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">a</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">b</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">p</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="n">other</span><span class="p">.</span><span class="n">a</span><span class="p">,</span> <span class="n">other</span><span class="p">.</span><span class="n">b</span><span class="p">,</span> <span class="n">other</span><span class="p">.</span><span class="n">p</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">ECPoint</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
        <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">curve</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">inf</span> <span class="o">=</span> <span class="bp">False</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">%</span> <span class="n">curve</span><span class="p">.</span><span class="n">p</span>
                <span class="n">self</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span> <span class="o">%</span> <span class="n">curve</span><span class="p">.</span><span class="n">p</span>
                <span class="n">self</span><span class="p">.</span><span class="n">curve</span> <span class="o">=</span> <span class="n">curve</span>
                <span class="n">self</span><span class="p">.</span><span class="n">inf</span> <span class="o">=</span> <span class="n">inf</span>
                <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">y</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">inf</span> <span class="o">=</span> <span class="bp">True</span>

        <span class="k">def</span> <span class="nf">copy</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
                <span class="k">return</span> <span class="nc">ECPoint</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">curve</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">y</span><span class="p">)</span>

        <span class="k">def</span> <span class="nf">__neg__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
                <span class="k">return</span> <span class="nc">ECPoint</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">curve</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="n">self</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">inf</span><span class="p">)</span>

        <span class="k">def</span> <span class="nf">__add__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">point</span><span class="p">):</span>
                <span class="n">p</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">curve</span><span class="p">.</span><span class="n">p</span>
                <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">inf</span><span class="p">:</span>
                        <span class="k">return</span> <span class="n">point</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
                <span class="k">if</span> <span class="n">point</span><span class="p">.</span><span class="n">inf</span><span class="p">:</span>
                        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
                <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">x</span> <span class="o">==</span> <span class="n">point</span><span class="p">.</span><span class="n">x</span> <span class="ow">and</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">point</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">%</span> <span class="n">p</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                        <span class="k">return</span> <span class="nc">ECPoint</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">curve</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">x</span> <span class="o">==</span> <span class="n">point</span><span class="p">.</span><span class="n">x</span><span class="p">:</span>
                        <span class="n">lamb</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="n">self</span><span class="p">.</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">curve</span><span class="p">.</span><span class="n">a</span><span class="p">)</span> <span class="o">*</span> <span class="nf">inverse</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">self</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span> <span class="o">%</span> <span class="n">p</span>
                <span class="k">else</span><span class="p">:</span>
                        <span class="n">lamb</span> <span class="o">=</span> <span class="p">(</span><span class="n">point</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">*</span> <span class="nf">inverse</span><span class="p">(</span><span class="n">point</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span> <span class="o">%</span> <span class="n">p</span>
                <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">lamb</span><span class="o">**</span><span class="mi">2</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">point</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">%</span> <span class="n">p</span>
                <span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="n">lamb</span> <span class="o">*</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">x</span><span class="p">)</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">%</span> <span class="n">p</span>
                <span class="k">return</span> <span class="nc">ECPoint</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">curve</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>

        <span class="k">def</span> <span class="nf">__sub__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">point</span><span class="p">):</span>
                <span class="k">return</span> <span class="n">self</span> <span class="o">+</span> <span class="p">(</span><span class="o">-</span><span class="n">point</span><span class="p">)</span>

        <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">inf</span><span class="p">:</span> <span class="k">return</span> <span class="s">'Point(inf)'</span>
                <span class="k">return</span> <span class="s">'Point(%d, %d)'</span> <span class="o">%</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">y</span><span class="p">)</span>

        <span class="k">def</span> <span class="nf">__mul__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
                <span class="n">k</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
                <span class="n">base</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
                <span class="n">res</span> <span class="o">=</span> <span class="nc">ECPoint</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">curve</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="bp">True</span><span class="p">)</span>
                <span class="k">while</span> <span class="n">k</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                        <span class="k">if</span> <span class="n">k</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">:</span>
                                <span class="n">res</span> <span class="o">=</span> <span class="n">res</span> <span class="o">+</span> <span class="n">base</span>
                        <span class="n">base</span> <span class="o">=</span> <span class="n">base</span> <span class="o">+</span> <span class="n">base</span>
                        <span class="n">k</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span>
                <span class="k">return</span> <span class="n">res</span>

        <span class="k">def</span> <span class="nf">__eq__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">point</span><span class="p">):</span>
                <span class="nf">return </span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">inf</span> <span class="ow">and</span> <span class="n">point</span><span class="p">.</span><span class="n">inf</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">x</span> <span class="o">==</span> <span class="n">point</span><span class="p">.</span><span class="n">x</span> <span class="ow">and</span> <span class="n">self</span><span class="p">.</span><span class="n">y</span> <span class="o">==</span> <span class="n">point</span><span class="p">.</span><span class="n">y</span><span class="p">)</span>

</code></pre></div></div>
<p>Looking closely at the <code class="language-plaintext highlighter-rouge">ECPoint</code> class, one would note that on the initialization of the point with arbitrary <code class="language-plaintext highlighter-rouge">x, y</code> coordinates, it works as usual and doesnt check whether the supplied <code class="language-plaintext highlighter-rouge">x, y</code> satisfy the curve equation $y^2 = x^3 + ax + b \mod p$</p>

<p>This leads to an interesting vulnerability aka <strong>Invalid Curve Attack</strong></p>

<p>Which can be noted by the facts that</p>
<ol>
  <li>The point addtion of two points $P$ and $Q$ over the curve $y^2 = x^3 + ax + b \mod p$if $P \ne Q$ is independent of both the curve parameters $a$ and $b$</li>
  <li>The point doubling i.e $P = Q$ is just dependent on $P$ and $Q$ and $a$ but not on $b$ again</li>
</ol>

<p>This means that the group addition operation is independent of the parameter $b$, the number of points in the group of some point $P$ is just dependent on $P$ and $a$ but independent of $b$</p>

<p>So if we choose a curve $C’$ with parameter $b’$ and pick a valid point $P’$ on it, and run the point addition over the original curve $C$, the order of point $P’$ when used on $C$ will be the same as order of point $P’$ when used on $C’$</p>

<p>This implies that we are not stuck with the original prime order of P-256, but we can vary $b = -3$ such that the order of the curve $C’$ has small factors. We can then easily find points $P’$ with those small factors as their order by using the fact that -<br />
If $G’$ is the generator of $C’$ with order $o = f_1f_2f_3…f_n$, the point $G’ * (o/f_1)$ will have the order $f_1$</p>

<p>Once we have sufficient number of small orders, we can take a chinese remainder theorem over them to recover the original private key <code class="language-plaintext highlighter-rouge">d_a</code></p>

<p>To find the order of curve $C’$ and the corresponding generators, we can utilize the greate library of sagemath</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_invalid_curves</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">cutoff</span><span class="o">=</span><span class="mi">10</span><span class="o">**</span><span class="mi">5</span><span class="p">):</span>
    <span class="n">factors</span><span class="p">,</span> <span class="n">total</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="p">{},</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">total</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">*</span><span class="mi">2</span><span class="p">:</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">E</span> <span class="o">=</span> <span class="nc">EllipticCurve</span><span class="p">(</span><span class="nc">GF</span><span class="p">(</span><span class="n">p</span><span class="p">),</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span><span class="n">i</span><span class="p">])</span>
            <span class="n">order</span> <span class="o">=</span> <span class="n">E</span><span class="p">.</span><span class="nf">order</span><span class="p">()</span>
            <span class="n">n_facs</span> <span class="o">=</span> <span class="n">order</span><span class="p">.</span><span class="nf">factor</span><span class="p">()</span>
        <span class="k">except</span> <span class="nb">ArithmeticError</span><span class="p">:</span> <span class="c1">#the parameter i defines a singular curve
</span>            <span class="k">continue</span>
        <span class="k">for</span> <span class="n">prime</span><span class="p">,</span> <span class="n">power</span> <span class="ow">in</span> <span class="n">n_facs</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">prime</span> <span class="o">&gt;</span> <span class="n">cutoff</span><span class="p">:</span> <span class="c1"># dont take any factors bigger than it
</span>                <span class="k">break</span>
            <span class="n">gen</span> <span class="o">=</span> <span class="n">E</span><span class="p">.</span><span class="nf">gen</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">order</span><span class="o">//</span><span class="n">prime</span><span class="p">)</span>
            <span class="n">factors</span><span class="p">[</span><span class="n">prime</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">gen</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nf">int</span><span class="p">(</span><span class="n">gen</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span><span class="n">i</span><span class="p">]</span>
            <span class="n">total</span> <span class="o">*=</span> <span class="n">prime</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">total</span><span class="p">)</span>
    <span class="c1"># key : [gen_x, gen_y, b']
</span>    <span class="k">return</span> <span class="n">factors</span>
</code></pre></div></div>

<p>And we can easily bruteforce a given point</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">bruteforce</span><span class="p">(</span><span class="n">point</span><span class="p">,</span> <span class="n">generator</span><span class="p">,</span> <span class="n">order</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="n">order</span><span class="p">),</span><span class="n">desc</span><span class="o">=</span><span class="sa">f</span><span class="s">"bruteforcing </span><span class="si">{</span><span class="n">order</span><span class="o">=</span><span class="si">}</span><span class="s">"</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">point</span><span class="p">.</span><span class="n">y</span> <span class="o">==</span> <span class="p">(</span><span class="n">generator</span><span class="o">*</span><span class="n">i</span><span class="p">).</span><span class="n">y</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">i</span>
</code></pre></div></div>

<p>We get the following invalid curves and we just searched over 12 values of $b$!</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">invalid_curves</span> <span class="o">=</span> <span class="p">{</span>
<span class="mi">3</span><span class="p">:</span> <span class="p">[</span><span class="mi">79692280239272980873245387831874823476097665365069163558817570386218657526967</span><span class="p">,</span>
   <span class="mi">15885657487155030912288031888128427124936813080859472376494663130798867119982</span><span class="p">,</span> <span class="mi">12</span><span class="p">],</span>
<span class="mi">5</span><span class="p">:</span> <span class="p">[</span><span class="mi">30463586456259052716174121724723788478797318939762291523651966151233767925799</span><span class="p">,</span>
   <span class="mi">14521026652335616630611219515390291411023400641948957680811406721043438902186</span><span class="p">,</span> <span class="mi">12</span><span class="p">],</span>
<span class="mi">7</span><span class="p">:</span> <span class="p">[</span><span class="mi">7494160963166719022445789448670075468300539216220596044581361034311676798234</span><span class="p">,</span>
   <span class="mi">98511591492536111584332615786483658886888663084020823615343609813895225923287</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span>
<span class="mi">13</span><span class="p">:</span> <span class="p">[</span><span class="mi">44238399751822344629155927349410921734336660036385908812849527496419061724190</span><span class="p">,</span>
   <span class="mi">111209137730801733774021088162408683888753865848469665403753663663899601005809</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
<span class="mi">17</span><span class="p">:</span> <span class="p">[</span><span class="mi">9274144687945784364291903707116312659963917031850121885976057784793297477861</span><span class="p">,</span>
   <span class="mi">86301980488975426887521079169756244075123784201450393961147458432303011672794</span><span class="p">,</span> <span class="mi">10</span><span class="p">],</span>
<span class="mi">19</span><span class="p">:</span> <span class="p">[</span><span class="mi">108657251488837839710095894743866739052486880271258033613510419634191398226376</span><span class="p">,</span>
   <span class="mi">8593905934316229092193387452437731577526088690676465668457131094758391852209</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
<span class="mi">37</span><span class="p">:</span> <span class="p">[</span><span class="mi">6829338390266237482283310246665103308891228336319477318479644522260556056309</span><span class="p">,</span>
   <span class="mi">74701668267551028200304338837410580676774474001240882947774298643661074111881</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
<span class="mi">71</span><span class="p">:</span> <span class="p">[</span><span class="mi">47689891150662520216418276050802771367044708366511766907543187521601344242001</span><span class="p">,</span>
   <span class="mi">76986723505258444611874235435887405018513758524921757765033540214285112109625</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
<span class="mi">97</span><span class="p">:</span> <span class="p">[</span><span class="mi">109352438132789597676269849271161933029115963700376783044214805643475162939438</span><span class="p">,</span>
   <span class="mi">40494199582133551395560104592591896448854412368997470369685720658455096277720</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
<span class="mi">113</span><span class="p">:</span> <span class="p">[</span><span class="mi">24758423058742208238204864443231318968571918830166822957638906079202832915346</span><span class="p">,</span>
   <span class="mi">64680694216633390865014362020707904150333340051904806580803858267985332824228</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
<span class="mi">179</span><span class="p">:</span> <span class="p">[</span><span class="mi">83115631016490504822328655777895864162660782325660359674792065332260812135544</span><span class="p">,</span>
   <span class="mi">35707141486916353816358123900356888673488260709581875628819622187261352405569</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
<span class="mi">251</span><span class="p">:</span> <span class="p">[</span><span class="mi">22589597796365257246296758128505770638799961769310824687868041010311103597978</span><span class="p">,</span>
   <span class="mi">22730375842099404560129412560882492093998724011749582473003682871994848593450</span><span class="p">,</span> <span class="mi">10</span><span class="p">],</span>
<span class="mi">389</span><span class="p">:</span> <span class="p">[</span><span class="mi">61737418306809996908630595437832052272700263892021361415640028314169193468679</span><span class="p">,</span>
   <span class="mi">38812622012907358702971098652989910931710935180589252493039839244464470874161</span><span class="p">,</span> <span class="mi">12</span><span class="p">],</span>
<span class="mi">653</span><span class="p">:</span> <span class="p">[</span><span class="mi">96946680343613920300091880607027973891460464096741803273170797219756170839615</span><span class="p">,</span>
   <span class="mi">82843786165425711709725308210080928839669646246950072002603300248219042690214</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span>
<span class="mi">823</span><span class="p">:</span> <span class="p">[</span><span class="mi">101591078169875595753109991494905506967978136240961172388509275621325253165256</span><span class="p">,</span>
   <span class="mi">10303457253039461887297603877250453486351456285884301634668455036581356870325</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
<span class="mi">1151</span><span class="p">:</span> <span class="p">[</span><span class="mi">4942947285962241518079147671001480777229821084370946279070977308149340420785</span><span class="p">,</span>
   <span class="mi">16048516228456466259745940658231903287363041924322695524263376011778714624389</span><span class="p">,</span> <span class="mi">7</span><span class="p">],</span>
<span class="mi">1229</span><span class="p">:</span> <span class="p">[</span><span class="mi">91709248688928381574970306879959143256779911355970659117798234761550615769703</span><span class="p">,</span>
   <span class="mi">85856020107303390216619790339131383987393998107943546966635616939179964220668</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
<span class="mi">2447</span><span class="p">:</span> <span class="p">[</span><span class="mi">107091037109612570995136294213336682923913717986054179094643922074841981090569</span><span class="p">,</span>
   <span class="mi">38297847735446351346601186761335949464902974429727652825128988635682228100545</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
<span class="mi">4003</span><span class="p">:</span> <span class="p">[</span><span class="mi">69634612360547639692978050736475584000001950346963254134893659331303767659709</span><span class="p">,</span>
   <span class="mi">7267690154676021708711188497795027916155791784399213931355851351510639163175</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>
<span class="mi">7103</span><span class="p">:</span> <span class="p">[</span><span class="mi">110323527740892356276833844768860449554291010208201255792825053403232044044793</span><span class="p">,</span>
   <span class="mi">34702628194678317337541067016532288256370093140368313590333192034888987762792</span><span class="p">,</span> <span class="mi">7</span><span class="p">],</span>
<span class="mi">7489</span><span class="p">:</span> <span class="p">[</span><span class="mi">69497610789705595174058737106242513100950130190920702467431032172354669590563</span><span class="p">,</span>
   <span class="mi">43000989776377667520933328800675765150040604546037676698173382008099239610730</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
<span class="mi">13003</span><span class="p">:</span> <span class="p">[</span><span class="mi">69994388431307856080322572731970917270151067511018517619530568914812259046195</span><span class="p">,</span>
   <span class="mi">51645889020375608054366335957352074257130320976341249224010343992676177045239</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
<span class="mi">16033</span><span class="p">:</span> <span class="p">[</span><span class="mi">80150849770701280770379260802876332257245651607220436873841708569583336291111</span><span class="p">,</span>
   <span class="mi">67454443034144602807761039494179913732280388550455172486599878108995578176702</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>
<span class="mi">19423</span><span class="p">:</span> <span class="p">[</span><span class="mi">86763316696116146207846209443089376095966542281990071872698734124275764832625</span><span class="p">,</span>
   <span class="mi">1497373281188841342082112917519408391664673991593710756225816313602284346637</span><span class="p">,</span> <span class="mi">11</span><span class="p">],</span>
<span class="mi">30203</span><span class="p">:</span> <span class="p">[</span><span class="mi">27140306769124364253212826889951250714782929180685455599284687702513066987645</span><span class="p">,</span>
   <span class="mi">27465668374540052358785326933904597047991904030378513297677516281690992773738</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
<span class="mi">52183</span><span class="p">:</span> <span class="p">[</span><span class="mi">20786893006200668135980517481305198967871522130773700571327256180224225598537</span><span class="p">,</span>
   <span class="mi">38476450712159672989047119873673988596095516096648184067210103163599625447149</span><span class="p">,</span> <span class="mi">12</span><span class="p">],</span>
<span class="mi">72337</span><span class="p">:</span> <span class="p">[</span><span class="mi">16864673136043278693040185572303485743677125999233419976437302471094264721938</span><span class="p">,</span>
   <span class="mi">39982110747848740588957884598316010802865483814669576940304708444368796141014</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span>
<span class="mi">81173</span><span class="p">:</span> <span class="p">[</span><span class="mi">41965847134675666863089670621412699297207446259915277832939899605119013001686</span><span class="p">,</span>
   <span class="mi">97595102592346869875749873612676528534971198259624427507680148771098555985918</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="attack-procedure">Attack procedure</h3>
<ol>
  <li>For each $b’$ and $G’$ of order $o’$</li>
  <li>Send $B = -G’$ and $c = G’$ we will get back x coordinate of $G’ * (d_a + 1)$
    <blockquote>
      <p>Note that if we send 0, it will just return  <code class="language-plaintext highlighter-rouge">b''</code> so no use</p>
    </blockquote>
  </li>
  <li>Lift the x coordinate <strong>Over C’</strong> to get $G’ * (d_a + 1)$ But this wont help us to figure out of the two possible points. For this</li>
  <li>Send another $B = -G’$ and $c = G’ * 2$ to get back x coordinate of $G’ * (d_a + 2)$ To figure out the correct lifting of the x coordinate to get $G’ * (d_a + 1)$</li>
  <li>Bruteforce and recover the ECDLP to get $d_a’ = (d_a + 1) \mod o’$</li>
  <li>Combine all $d_a’$ using chinese remainder theorem to get back original $d_a$</li>
  <li>PROFIT ????</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">recovered_order</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">order</span><span class="p">,</span> <span class="p">(</span><span class="n">gen_x</span><span class="p">,</span> <span class="n">gen_y</span><span class="p">,</span> <span class="n">b_i</span><span class="p">)</span> <span class="ow">in</span> <span class="n">invalid_curves</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
    <span class="n">gen</span> <span class="o">=</span> <span class="nc">ECPoint</span><span class="p">(</span><span class="n">curve</span><span class="p">,</span> <span class="n">gen_x</span><span class="p">,</span> <span class="n">gen_y</span><span class="p">)</span>
    <span class="n">bal</span><span class="p">,</span> <span class="n">BG</span> <span class="o">=</span> <span class="nf">get_decryption</span><span class="p">(</span><span class="o">-</span><span class="n">gen</span><span class="p">,</span> <span class="n">gen</span><span class="p">)</span> <span class="c1"># gen*(da+1)
</span>    <span class="n">BG_int</span> <span class="o">=</span> <span class="nb">int</span><span class="p">.</span><span class="nf">from_bytes</span><span class="p">(</span><span class="n">BG</span><span class="p">)</span>
    <span class="n">y</span> <span class="o">=</span> <span class="nf">modular_sqrt</span><span class="p">(</span><span class="n">BG_int</span><span class="o">**</span><span class="mi">3</span><span class="o">+</span><span class="n">a</span><span class="o">*</span><span class="n">BG_int</span><span class="o">+</span><span class="n">b_i</span><span class="p">,</span><span class="n">p</span><span class="p">)</span>
    <span class="n">point_BG</span> <span class="o">=</span> <span class="nc">ECPoint</span><span class="p">(</span><span class="n">curve</span><span class="p">,</span> <span class="n">BG_int</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

    <span class="n">bal</span><span class="p">,</span> <span class="n">BG2</span> <span class="o">=</span> <span class="nf">get_decryption</span><span class="p">(</span><span class="o">-</span><span class="n">gen</span><span class="p">,</span> <span class="n">gen</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span> <span class="c1"># gen*(da+2)
</span>    <span class="n">BG_int2</span> <span class="o">=</span> <span class="nb">int</span><span class="p">.</span><span class="nf">from_bytes</span><span class="p">(</span><span class="n">BG2</span><span class="p">)</span>
    <span class="nf">if </span><span class="p">(</span><span class="n">point_BG</span><span class="o">+</span><span class="n">gen</span><span class="p">).</span><span class="n">x</span> <span class="o">==</span> <span class="n">BG_int2</span><span class="p">:</span>
        <span class="n">recovered_order</span><span class="p">[</span><span class="n">order</span><span class="p">]</span> <span class="o">=</span> <span class="nf">bruteforce</span><span class="p">(</span><span class="n">point_BG</span><span class="p">,</span> <span class="n">gen</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
    <span class="nf">elif </span><span class="p">(</span><span class="n">point_BG</span><span class="o">-</span><span class="n">gen</span><span class="p">).</span><span class="n">x</span> <span class="o">==</span> <span class="n">BG_int2</span><span class="p">:</span>
        <span class="n">recovered_order</span><span class="p">[</span><span class="n">order</span><span class="p">]</span> <span class="o">=</span> <span class="nf">bruteforce</span><span class="p">(</span><span class="o">-</span><span class="n">point_BG</span><span class="p">,</span> <span class="n">gen</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"something went wrong"</span><span class="p">)</span>

<span class="n">mods</span><span class="p">,</span> <span class="n">values</span> <span class="o">=</span> <span class="p">[],[]</span>
<span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="n">recovered_order</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
    <span class="n">mods</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="n">values</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">v</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">i</span><span class="p">)</span>

<span class="n">d_a</span> <span class="o">=</span> <span class="nf">crt</span><span class="p">(</span><span class="n">mods</span><span class="p">,</span><span class="n">values</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>

<span class="n">key_int</span> <span class="o">=</span> <span class="p">(</span><span class="n">d_a</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="mi">8</span><span class="o">*</span><span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="p">(</span><span class="n">d_a</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffffffffffffffffffff</span><span class="p">)</span>
<span class="n">key</span> <span class="o">=</span> <span class="n">key_int</span><span class="p">.</span><span class="nf">to_bytes</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="s">'big'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">AES</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_ECB</span><span class="p">).</span><span class="nf">decrypt</span><span class="p">(</span><span class="n">flag2_enc</span><span class="p">))</span>
</code></pre></div></div>

<h4 id="enobe5t_th1nk_out_0f_th3_curv3">ENO{be5t_th1nk_out_0f_th3_curv3}</h4>

<h2 id="solve-script">Solve script</h2>
<p><a href="./solve.py">solve.py</a></p>]]></content><author><name>deuterium</name><email>farziemailid69@gmail.com</email></author><category term="Nullcon" /><category term="2023" /><category term="cryptography" /><category term="ECC" /><category term="invalid_curve" /><category term="CRT" /><category term="ECDLP" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">ACSC qualifiers 2023 Crypto - SusCipher</title><link href="https://deut-erium.github.io/WriteUps/2023/ACSC/crypto/SusCipher/2023-03-01-ACSC-SusCipher" rel="alternate" type="text/html" title="ACSC qualifiers 2023 Crypto - SusCipher" /><published>2023-03-01T00:00:00+05:30</published><updated>2023-03-01T00:00:00+05:30</updated><id>https://deut-erium.github.io/WriteUps/2023/ACSC/crypto/SusCipher/ACSC-SusCipher</id><content type="html" xml:base="https://deut-erium.github.io/WriteUps/2023/ACSC/crypto/SusCipher/2023-03-01-ACSC-SusCipher"><![CDATA[<!--more-->

<h2 id="challenge-description">Challenge Description</h2>

<blockquote>
  <p>SusCipher
400 pts (6 solves)</p>

  <p>authored by rbtree</p>

  <p>I made SusCipher, which is a vulnerable block cipher so everyone can break it!</p>

  <p>Please, try it and find a key.
nc suscipher.chal.ctf.acsc.asia 13579
nc suscipher-2.chal.ctf.acsc.asia 13579 (Backup)
Hint: Differential cryptanalysis is useful.
SusCipher.tar.gz</p>
</blockquote>

<h2 id="source-files">Source files</h2>
<blockquote>
  <p><a href="./task.py">task.py</a></p>
</blockquote>

<h2 id="source-analysis">Source Analysis</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">#!/usr/bin/env python3
</span><span class="kn">import</span> <span class="n">hashlib</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">signal</span>


<span class="k">class</span> <span class="nc">SusCipher</span><span class="p">:</span>
    <span class="n">S</span> <span class="o">=</span> <span class="p">[</span>
        <span class="mi">43</span><span class="p">,</span>  <span class="mi">8</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span>
         <span class="mi">7</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span>  <span class="mi">9</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span>  <span class="mi">3</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span>
        <span class="mi">42</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span>  <span class="mi">6</span><span class="p">,</span>  <span class="mi">2</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span>
         <span class="mi">0</span><span class="p">,</span>  <span class="mi">4</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span>
        <span class="mi">25</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span>
        <span class="mi">62</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span>
        <span class="mi">29</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span>  <span class="mi">5</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span>
        <span class="mi">45</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">56</span>
    <span class="p">]</span>

    <span class="n">P</span> <span class="o">=</span> <span class="p">[</span>
        <span class="mi">21</span><span class="p">,</span>  <span class="mi">8</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span>  <span class="mi">6</span><span class="p">,</span>  <span class="mi">7</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span>
        <span class="mi">22</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span>
        <span class="mi">31</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span>  <span class="mi">3</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span>
        <span class="mi">29</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span>
        <span class="mi">45</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span>
        <span class="mi">27</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span>
         <span class="mi">2</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">5</span><span class="p">,</span>  <span class="mi">4</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span>
        <span class="mi">44</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span>  <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span>
    <span class="p">]</span>

    <span class="n">ROUND</span> <span class="o">=</span> <span class="mi">3</span>
    <span class="n">BLOCK_NUM</span> <span class="o">=</span> <span class="mi">8</span>
    <span class="n">MASK</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">6</span> <span class="o">*</span> <span class="n">BLOCK_NUM</span><span class="p">))</span> <span class="o">-</span> <span class="mi">1</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">_divide</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">v</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">l</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">cls</span><span class="p">.</span><span class="n">BLOCK_NUM</span><span class="p">):</span>
            <span class="n">l</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">v</span> <span class="o">&amp;</span> <span class="mb">0b111111</span><span class="p">)</span>
            <span class="n">v</span> <span class="o">&gt;&gt;=</span> <span class="mi">6</span>
        <span class="k">return</span> <span class="n">l</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">_combine</span><span class="p">(</span><span class="n">block</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">block</span><span class="p">:</span>
            <span class="n">res</span> <span class="o">&lt;&lt;=</span> <span class="mi">6</span>
            <span class="n">res</span> <span class="o">|=</span> <span class="n">v</span>
        <span class="k">return</span> <span class="n">res</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">_sub</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">block</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">cls</span><span class="p">.</span><span class="n">S</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">block</span><span class="p">]</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">_perm</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">block</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">bits</span> <span class="o">=</span> <span class="s">""</span>
        <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">block</span><span class="p">:</span>
            <span class="n">bits</span> <span class="o">+=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">b</span><span class="si">:</span><span class="mi">06</span><span class="n">b</span><span class="si">}</span><span class="s">"</span>

        <span class="n">buf</span> <span class="o">=</span> <span class="p">[</span><span class="s">"_"</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">6</span> <span class="o">*</span> <span class="n">cls</span><span class="p">.</span><span class="n">BLOCK_NUM</span><span class="p">)]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">6</span> <span class="o">*</span> <span class="n">cls</span><span class="p">.</span><span class="n">BLOCK_NUM</span><span class="p">):</span>
            <span class="n">buf</span><span class="p">[</span><span class="n">cls</span><span class="p">.</span><span class="n">P</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="n">bits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

        <span class="n">permd</span> <span class="o">=</span> <span class="s">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">permd</span><span class="p">[</span><span class="n">i</span> <span class="p">:</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">6</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">6</span> <span class="o">*</span> <span class="n">cls</span><span class="p">.</span><span class="n">BLOCK_NUM</span><span class="p">,</span> <span class="mi">6</span><span class="p">)]</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">_xor</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">b</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">x</span> <span class="o">^</span> <span class="n">y</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)]</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="k">assert</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">key</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">MASK</span>

        <span class="n">keys</span> <span class="o">=</span> <span class="p">[</span><span class="n">key</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">ROUND</span><span class="p">):</span>
            <span class="n">v</span> <span class="o">=</span> <span class="n">hashlib</span><span class="p">.</span><span class="nf">sha256</span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">keys</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]).</span><span class="nf">encode</span><span class="p">()).</span><span class="nf">digest</span><span class="p">()</span>
            <span class="n">v</span> <span class="o">=</span> <span class="nb">int</span><span class="p">.</span><span class="nf">from_bytes</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="s">"big"</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">self</span><span class="p">.</span><span class="n">MASK</span>
            <span class="n">keys</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="n">subkeys</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="nf">_divide</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">keys</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">inp</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">block</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_divide</span><span class="p">(</span><span class="n">inp</span><span class="p">)</span>

        <span class="n">block</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_xor</span><span class="p">(</span><span class="n">block</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">subkeys</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">ROUND</span><span class="p">):</span>
            <span class="n">block</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_sub</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
            <span class="n">block</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_perm</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
            <span class="n">block</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_xor</span><span class="p">(</span><span class="n">block</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">subkeys</span><span class="p">[</span><span class="n">r</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span>

        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_combine</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>

    <span class="c1"># TODO: Implement decryption
</span>    <span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">inp</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nc">NotImplementedError</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">handler</span><span class="p">(</span><span class="n">_signum</span><span class="p">,</span> <span class="n">_frame</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Time out!"</span><span class="p">)</span>
    <span class="nf">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">signal</span><span class="p">.</span><span class="nf">signal</span><span class="p">(</span><span class="n">signal</span><span class="p">.</span><span class="n">SIGALRM</span><span class="p">,</span> <span class="n">handler</span><span class="p">)</span>
    <span class="n">signal</span><span class="p">.</span><span class="nf">alarm</span><span class="p">(</span><span class="mi">300</span><span class="p">)</span>
    <span class="n">key</span> <span class="o">=</span> <span class="nb">int</span><span class="p">.</span><span class="nf">from_bytes</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="nf">urandom</span><span class="p">(</span><span class="mi">6</span><span class="p">),</span> <span class="s">"big"</span><span class="p">)</span>

    <span class="n">cipher</span> <span class="o">=</span> <span class="nc">SusCipher</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>

    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">inp</span> <span class="o">=</span> <span class="nf">input</span><span class="p">(</span><span class="s">"&gt; "</span><span class="p">)</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="nf">strip</span><span class="p">())</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">inp</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="s">","</span><span class="p">)]</span>
        <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"Wrong input!"</span><span class="p">)</span>
            <span class="nf">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">l</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mh">0x100</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"Long input!"</span><span class="p">)</span>
            <span class="nf">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">l</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">key</span><span class="p">:</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="s">'flag'</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">())</span>

        <span class="nf">print</span><span class="p">(</span><span class="s">", "</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">cipher</span><span class="p">.</span><span class="nf">encrypt</span><span class="p">(</span><span class="n">v</span><span class="p">))</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">l</span><span class="p">))</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<p>Let’s take a look at the relevant parts</p>

<h3 id="main">main</h3>
<p>While True, it asks for an input which is a string of numbers separated by <code class="language-plaintext highlighter-rouge">,</code> 
As long as we input <code class="language-plaintext highlighter-rouge">0x100</code> or 256 numbers at a time, we can get as many encryptions as we like</p>

<p>If we only enter a single number, and if that number happens to be the secret round key, we can get the flag</p>

<p>Sounds easy? lets take a look into the cipher</p>

<h3 id="the-cipher">The Cipher</h3>
<p>The above construction is <a href="https://en.wikipedia.org/wiki/Substitution%E2%80%93permutation_network">Substitution Permutation Network (SPN)</a> which is essentially a repeated operation of substitution with a fixed predefined array<br />
here which is</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">S</span> <span class="o">=</span> <span class="p">[</span>
        <span class="mi">43</span><span class="p">,</span>  <span class="mi">8</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span>
         <span class="mi">7</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span>  <span class="mi">9</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span>  <span class="mi">3</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span>
        <span class="mi">42</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span>  <span class="mi">6</span><span class="p">,</span>  <span class="mi">2</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span>
         <span class="mi">0</span><span class="p">,</span>  <span class="mi">4</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span>
        <span class="mi">25</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span>
        <span class="mi">62</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span>
        <span class="mi">29</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span>  <span class="mi">5</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span>
        <span class="mi">45</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">56</span>
    <span class="p">]</span>
</code></pre></div></div>
<p>I.e a number <code class="language-plaintext highlighter-rouge">n</code> is replaced with <code class="language-plaintext highlighter-rouge">S[n]</code></p>

<p>followed by a permutation of bits here defined by</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">P</span> <span class="o">=</span> <span class="p">[</span>
        <span class="mi">21</span><span class="p">,</span>  <span class="mi">8</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span>  <span class="mi">6</span><span class="p">,</span>  <span class="mi">7</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span>
        <span class="mi">22</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span>
        <span class="mi">31</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span>  <span class="mi">3</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span>
        <span class="mi">29</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span>
        <span class="mi">45</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span>
        <span class="mi">27</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span>
         <span class="mi">2</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">5</span><span class="p">,</span>  <span class="mi">4</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span>
        <span class="mi">44</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span>  <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span>
    <span class="p">]</span>
</code></pre></div></div>
<p>Which means <code class="language-plaintext highlighter-rouge">P[t]</code>th bit of the output is actually the <code class="language-plaintext highlighter-rouge">t</code>th bit of inpute.g. <code class="language-plaintext highlighter-rouge">P[0] = 21</code> means the <code class="language-plaintext highlighter-rouge">21</code>th bit of output is <code class="language-plaintext highlighter-rouge">0</code>th bit of input as is</p>

<p>followed by a xor operation with a secret key</p>

<p>This process is repeated a fixed number of rounds times with a new secret key each round (which are called the round keys or subkeys)</p>

<p>The <code class="language-plaintext highlighter-rouge">encrypt</code> function hence looks like as below</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">inp</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">block</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_divide</span><span class="p">(</span><span class="n">inp</span><span class="p">)</span>

        <span class="n">block</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_xor</span><span class="p">(</span><span class="n">block</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">subkeys</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">ROUND</span><span class="p">):</span>
            <span class="n">block</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_sub</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
            <span class="n">block</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_perm</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
            <span class="n">block</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_xor</span><span class="p">(</span><span class="n">block</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">subkeys</span><span class="p">[</span><span class="n">r</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span>

        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_combine</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
</code></pre></div></div>
<p>(<code class="language-plaintext highlighter-rouge">_divide</code> and <code class="language-plaintext highlighter-rouge">_combine</code> are just helper functions to make programmers life easier)</p>

<p>One might question, why are we <code class="language-plaintext highlighter-rouge">_dividing</code> a good enough input of 48 bits into 8 chunks of 6 bits each? 
Well, in an ideal world, we would like to have a substitution box of 48 bits, but that would eat up a whopping <code class="language-plaintext highlighter-rouge">2^48</code> number of entries (which we are somehow fooling with <code class="language-plaintext highlighter-rouge">2^6</code> entries here</p>

<p>Hence the functions <code class="language-plaintext highlighter-rouge">_sub</code> acts as if it sees 8 different values and substitutes them and acts as if it just did 48 bits of substitution</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">_sub</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">block</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">cls</span><span class="p">.</span><span class="n">S</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">block</span><span class="p">]</span>
</code></pre></div></div>

<p>So does <code class="language-plaintext highlighter-rouge">_perm</code> pretend (because of our design) that it sees a big block of 48 bits which it permutes to a block of 48 bits, but what it does is to take 8 blocks of 6 bits each and create 8 blocks of 6 bits each if they were all connected</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">_perm</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">block</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="n">bits</span> <span class="o">=</span> <span class="s">""</span>
        <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">block</span><span class="p">:</span>
            <span class="n">bits</span> <span class="o">+=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">b</span><span class="si">:</span><span class="mi">06</span><span class="n">b</span><span class="si">}</span><span class="s">"</span>

        <span class="n">buf</span> <span class="o">=</span> <span class="p">[</span><span class="s">"_"</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">6</span> <span class="o">*</span> <span class="n">cls</span><span class="p">.</span><span class="n">BLOCK_NUM</span><span class="p">)]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">6</span> <span class="o">*</span> <span class="n">cls</span><span class="p">.</span><span class="n">BLOCK_NUM</span><span class="p">):</span>
            <span class="n">buf</span><span class="p">[</span><span class="n">cls</span><span class="p">.</span><span class="n">P</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="n">bits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

        <span class="n">permd</span> <span class="o">=</span> <span class="s">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">permd</span><span class="p">[</span><span class="n">i</span> <span class="p">:</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">6</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">6</span> <span class="o">*</span> <span class="n">cls</span><span class="p">.</span><span class="n">BLOCK_NUM</span><span class="p">,</span> <span class="mi">6</span><span class="p">)]</span>
</code></pre></div></div>

<h4 id="where-do-subkeys-come-from">Where do subkeys come from?</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
        <span class="k">assert</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">key</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">MASK</span>

        <span class="n">keys</span> <span class="o">=</span> <span class="p">[</span><span class="n">key</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">ROUND</span><span class="p">):</span>
            <span class="n">v</span> <span class="o">=</span> <span class="n">hashlib</span><span class="p">.</span><span class="nf">sha256</span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">keys</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]).</span><span class="nf">encode</span><span class="p">()).</span><span class="nf">digest</span><span class="p">()</span>
            <span class="n">v</span> <span class="o">=</span> <span class="nb">int</span><span class="p">.</span><span class="nf">from_bytes</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="s">"big"</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">self</span><span class="p">.</span><span class="n">MASK</span>
            <span class="n">keys</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="n">subkeys</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="nf">_divide</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">keys</span><span class="p">]</span>
</code></pre></div></div>
<p>As you may have observed from the init function, subkeys are “derived” from a single 48-bit key in a way that we cant recover subkey i from the knowledge of any of the subkeys j&gt;i (to make the challenge hard so that we will definitely need to recover subkey[0] which is the original key</p>

<h2 id="vulnerability">Vulnerability?</h2>
<p>If you have seen some cipher constructions before, you may have observed, that the <code class="language-plaintext highlighter-rouge">ROUND = 3</code> is really very low and <code class="language-plaintext highlighter-rouge">6-bit</code> sboxes are still not as robust as you may imagine them to be.</p>

<p>Another hint as provided by the author is <a href="https://en.wikipedia.org/wiki/Differential_cryptanalysis">Differential Cryptanalysis</a>, and since I am obsessed with SAT solvers, I will overlook the hint and cheeze it with z3</p>

<h2 id="modelling">Modelling</h2>
<p>While the general methodology to solve a problem with a SAT solver is to write the output as a (symbolic) function of the inputs, and finding an input which leads to the observed output.</p>

<p>So what’s the symbolic input and output here?</p>

<p>For an input <code class="language-plaintext highlighter-rouge">inp</code> to the <code class="language-plaintext highlighter-rouge">SusCipher(key)</code> producing an encryption <code class="language-plaintext highlighter-rouge">out</code> We can write <code class="language-plaintext highlighter-rouge">out</code> as <code class="language-plaintext highlighter-rouge">symbolic_function(subkeys, inp)</code></p>

<p>With <code class="language-plaintext highlighter-rouge">subkeys</code> acting as unknown <code class="language-plaintext highlighter-rouge">inp</code> which we aim for, we can easily get the desired outcome.</p>

<p>Taking heavy inspiration from the implementaion of the challenge cipher, we can similary create the z3 model of suscipher</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CrackSusCipher</span><span class="p">:</span>
    <span class="n">ROUND</span> <span class="o">=</span> <span class="mi">3</span>
    <span class="n">BLOCK_NUM</span> <span class="o">=</span> <span class="mi">8</span>
    <span class="k">def</span> <span class="nf">_divide</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">v</span><span class="p">):</span>
        <span class="n">l</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">BLOCK_NUM</span><span class="p">):</span>
            <span class="n">l</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">v</span><span class="o">&amp;</span><span class="mb">0b111111</span><span class="p">)</span>
            <span class="n">v</span> <span class="o">&gt;&gt;=</span><span class="mi">6</span>
        <span class="k">return</span> <span class="n">l</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">_combine</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">block</span><span class="p">):</span>
        <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">block</span><span class="p">:</span>
            <span class="n">res</span> <span class="o">&lt;&lt;=</span><span class="mi">6</span>
            <span class="n">res</span> <span class="o">|=</span> <span class="n">v</span>
        <span class="k">return</span> <span class="n">res</span>

    <span class="k">def</span> <span class="nf">_xor</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">x</span><span class="o">^</span><span class="n">y</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)]</span>
</code></pre></div></div>
<p>These functions look identical.</p>

<h3 id="modelling-substitution">Modelling substitution</h3>
<p>First hurdle most of the people face modelling a SPN network or any other cipher is to model substitution.<br />
But z3 is equipped with powerful theories of arrays (and functions)</p>

<p>Thus to model substitution, we can define a symbolic function S, which takes 6-bit inputs and generates 6-bit outputs</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">self</span><span class="p">.</span><span class="n">S</span> <span class="o">=</span> <span class="nc">Function</span><span class="p">(</span><span class="s">'S'</span><span class="p">,</span> <span class="nc">BitVecSort</span><span class="p">(</span><span class="mi">6</span><span class="p">),</span> <span class="nc">BitVecSort</span><span class="p">(</span><span class="mi">6</span><span class="p">))</span>
</code></pre></div></div>
<p>then <code class="language-plaintext highlighter-rouge">self.S(i)</code> would indeed be exactly what we desire<br />
But wait, we just specified that <code class="language-plaintext highlighter-rouge">S</code> can be <em>any</em> function, not the exact substitution function we are provided with.<br />
Worry not, we can specify this as a constraint to the solver</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">S</span><span class="p">):</span> <span class="c1">#original S as provided in the challenge
</span>    <span class="n">self</span><span class="p">.</span><span class="n">solver</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nc">S</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">==</span><span class="n">v</span><span class="p">)</span>
</code></pre></div></div>
<p>i.e we want <code class="language-plaintext highlighter-rouge">S(0)</code> to be nothing else than 43 and so on</p>

<p>And we treat keys as 6 bit unknowns, so there will be <code class="language-plaintext highlighter-rouge">(ROUND+1)*8</code> variables.</p>

<p>Overall our init function will look like</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">S</span> <span class="o">=</span> <span class="nc">Function</span><span class="p">(</span><span class="s">'S'</span><span class="p">,</span> <span class="nc">BitVecSort</span><span class="p">(</span><span class="mi">6</span><span class="p">),</span> <span class="nc">BitVecSort</span><span class="p">(</span><span class="mi">6</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">solver</span> <span class="o">=</span> <span class="nc">Solver</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">S</span><span class="p">):</span>
            <span class="n">self</span><span class="p">.</span><span class="n">solver</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nc">S</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">==</span><span class="n">v</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">keys</span> <span class="o">=</span> <span class="p">[[</span><span class="nc">BitVec</span><span class="p">(</span><span class="sa">f</span><span class="s">'k_</span><span class="si">{</span><span class="n">r</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">'</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="p">]</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">ROUND</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
</code></pre></div></div>

<p>hence <code class="language-plaintext highlighter-rouge">_sub</code> function would be</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">_sub</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">block</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="nc">S</span><span class="p">(</span><span class="nf">simplify</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">block</span><span class="p">]</span>
</code></pre></div></div>
<p>Note that it could have been <code class="language-plaintext highlighter-rouge">self.S(i)</code> instead of <code class="language-plaintext highlighter-rouge">self.S(simplify(i))</code> which I used, just to simplify the expression (if possible) before substituting to hopefully speed things up</p>

<h3 id="modelling-permutation">Modelling permutation</h3>
<p>Now what about the permutation? We can model it exactly how we would have calculated a permutation
Take the <code class="language-plaintext highlighter-rouge">i</code>th bit, put it <code class="language-plaintext highlighter-rouge">P[i]</code>th place in the output, just the way to deal with BitVectors vary</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">_perm</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">block</span><span class="p">):</span>
        <span class="n">x</span> <span class="o">=</span> <span class="nc">Concat</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
        <span class="c1"># treat the 8 6-bit vectors as a single 48 bit-vector 
</span>        <span class="n">output</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="mi">48</span> <span class="c1"># temporary placeholder for output
</span>        <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">P</span><span class="p">):</span>
            <span class="c1"># extract the ith bit from the MSB put it at the correct place
</span>            <span class="n">output</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="nc">Extract</span><span class="p">(</span><span class="mi">47</span><span class="o">-</span><span class="n">i</span><span class="p">,</span> <span class="mi">47</span><span class="o">-</span><span class="n">i</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
        <span class="c1"># rechunk in 6 bit bitvectors
</span>        <span class="k">return</span> <span class="p">[</span><span class="nc">Concat</span><span class="p">(</span><span class="n">output</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">6</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">48</span><span class="p">,</span><span class="mi">6</span><span class="p">)]</span>
</code></pre></div></div>

<h3 id="modelling-encryption">Modelling encryption</h3>
<p>Finally after getting the required blocks to perform our symbolic encryption, we can model it</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">enc</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">block</span><span class="p">):</span>
        <span class="n">block</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_xor</span><span class="p">(</span><span class="n">block</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">ROUND</span><span class="p">):</span>
            <span class="n">block</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_sub</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
            <span class="n">block</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_perm</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
            <span class="n">block</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_xor</span><span class="p">(</span><span class="n">block</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">keys</span><span class="p">[</span><span class="n">r</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">block</span>
</code></pre></div></div>
<p>Which you can see is almost like the original except we are not _dividing and _combining the 48-bits but rather assume that it operates on 8 6-bit values. And <code class="language-plaintext highlighter-rouge">self.keys</code> here are the symbolic unknowns.</p>

<h3 id="checking-if-our-model-is-correct">Checking if our model is correct</h3>
<p>Now a CTF player will be anxious whether the efforts they put in to model the cipher were fruitful or did they mess up the model somewhere?</p>

<p>Worry not, we can always check our symbolic model by plugging in real values and comparing with the original cipher</p>

<p>We will use random values and keys just to check if they match (kinda funny that we have to informally verify a formal verifier XD)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="s">"verifying our modelling"</span><span class="p">)</span>
<span class="kn">import</span> <span class="n">random</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">100</span><span class="p">):</span>
    <span class="n">random_key</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">**</span><span class="mi">48</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">sus</span> <span class="o">=</span> <span class="nc">SusCipher</span><span class="p">(</span><span class="n">random_key</span><span class="p">)</span>
    <span class="n">sus_model</span> <span class="o">=</span> <span class="nf">crack</span><span class="p">()</span>
    <span class="n">sus_model</span><span class="p">.</span><span class="n">solver</span><span class="p">.</span><span class="nf">check</span><span class="p">()</span> <span class="c1"># to fill in the `S` as the original substitution function
</span>    <span class="n">sus_model</span><span class="p">.</span><span class="n">keys</span> <span class="o">=</span> <span class="p">[[</span><span class="nc">BitVecVal</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">row</span><span class="p">]</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">sus</span><span class="p">.</span><span class="n">subkeys</span><span class="p">]</span> <span class="c1"># BitVecVal as a symbolic constant value
</span>    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
        <span class="n">inp</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">**</span><span class="mi">48</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">real_out</span> <span class="o">=</span> <span class="n">sus</span><span class="p">.</span><span class="nf">encrypt</span><span class="p">(</span><span class="n">inp</span><span class="p">)</span>
        <span class="n">sym_out_chunks</span> <span class="o">=</span> <span class="n">sus_model</span><span class="p">.</span><span class="nf">enc</span><span class="p">(</span><span class="n">sus_model</span><span class="p">.</span><span class="nf">_divide</span><span class="p">(</span><span class="n">inp</span><span class="p">))</span>
        <span class="c1"># evaluating the symbolic output as per the symbolic model
</span>        <span class="n">sym_out</span> <span class="o">=</span> <span class="n">sus_model</span><span class="p">.</span><span class="n">solver</span><span class="p">.</span><span class="nf">model</span><span class="p">().</span><span class="nf">eval</span><span class="p">(</span><span class="nc">Concat</span><span class="p">(</span><span class="n">sym_out_chunks</span><span class="p">))</span>
        <span class="k">assert</span> <span class="n">sym_out</span><span class="p">.</span><span class="nf">as_long</span><span class="p">()</span> <span class="o">==</span> <span class="n">real_out</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"success"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="adding-input-output-points">Adding input output points</h3>
<p>Taking care of the _divide business, we will equate the 6-bit chunks of the output and our symbolic output for a given input</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">add_sample</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">inp</span><span class="p">,</span> <span class="n">oup</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">enc</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">_divide</span><span class="p">(</span><span class="n">inp</span><span class="p">)),</span> <span class="n">self</span><span class="p">.</span><span class="nf">_divide</span><span class="p">(</span><span class="n">oup</span><span class="p">)):</span>
            <span class="n">self</span><span class="p">.</span><span class="n">solver</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="o">==</span><span class="n">b</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="getting-the-key">Getting the key</h3>
<p>It’s really simple, just check if there is any satisfying model which would make our constraints possible, and get the first subkey according to that model</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">solver</span><span class="p">.</span><span class="nf">check</span><span class="p">()</span><span class="o">==</span><span class="n">sat</span><span class="p">:</span>
            <span class="n">model</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">solver</span><span class="p">.</span><span class="nf">model</span><span class="p">()</span>
            <span class="n">k</span> <span class="o">=</span> <span class="p">[</span><span class="n">model</span><span class="p">.</span><span class="nf">eval</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="nf">as_long</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>
            <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_combine</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="putting-our-class-together">Putting our class together</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">S</span> <span class="o">=</span> <span class="p">[</span>
    <span class="mi">43</span><span class="p">,</span>  <span class="mi">8</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span>
     <span class="mi">7</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span>  <span class="mi">9</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span>  <span class="mi">3</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span>
    <span class="mi">42</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span>  <span class="mi">6</span><span class="p">,</span>  <span class="mi">2</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span>
     <span class="mi">0</span><span class="p">,</span>  <span class="mi">4</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span>
    <span class="mi">25</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span>
    <span class="mi">62</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span>
    <span class="mi">29</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span>  <span class="mi">5</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span>
    <span class="mi">45</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">56</span>
<span class="p">]</span>

<span class="n">P</span> <span class="o">=</span> <span class="p">[</span>
    <span class="mi">21</span><span class="p">,</span>  <span class="mi">8</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span>  <span class="mi">6</span><span class="p">,</span>  <span class="mi">7</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span>
    <span class="mi">22</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span>
    <span class="mi">31</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span>  <span class="mi">3</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span>
    <span class="mi">29</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span>
    <span class="mi">45</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span>
    <span class="mi">27</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span>
     <span class="mi">2</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">5</span><span class="p">,</span>  <span class="mi">4</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span>
    <span class="mi">44</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span>  <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span>
<span class="p">]</span>

<span class="k">class</span> <span class="nc">crack</span><span class="p">:</span>
    <span class="n">ROUND</span> <span class="o">=</span> <span class="mi">3</span>
    <span class="n">BLOCK_NUM</span> <span class="o">=</span> <span class="mi">8</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">S</span> <span class="o">=</span> <span class="nc">Function</span><span class="p">(</span><span class="s">'S'</span><span class="p">,</span> <span class="nc">BitVecSort</span><span class="p">(</span><span class="mi">6</span><span class="p">),</span> <span class="nc">BitVecSort</span><span class="p">(</span><span class="mi">6</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">solver</span> <span class="o">=</span> <span class="nc">Solver</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">S</span><span class="p">):</span>
            <span class="n">self</span><span class="p">.</span><span class="n">solver</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nc">S</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">==</span><span class="n">v</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">keys</span> <span class="o">=</span> <span class="p">[[</span><span class="nc">BitVec</span><span class="p">(</span><span class="sa">f</span><span class="s">'k_</span><span class="si">{</span><span class="n">r</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">'</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="p">]</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">ROUND</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>

    <span class="k">def</span> <span class="nf">_divide</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">v</span><span class="p">):</span>
        <span class="n">l</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">BLOCK_NUM</span><span class="p">):</span>
            <span class="n">l</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">v</span><span class="o">&amp;</span><span class="mb">0b111111</span><span class="p">)</span>
            <span class="n">v</span> <span class="o">&gt;&gt;=</span><span class="mi">6</span>
        <span class="k">return</span> <span class="n">l</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">_combine</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">block</span><span class="p">):</span>
        <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">block</span><span class="p">:</span>
            <span class="n">res</span> <span class="o">&lt;&lt;=</span><span class="mi">6</span>
            <span class="n">res</span> <span class="o">|=</span> <span class="n">v</span>
        <span class="k">return</span> <span class="n">res</span>

    <span class="k">def</span> <span class="nf">_xor</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">x</span><span class="o">^</span><span class="n">y</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)]</span>

    <span class="k">def</span> <span class="nf">_perm</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">block</span><span class="p">):</span>
        <span class="n">x</span> <span class="o">=</span> <span class="nc">Concat</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
        <span class="n">output</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="mi">48</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">P</span><span class="p">):</span>
            <span class="n">output</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="nc">Extract</span><span class="p">(</span><span class="mi">47</span><span class="o">-</span><span class="n">i</span><span class="p">,</span> <span class="mi">47</span><span class="o">-</span><span class="n">i</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">[</span><span class="nc">Concat</span><span class="p">(</span><span class="n">output</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">6</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">48</span><span class="p">,</span><span class="mi">6</span><span class="p">)]</span>

    <span class="k">def</span> <span class="nf">_sub</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">block</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="nc">S</span><span class="p">(</span><span class="nf">simplify</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">block</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">enc</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">block</span><span class="p">):</span>
        <span class="n">block</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_xor</span><span class="p">(</span><span class="n">block</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">ROUND</span><span class="p">):</span>
            <span class="n">block</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_sub</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
            <span class="n">block</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_perm</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
            <span class="n">block</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_xor</span><span class="p">(</span><span class="n">block</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">keys</span><span class="p">[</span><span class="n">r</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">block</span>

    <span class="k">def</span> <span class="nf">add_sample</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">inp</span><span class="p">,</span> <span class="n">oup</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">enc</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">_divide</span><span class="p">(</span><span class="n">inp</span><span class="p">)),</span> <span class="n">self</span><span class="p">.</span><span class="nf">_divide</span><span class="p">(</span><span class="n">oup</span><span class="p">)):</span>
            <span class="n">self</span><span class="p">.</span><span class="n">solver</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">a</span><span class="o">==</span><span class="n">b</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">solver</span><span class="p">.</span><span class="nf">check</span><span class="p">()</span><span class="o">==</span><span class="n">sat</span><span class="p">:</span>
            <span class="n">model</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">solver</span><span class="p">.</span><span class="nf">model</span><span class="p">()</span>
            <span class="n">k</span> <span class="o">=</span> <span class="p">[</span><span class="n">model</span><span class="p">.</span><span class="nf">eval</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="nf">as_long</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>
            <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_combine</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
</code></pre></div></div>

<p>So how many input-output pairs do we need to figure out the key uniquely?<br />
I guess atmost 256?<br />
Let’s try it out</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">c</span> <span class="o">=</span> <span class="nf">crack</span><span class="p">()</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
    <span class="nb">input</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">**</span><span class="mi">48</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">output</span> <span class="o">=</span> <span class="nf">server</span><span class="p">(</span><span class="nb">input</span><span class="p">)</span> <span class="c1">#whatever
</span>    <span class="n">c</span><span class="p">.</span><span class="nf">add_sample</span><span class="p">(</span><span class="nb">input</span><span class="p">,</span> <span class="n">output</span><span class="p">)</span>

<span class="n">key</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="nf">get</span><span class="p">()</span>
</code></pre></div></div>

<p>Hmmm, something’s not right, it seems to be stuck indefinitely.<br />
We can get the intuition of difficulty of the solver to find key by reducing the number of constraints i.e the number of input output pairs.</p>

<p>By playing around, one quickly comes to the realisation that it wont workeven for 5 random samples and will time out &gt;200s</p>

<h3 id="moment-of-inspiration">Moment of inspiration</h3>
<p>How about we address the difficulty of the solver (by addressing the difficulty of the problem being asked to solve)</p>

<p>When we take a random input-output pair, what we ask the solver for <code class="language-plaintext highlighter-rouge">Substitution(key[i] ^ some_random)</code><br />
But if it were just <code class="language-plaintext highlighter-rouge">0</code> instead of some_random, it would have to guess one less step.<br />
So how about we make 7 out of 8 <code class="language-plaintext highlighter-rouge">0</code> and only keep one <code class="language-plaintext highlighter-rouge">key</code> place active in substitution?.</p>

<p>This is really easy with <code class="language-plaintext highlighter-rouge">input = (1&lt;&lt;i)</code> for (0&lt;=i&lt;48)</p>

<p>And most importantly, it works!<br />
(To an amazement that it works in around a second with 48 samples as opposed to ~5000 seconds for 5 random samples!)</p>

<h3 id="getting-the-flag">Getting the flag</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pwn</span>
<span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span> <span class="o">=</span> <span class="s">"suscipher.chal.ctf.acsc.asia"</span><span class="p">,</span> <span class="mi">13579</span>
<span class="n">REM</span> <span class="o">=</span> <span class="n">pwn</span><span class="p">.</span><span class="nf">remote</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>

<span class="n">REM</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="s">","</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">str</span><span class="p">((</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">48</span><span class="p">)))</span>
<span class="n">response</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span><span class="n">REM</span><span class="p">.</span><span class="nf">recvline</span><span class="p">()[</span><span class="mi">2</span><span class="p">:].</span><span class="nf">strip</span><span class="p">().</span><span class="nf">split</span><span class="p">(</span><span class="sa">b</span><span class="s">', '</span><span class="p">)))</span>
<span class="n">c</span> <span class="o">=</span> <span class="nf">crack</span><span class="p">()</span>
<span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">response</span><span class="p">):</span>
    <span class="n">c</span><span class="p">.</span><span class="nf">add_sample</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">i</span><span class="p">,</span><span class="n">v</span><span class="p">)</span>

<span class="n">key</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="nf">get</span><span class="p">()</span>
<span class="n">REM</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
<span class="n">REM</span><span class="p">.</span><span class="nf">interactive</span><span class="p">()</span>
</code></pre></div></div>

<h4 id="acscthere_may_be_a_better_solution_to_solve_this_but_i_used_diff_analysis_">ACSC{There_may_be_a_better_solution_to_solve_this_but_I_used_diff_analysis_:(}</h4>

<p>As expected, the author knew there might be other interesting ways like this one ;)</p>

<h3 id="get-the-solve-script">Get the <a href="./solve.py">Solve Script</a></h3>]]></content><author><name>deuterium</name><email>farziemailid69@gmail.com</email></author><category term="cryptography" /><category term="2023" /><category term="ACSC" /><category term="cryptanalysis" /><category term="z3" /><category term="smt" /><category term="SPN" /><category term="differential" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Cyber Apocalypse HTB 2022 Crypto - Memory Acceleration</title><link href="https://deut-erium.github.io/WriteUps/2022/cyber_apocalypse/crypto/memory_acceleration/2022-05-21-HTB-Cyber-Apcalypse-2022-Memory-Acceleration" rel="alternate" type="text/html" title="Cyber Apocalypse HTB 2022 Crypto - Memory Acceleration" /><published>2022-05-21T00:00:00+05:30</published><updated>2022-05-21T00:00:00+05:30</updated><id>https://deut-erium.github.io/WriteUps/2022/cyber_apocalypse/crypto/memory_acceleration/HTB-Cyber-Apcalypse-2022-Memory-Acceleration</id><content type="html" xml:base="https://deut-erium.github.io/WriteUps/2022/cyber_apocalypse/crypto/memory_acceleration/2022-05-21-HTB-Cyber-Apcalypse-2022-Memory-Acceleration"><![CDATA[<!--more-->

<h2 id="challenge-description">Challenge Description</h2>

<blockquote>
  <p>Memory Acceleration
While everyone was asleep, you were pushing the capabilities of your technology to the max. Night after night, you frantically tried to repair the encrypted parts of your brain, reversing custom protocols implemented by your father, wanting to pinpoint exactly what damage had been done and constantly keeping notes because of your inability of forming new memories. On one of those nights, you had a flashback. Your father had always talked about a new technology and how it would change the galaxy. You realized that he had used it on you. This technology dealt with a proof of a work function and decentralized networks. Along with Virgil’s help, you had a “Eureka!” moment, but his approach, brute forcing, meant draining all your energy. Can you find a quicker way to validate new memory blocks?</p>
</blockquote>

<h2 id="source-files">Source Files</h2>
<blockquote>
  <p><a href="./source.py">source.py</a><br />
<a href="./pofwork.py">pofwork.py</a></p>
</blockquote>

<h2 id="source-analysis">Source Analysis</h2>
<p>From <code class="language-plaintext highlighter-rouge">source.py</code></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">socketserver</span>
<span class="kn">import</span> <span class="n">signal</span>
<span class="kn">from</span> <span class="n">pofwork</span> <span class="kn">import</span> <span class="n">phash</span>


<span class="n">DEBUG_MSG</span> <span class="o">=</span> <span class="s">"DEBUG MSG - "</span>
<span class="n">WELCOME_MSG</span> <span class="o">=</span> <span class="s">"""Virgil says:
Klaus I'm connecting the serial debugger to your memory.
Please stay still. We don't want anything wrong to happen.
Ok you should be able to see debug messages now..</span><span class="se">\n\n</span><span class="s">"""</span>


<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="s">'memories.txt'</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">MEMORIES</span> <span class="o">=</span> <span class="p">[</span><span class="n">m</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">f</span><span class="p">.</span><span class="nf">readlines</span><span class="p">()]</span>


<span class="k">class</span> <span class="nc">Handler</span><span class="p">(</span><span class="n">socketserver</span><span class="p">.</span><span class="n">BaseRequestHandler</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">signal</span><span class="p">.</span><span class="nf">alarm</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="nf">main</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">request</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">ReusableTCPServer</span><span class="p">(</span><span class="n">socketserver</span><span class="p">.</span><span class="n">ForkingMixIn</span><span class="p">,</span> <span class="n">socketserver</span><span class="p">.</span><span class="n">TCPServer</span><span class="p">):</span>
    <span class="k">pass</span>


<span class="k">def</span> <span class="nf">sendMessage</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span>
    <span class="n">s</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="nf">encode</span><span class="p">())</span>


<span class="k">def</span> <span class="nf">recieveMessage</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span>
    <span class="nf">sendMessage</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">msg</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">s</span><span class="p">.</span><span class="nf">recv</span><span class="p">(</span><span class="mi">4096</span><span class="p">).</span><span class="nf">decode</span><span class="p">().</span><span class="nf">strip</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="n">block</span> <span class="o">=</span> <span class="s">""</span>
    <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="nf">sendMessage</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">WELCOME_MSG</span><span class="p">)</span>

    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">block</span> <span class="o">+=</span> <span class="n">MEMORIES</span><span class="p">[</span><span class="n">counter</span><span class="p">]</span>

        <span class="nf">sendMessage</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">DEBUG_MSG</span> <span class="o">+</span>
                    <span class="sa">f</span><span class="s">"You need to validate this memory block: </span><span class="si">{</span><span class="n">block</span><span class="si">}</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>

        <span class="n">first_key</span> <span class="o">=</span> <span class="nf">recieveMessage</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">DEBUG_MSG</span> <span class="o">+</span> <span class="s">"Enter first key: "</span><span class="p">)</span>
        <span class="n">second_key</span> <span class="o">=</span> <span class="nf">recieveMessage</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">DEBUG_MSG</span> <span class="o">+</span> <span class="s">"Enter second key: "</span><span class="p">)</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="n">first_key</span><span class="p">,</span> <span class="n">second_key</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">first_key</span><span class="p">),</span> <span class="nf">int</span><span class="p">(</span><span class="n">second_key</span><span class="p">)</span>
            <span class="n">proof_of_work</span> <span class="o">=</span> <span class="nf">phash</span><span class="p">(</span><span class="n">block</span><span class="p">,</span> <span class="n">first_key</span><span class="p">,</span> <span class="n">second_key</span><span class="p">)</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="nf">sendMessage</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">Virgil says: </span><span class="se">\n</span><span class="s">"</span>
                        <span class="s">"Be carefull Klaus!! You don't want to damage yourself.</span><span class="se">\n</span><span class="s">"</span>
                        <span class="s">"Let's start over."</span><span class="p">)</span>
            <span class="nf">exit</span><span class="p">()</span>

        <span class="k">if</span> <span class="n">proof_of_work</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">block</span> <span class="o">+=</span> <span class="sa">f</span><span class="s">" (</span><span class="si">{</span><span class="n">first_key</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">second_key</span><span class="si">}</span><span class="s">). "</span>
            <span class="nf">sendMessage</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">Virgil says: </span><span class="se">\n</span><span class="s">Wow you formed a new memory!!</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
            <span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="nf">sendMessage</span><span class="p">(</span>
                <span class="n">s</span><span class="p">,</span> <span class="sa">f</span><span class="s">"Let's try again </span><span class="si">{</span><span class="mi">4</span> <span class="o">-</span> <span class="n">counter</span><span class="si">}</span><span class="s"> times just to be sure!</span><span class="se">\n\n</span><span class="s">"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nf">sendMessage</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">DEBUG_MSG</span> <span class="o">+</span> <span class="sa">f</span><span class="s">"Incorect proof of work</span><span class="se">\n</span><span class="s">"</span>
                        <span class="s">"</span><span class="se">\n</span><span class="s">Virgil says: </span><span class="se">\n</span><span class="s">"</span>
                        <span class="s">"You calculated something wrong Klaus we need to start over."</span><span class="p">)</span>
            <span class="nf">exit</span><span class="p">()</span>

        <span class="k">if</span> <span class="n">counter</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span>
            <span class="nf">sendMessage</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">"It seems that everything are working fine.</span><span class="se">\n</span><span class="s">"</span>
                        <span class="s">"Wait what is that...</span><span class="se">\n</span><span class="s">"</span>
                        <span class="s">"Klaus this is important!!</span><span class="se">\n</span><span class="s">"</span>
                        <span class="s">"This can help you find your father!!</span><span class="se">\n</span><span class="s">"</span>
                        <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">MEMORIES</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
            <span class="nf">exit</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">socketserver</span><span class="p">.</span><span class="n">TCPServer</span><span class="p">.</span><span class="n">allow_reuse_address</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">server</span> <span class="o">=</span> <span class="nc">ReusableTCPServer</span><span class="p">((</span><span class="s">"0.0.0.0"</span><span class="p">,</span> <span class="mi">1337</span><span class="p">),</span> <span class="n">Handler</span><span class="p">)</span>
    <span class="n">server</span><span class="p">.</span><span class="nf">serve_forever</span><span class="p">()</span>
</code></pre></div></div>

<p>We have to provide two integers <code class="language-plaintext highlighter-rouge">first_key</code> and <code class="language-plaintext highlighter-rouge">second_key</code> such that <br />
<code class="language-plaintext highlighter-rouge">phash(block, first_key, second_key) == 0</code>. <code class="language-plaintext highlighter-rouge">block</code> will be presented by 
the challenge server. If we do it 4 times, we get our flag.<br />
It’s roughly like how we validate blocks with Proof-of-Work in blockchains</p>

<p>Lets take a look at <code class="language-plaintext highlighter-rouge">phash</code> from <code class="language-plaintext highlighter-rouge">pofwork.py</code></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">hashlib</span> <span class="kn">import</span> <span class="n">md5</span>
<span class="kn">from</span> <span class="n">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">long_to_bytes</span><span class="p">,</span> <span class="n">bytes_to_long</span>


<span class="n">sbox</span> <span class="o">=</span> <span class="p">[</span>
    <span class="mh">0x63</span><span class="p">,</span> <span class="mh">0x7c</span><span class="p">,</span> <span class="mh">0x77</span><span class="p">,</span> <span class="mh">0x7b</span><span class="p">,</span> <span class="mh">0xf2</span><span class="p">,</span> <span class="mh">0x6b</span><span class="p">,</span> <span class="mh">0x6f</span><span class="p">,</span> <span class="mh">0xc5</span><span class="p">,</span> <span class="mh">0x30</span><span class="p">,</span> <span class="mh">0x01</span><span class="p">,</span> <span class="mh">0x67</span><span class="p">,</span> <span class="mh">0x2b</span><span class="p">,</span> <span class="mh">0xfe</span><span class="p">,</span> <span class="mh">0xd7</span><span class="p">,</span> <span class="mh">0xab</span><span class="p">,</span> <span class="mh">0x76</span><span class="p">,</span>
    <span class="mh">0xca</span><span class="p">,</span> <span class="mh">0x82</span><span class="p">,</span> <span class="mh">0xc9</span><span class="p">,</span> <span class="mh">0x7d</span><span class="p">,</span> <span class="mh">0xfa</span><span class="p">,</span> <span class="mh">0x59</span><span class="p">,</span> <span class="mh">0x47</span><span class="p">,</span> <span class="mh">0xf0</span><span class="p">,</span> <span class="mh">0xad</span><span class="p">,</span> <span class="mh">0xd4</span><span class="p">,</span> <span class="mh">0xa2</span><span class="p">,</span> <span class="mh">0xaf</span><span class="p">,</span> <span class="mh">0x9c</span><span class="p">,</span> <span class="mh">0xa4</span><span class="p">,</span> <span class="mh">0x72</span><span class="p">,</span> <span class="mh">0xc0</span><span class="p">,</span>
    <span class="mh">0xb7</span><span class="p">,</span> <span class="mh">0xfd</span><span class="p">,</span> <span class="mh">0x93</span><span class="p">,</span> <span class="mh">0x26</span><span class="p">,</span> <span class="mh">0x36</span><span class="p">,</span> <span class="mh">0x3f</span><span class="p">,</span> <span class="mh">0xf7</span><span class="p">,</span> <span class="mh">0xcc</span><span class="p">,</span> <span class="mh">0x34</span><span class="p">,</span> <span class="mh">0xa5</span><span class="p">,</span> <span class="mh">0xe5</span><span class="p">,</span> <span class="mh">0xf1</span><span class="p">,</span> <span class="mh">0x71</span><span class="p">,</span> <span class="mh">0xd8</span><span class="p">,</span> <span class="mh">0x31</span><span class="p">,</span> <span class="mh">0x15</span><span class="p">,</span>
    <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0xc7</span><span class="p">,</span> <span class="mh">0x23</span><span class="p">,</span> <span class="mh">0xc3</span><span class="p">,</span> <span class="mh">0x18</span><span class="p">,</span> <span class="mh">0x96</span><span class="p">,</span> <span class="mh">0x05</span><span class="p">,</span> <span class="mh">0x9a</span><span class="p">,</span> <span class="mh">0x07</span><span class="p">,</span> <span class="mh">0x12</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0xe2</span><span class="p">,</span> <span class="mh">0xeb</span><span class="p">,</span> <span class="mh">0x27</span><span class="p">,</span> <span class="mh">0xb2</span><span class="p">,</span> <span class="mh">0x75</span><span class="p">,</span>
    <span class="mh">0x09</span><span class="p">,</span> <span class="mh">0x83</span><span class="p">,</span> <span class="mh">0x2c</span><span class="p">,</span> <span class="mh">0x1a</span><span class="p">,</span> <span class="mh">0x1b</span><span class="p">,</span> <span class="mh">0x6e</span><span class="p">,</span> <span class="mh">0x5a</span><span class="p">,</span> <span class="mh">0xa0</span><span class="p">,</span> <span class="mh">0x52</span><span class="p">,</span> <span class="mh">0x3b</span><span class="p">,</span> <span class="mh">0xd6</span><span class="p">,</span> <span class="mh">0xb3</span><span class="p">,</span> <span class="mh">0x29</span><span class="p">,</span> <span class="mh">0xe3</span><span class="p">,</span> <span class="mh">0x2f</span><span class="p">,</span> <span class="mh">0x84</span><span class="p">,</span>
    <span class="mh">0x53</span><span class="p">,</span> <span class="mh">0xd1</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0xed</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="mh">0xfc</span><span class="p">,</span> <span class="mh">0xb1</span><span class="p">,</span> <span class="mh">0x5b</span><span class="p">,</span> <span class="mh">0x6a</span><span class="p">,</span> <span class="mh">0xcb</span><span class="p">,</span> <span class="mh">0xbe</span><span class="p">,</span> <span class="mh">0x39</span><span class="p">,</span> <span class="mh">0x4a</span><span class="p">,</span> <span class="mh">0x4c</span><span class="p">,</span> <span class="mh">0x58</span><span class="p">,</span> <span class="mh">0xcf</span><span class="p">,</span>
    <span class="mh">0xd0</span><span class="p">,</span> <span class="mh">0xef</span><span class="p">,</span> <span class="mh">0xaa</span><span class="p">,</span> <span class="mh">0xfb</span><span class="p">,</span> <span class="mh">0x43</span><span class="p">,</span> <span class="mh">0x4d</span><span class="p">,</span> <span class="mh">0x33</span><span class="p">,</span> <span class="mh">0x85</span><span class="p">,</span> <span class="mh">0x45</span><span class="p">,</span> <span class="mh">0xf9</span><span class="p">,</span> <span class="mh">0x02</span><span class="p">,</span> <span class="mh">0x7f</span><span class="p">,</span> <span class="mh">0x50</span><span class="p">,</span> <span class="mh">0x3c</span><span class="p">,</span> <span class="mh">0x9f</span><span class="p">,</span> <span class="mh">0xa8</span><span class="p">,</span>
    <span class="mh">0x51</span><span class="p">,</span> <span class="mh">0xa3</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">,</span> <span class="mh">0x8f</span><span class="p">,</span> <span class="mh">0x92</span><span class="p">,</span> <span class="mh">0x9d</span><span class="p">,</span> <span class="mh">0x38</span><span class="p">,</span> <span class="mh">0xf5</span><span class="p">,</span> <span class="mh">0xbc</span><span class="p">,</span> <span class="mh">0xb6</span><span class="p">,</span> <span class="mh">0xda</span><span class="p">,</span> <span class="mh">0x21</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">,</span> <span class="mh">0xff</span><span class="p">,</span> <span class="mh">0xf3</span><span class="p">,</span> <span class="mh">0xd2</span><span class="p">,</span>
    <span class="mh">0xcd</span><span class="p">,</span> <span class="mh">0x0c</span><span class="p">,</span> <span class="mh">0x13</span><span class="p">,</span> <span class="mh">0xec</span><span class="p">,</span> <span class="mh">0x5f</span><span class="p">,</span> <span class="mh">0x97</span><span class="p">,</span> <span class="mh">0x44</span><span class="p">,</span> <span class="mh">0x17</span><span class="p">,</span> <span class="mh">0xc4</span><span class="p">,</span> <span class="mh">0xa7</span><span class="p">,</span> <span class="mh">0x7e</span><span class="p">,</span> <span class="mh">0x3d</span><span class="p">,</span> <span class="mh">0x64</span><span class="p">,</span> <span class="mh">0x5d</span><span class="p">,</span> <span class="mh">0x19</span><span class="p">,</span> <span class="mh">0x73</span><span class="p">,</span>
    <span class="mh">0x60</span><span class="p">,</span> <span class="mh">0x81</span><span class="p">,</span> <span class="mh">0x4f</span><span class="p">,</span> <span class="mh">0xdc</span><span class="p">,</span> <span class="mh">0x22</span><span class="p">,</span> <span class="mh">0x2a</span><span class="p">,</span> <span class="mh">0x90</span><span class="p">,</span> <span class="mh">0x88</span><span class="p">,</span> <span class="mh">0x46</span><span class="p">,</span> <span class="mh">0xee</span><span class="p">,</span> <span class="mh">0xb8</span><span class="p">,</span> <span class="mh">0x14</span><span class="p">,</span> <span class="mh">0xde</span><span class="p">,</span> <span class="mh">0x5e</span><span class="p">,</span> <span class="mh">0x0b</span><span class="p">,</span> <span class="mh">0xdb</span><span class="p">,</span>
    <span class="mh">0xe0</span><span class="p">,</span> <span class="mh">0x32</span><span class="p">,</span> <span class="mh">0x3a</span><span class="p">,</span> <span class="mh">0x0a</span><span class="p">,</span> <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x06</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="mh">0x5c</span><span class="p">,</span> <span class="mh">0xc2</span><span class="p">,</span> <span class="mh">0xd3</span><span class="p">,</span> <span class="mh">0xac</span><span class="p">,</span> <span class="mh">0x62</span><span class="p">,</span> <span class="mh">0x91</span><span class="p">,</span> <span class="mh">0x95</span><span class="p">,</span> <span class="mh">0xe4</span><span class="p">,</span> <span class="mh">0x79</span><span class="p">,</span>
    <span class="mh">0xe7</span><span class="p">,</span> <span class="mh">0xc8</span><span class="p">,</span> <span class="mh">0x37</span><span class="p">,</span> <span class="mh">0x6d</span><span class="p">,</span> <span class="mh">0x8d</span><span class="p">,</span> <span class="mh">0xd5</span><span class="p">,</span> <span class="mh">0x4e</span><span class="p">,</span> <span class="mh">0xa9</span><span class="p">,</span> <span class="mh">0x6c</span><span class="p">,</span> <span class="mh">0x56</span><span class="p">,</span> <span class="mh">0xf4</span><span class="p">,</span> <span class="mh">0xea</span><span class="p">,</span> <span class="mh">0x65</span><span class="p">,</span> <span class="mh">0x7a</span><span class="p">,</span> <span class="mh">0xae</span><span class="p">,</span> <span class="mh">0x08</span><span class="p">,</span>
    <span class="mh">0xba</span><span class="p">,</span> <span class="mh">0x78</span><span class="p">,</span> <span class="mh">0x25</span><span class="p">,</span> <span class="mh">0x2e</span><span class="p">,</span> <span class="mh">0x1c</span><span class="p">,</span> <span class="mh">0xa6</span><span class="p">,</span> <span class="mh">0xb4</span><span class="p">,</span> <span class="mh">0xc6</span><span class="p">,</span> <span class="mh">0xe8</span><span class="p">,</span> <span class="mh">0xdd</span><span class="p">,</span> <span class="mh">0x74</span><span class="p">,</span> <span class="mh">0x1f</span><span class="p">,</span> <span class="mh">0x4b</span><span class="p">,</span> <span class="mh">0xbd</span><span class="p">,</span> <span class="mh">0x8b</span><span class="p">,</span> <span class="mh">0x8a</span><span class="p">,</span>
    <span class="mh">0x70</span><span class="p">,</span> <span class="mh">0x3e</span><span class="p">,</span> <span class="mh">0xb5</span><span class="p">,</span> <span class="mh">0x66</span><span class="p">,</span> <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x03</span><span class="p">,</span> <span class="mh">0xf6</span><span class="p">,</span> <span class="mh">0x0e</span><span class="p">,</span> <span class="mh">0x61</span><span class="p">,</span> <span class="mh">0x35</span><span class="p">,</span> <span class="mh">0x57</span><span class="p">,</span> <span class="mh">0xb9</span><span class="p">,</span> <span class="mh">0x86</span><span class="p">,</span> <span class="mh">0xc1</span><span class="p">,</span> <span class="mh">0x1d</span><span class="p">,</span> <span class="mh">0x9e</span><span class="p">,</span>
    <span class="mh">0xe1</span><span class="p">,</span> <span class="mh">0xf8</span><span class="p">,</span> <span class="mh">0x98</span><span class="p">,</span> <span class="mh">0x11</span><span class="p">,</span> <span class="mh">0x69</span><span class="p">,</span> <span class="mh">0xd9</span><span class="p">,</span> <span class="mh">0x8e</span><span class="p">,</span> <span class="mh">0x94</span><span class="p">,</span> <span class="mh">0x9b</span><span class="p">,</span> <span class="mh">0x1e</span><span class="p">,</span> <span class="mh">0x87</span><span class="p">,</span> <span class="mh">0xe9</span><span class="p">,</span> <span class="mh">0xce</span><span class="p">,</span> <span class="mh">0x55</span><span class="p">,</span> <span class="mh">0x28</span><span class="p">,</span> <span class="mh">0xdf</span><span class="p">,</span>
    <span class="mh">0x8c</span><span class="p">,</span> <span class="mh">0xa1</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0x0d</span><span class="p">,</span> <span class="mh">0xbf</span><span class="p">,</span> <span class="mh">0xe6</span><span class="p">,</span> <span class="mh">0x42</span><span class="p">,</span> <span class="mh">0x68</span><span class="p">,</span> <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x99</span><span class="p">,</span> <span class="mh">0x2d</span><span class="p">,</span> <span class="mh">0x0f</span><span class="p">,</span> <span class="mh">0xb0</span><span class="p">,</span> <span class="mh">0x54</span><span class="p">,</span> <span class="mh">0xbb</span><span class="p">,</span> <span class="mh">0x16</span>
<span class="p">]</span>


<span class="k">def</span> <span class="nf">rotl</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="nf">return </span><span class="p">((</span><span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="n">b</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="mi">32</span> <span class="o">-</span> <span class="n">b</span><span class="p">)))</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span>


<span class="k">def</span> <span class="nf">sub</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
    <span class="n">b</span> <span class="o">=</span> <span class="nf">long_to_bytes</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
    <span class="k">return</span> <span class="nf">bytes</span><span class="p">([</span><span class="n">sbox</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">b</span><span class="p">])</span>


<span class="k">def</span> <span class="nf">phash</span><span class="p">(</span><span class="n">block</span><span class="p">,</span> <span class="n">key1</span><span class="p">,</span> <span class="n">key2</span><span class="p">):</span>
    <span class="n">block</span> <span class="o">=</span> <span class="nf">md5</span><span class="p">(</span><span class="n">block</span><span class="p">.</span><span class="nf">encode</span><span class="p">()).</span><span class="nf">digest</span><span class="p">()</span>
    <span class="n">block</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">block</span>
    <span class="n">blocks</span> <span class="o">=</span> <span class="p">[</span><span class="nf">bytes_to_long</span><span class="p">(</span><span class="n">block</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">4</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">block</span><span class="p">),</span> <span class="mi">4</span><span class="p">)]</span>

    <span class="n">m</span> <span class="o">=</span> <span class="mh">0xffffffff</span>
    <span class="n">rv1</span><span class="p">,</span> <span class="n">rv2</span> <span class="o">=</span> <span class="mh">0x2423380b4d045</span><span class="p">,</span> <span class="mh">0x3b30fa7ccaa83</span>
    <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">u</span> <span class="o">=</span> <span class="n">key1</span><span class="p">,</span> <span class="mh">0x39ef52e9f30b3</span><span class="p">,</span> <span class="mh">0x253ea615d0215</span><span class="p">,</span> <span class="mh">0x2cd1372d21d77</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">13</span><span class="p">):</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">x</span><span class="p">,</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">^</span> <span class="n">y</span>
        <span class="n">z</span><span class="p">,</span> <span class="n">u</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">^</span> <span class="n">z</span><span class="p">,</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="o">^</span> <span class="n">u</span>
        <span class="n">rv1</span> <span class="o">^=</span> <span class="p">(</span><span class="n">x</span> <span class="p">:</span><span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">&amp;</span> <span class="n">m</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">m</span> <span class="o">+</span> <span class="p">(</span><span class="n">y</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="nf">rotl</span><span class="p">(</span><span class="n">z</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
        <span class="n">rv2</span> <span class="o">^=</span> <span class="p">(</span><span class="n">y</span> <span class="p">:</span><span class="o">=</span> <span class="p">(</span><span class="n">y</span> <span class="o">&amp;</span> <span class="n">m</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">m</span> <span class="o">+</span> <span class="p">(</span><span class="n">z</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="nf">rotl</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
        <span class="n">rv1</span><span class="p">,</span> <span class="n">rv2</span> <span class="o">=</span> <span class="n">rv2</span><span class="p">,</span> <span class="n">rv1</span>
        <span class="n">rv1</span> <span class="o">=</span> <span class="nf">sub</span><span class="p">(</span><span class="n">rv1</span><span class="p">)</span>
        <span class="n">rv1</span> <span class="o">=</span> <span class="nf">bytes_to_long</span><span class="p">(</span><span class="n">rv1</span><span class="p">)</span>

    <span class="n">h</span> <span class="o">=</span> <span class="n">rv1</span> <span class="o">+</span> <span class="mh">0x6276137d7</span> <span class="o">&amp;</span> <span class="n">m</span>
    <span class="n">key2</span> <span class="o">=</span> <span class="nf">sub</span><span class="p">(</span><span class="n">key2</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">d</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">key2</span><span class="p">):</span>
        <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">m</span>
        <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">m</span>
        <span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">m</span>
        <span class="n">h</span> <span class="o">^=</span> <span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span> <span class="o">-</span> <span class="n">d</span><span class="p">)</span>
        <span class="n">h</span> <span class="o">+=</span> <span class="n">h</span>
        <span class="n">h</span> <span class="o">&amp;=</span> <span class="n">m</span>

    <span class="n">h</span> <span class="o">*=</span> <span class="n">u</span> <span class="o">*</span> <span class="n">z</span>
    <span class="n">h</span> <span class="o">&amp;=</span> <span class="n">m</span>

    <span class="k">return</span> <span class="n">h</span>
</code></pre></div></div>

<p>Few things to note here -</p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">rotl</code> is 32-bit rotate left</li>
  <li><code class="language-plaintext highlighter-rouge">sbox</code> is AES sbox, so that we dont try linear/differential cryptanalysis XD</li>
  <li>Every operation in <code class="language-plaintext highlighter-rouge">phash</code> can be roughly thought on working on 32 bit <code class="language-plaintext highlighter-rouge">uint</code>s 
since each operation is preceded by <code class="language-plaintext highlighter-rouge">&amp;m (0xffffffff)</code> which makes everything 
operate mod $2^{32}$</li>
  <li>Which means <code class="language-plaintext highlighter-rouge">rv1</code>, <code class="language-plaintext highlighter-rouge">rv2</code>, <code class="language-plaintext highlighter-rouge">x</code>, <code class="language-plaintext highlighter-rouge">y</code>, <code class="language-plaintext highlighter-rouge">z</code>, <code class="language-plaintext highlighter-rouge">u</code> are all 32bit values including 
our keys, i.e `rv1 = 0x2423380b4d045 &amp; m = 0x80b4d045</li>
  <li>Insted of a block, <code class="language-plaintext highlighter-rouge">md5(block)</code> is hashed, so we have little to no control 
over the message and we have to actually expoit the keys.</li>
</ol>

<p>Finding relevant <code class="language-plaintext highlighter-rouge">key1</code> and <code class="language-plaintext highlighter-rouge">key2</code> seems difficult by bare logic, dont worry<br />
since the first block provides a subtle hint</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">"You don't have to add the z3 solver to your firmware ever again. Now you can use it forever.</code></p>
</blockquote>

<p>We can make an SMT model in z3 and let it do its wonders!<br />
But first let us demarcate the function so it’s easier to refer</p>

<h5 id="function-setup">function setup</h5>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">phash</span><span class="p">(</span><span class="n">block</span><span class="p">,</span> <span class="n">key1</span><span class="p">,</span> <span class="n">key2</span><span class="p">):</span>
    <span class="n">block</span> <span class="o">=</span> <span class="nf">md5</span><span class="p">(</span><span class="n">block</span><span class="p">.</span><span class="nf">encode</span><span class="p">()).</span><span class="nf">digest</span><span class="p">()</span>
    <span class="n">block</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">block</span>
    <span class="n">blocks</span> <span class="o">=</span> <span class="p">[</span><span class="nf">bytes_to_long</span><span class="p">(</span><span class="n">block</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">4</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">block</span><span class="p">),</span> <span class="mi">4</span><span class="p">)]</span>

    <span class="n">m</span> <span class="o">=</span> <span class="mh">0xffffffff</span>
    <span class="n">rv1</span><span class="p">,</span> <span class="n">rv2</span> <span class="o">=</span> <span class="mh">0x2423380b4d045</span><span class="p">,</span> <span class="mh">0x3b30fa7ccaa83</span>
    <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">u</span> <span class="o">=</span> <span class="n">key1</span><span class="p">,</span> <span class="mh">0x39ef52e9f30b3</span><span class="p">,</span> <span class="mh">0x253ea615d0215</span><span class="p">,</span> <span class="mh">0x2cd1372d21d77</span>
</code></pre></div></div>
<h5 id="key1-loop">key1 loop</h5>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">13</span><span class="p">):</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">x</span><span class="p">,</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">^</span> <span class="n">y</span>
        <span class="n">z</span><span class="p">,</span> <span class="n">u</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">^</span> <span class="n">z</span><span class="p">,</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="o">^</span> <span class="n">u</span>
        <span class="n">rv1</span> <span class="o">^=</span> <span class="p">(</span><span class="n">x</span> <span class="p">:</span><span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">&amp;</span> <span class="n">m</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">m</span> <span class="o">+</span> <span class="p">(</span><span class="n">y</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="nf">rotl</span><span class="p">(</span><span class="n">z</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
        <span class="n">rv2</span> <span class="o">^=</span> <span class="p">(</span><span class="n">y</span> <span class="p">:</span><span class="o">=</span> <span class="p">(</span><span class="n">y</span> <span class="o">&amp;</span> <span class="n">m</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">m</span> <span class="o">+</span> <span class="p">(</span><span class="n">z</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="nf">rotl</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
        <span class="n">rv1</span><span class="p">,</span> <span class="n">rv2</span> <span class="o">=</span> <span class="n">rv2</span><span class="p">,</span> <span class="n">rv1</span>
        <span class="n">rv1</span> <span class="o">=</span> <span class="nf">sub</span><span class="p">(</span><span class="n">rv1</span><span class="p">)</span>
        <span class="n">rv1</span> <span class="o">=</span> <span class="nf">bytes_to_long</span><span class="p">(</span><span class="n">rv1</span><span class="p">)</span>
</code></pre></div></div>
<h5 id="key2-substitution">key2 substitution</h5>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">h</span> <span class="o">=</span> <span class="n">rv1</span> <span class="o">+</span> <span class="mh">0x6276137d7</span> <span class="o">&amp;</span> <span class="n">m</span>
    <span class="n">key2</span> <span class="o">=</span> <span class="nf">sub</span><span class="p">(</span><span class="n">key2</span><span class="p">)</span>
</code></pre></div></div>
<h5 id="key2-loop">key2 loop</h5>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">d</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">key2</span><span class="p">):</span>
        <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">m</span>
        <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">m</span>
        <span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">m</span>
        <span class="n">h</span> <span class="o">^=</span> <span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span> <span class="o">-</span> <span class="n">d</span><span class="p">)</span>
        <span class="n">h</span> <span class="o">+=</span> <span class="n">h</span>
        <span class="n">h</span> <span class="o">&amp;=</span> <span class="n">m</span>
</code></pre></div></div>
<h5 id="final-multiplication">final multiplication</h5>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">h</span> <span class="o">*=</span> <span class="n">u</span> <span class="o">*</span> <span class="n">z</span>
    <span class="n">h</span> <span class="o">&amp;=</span> <span class="n">m</span>

    <span class="k">return</span> <span class="n">h</span>
</code></pre></div></div>

<h2 id="enter-z3">Enter Z3</h2>
<p>Since we are dealing with 32 bits entities only, we will use theory of <br />
bitvectors. Where each variable is simply considered a collection of<br />
bits and all the operations are treated as symbolic computation upon<br />
those sets of bits. Pretty much like a hardware circuit, where each<br />
component is say a 32 bit register.</p>

<h3 id="representing-function-setup">Representing <a href="#function-setup">function setup</a></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">block</span> <span class="o">=</span> <span class="nf">md5</span><span class="p">(</span><span class="n">message</span><span class="p">).</span><span class="nf">digest</span><span class="p">()</span>
<span class="n">block</span> <span class="o">=</span> <span class="mi">4</span><span class="o">*</span><span class="n">block</span>
<span class="n">blocks</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">.</span><span class="nf">from_bytes</span><span class="p">(</span><span class="n">block</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">4</span><span class="p">],</span><span class="s">'big'</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">block</span><span class="p">),</span> <span class="mi">4</span><span class="p">)]</span>
<span class="c1"># we will let the blocks be the way they are in the real function
# or we could declare them as 32-bit constants, either suffices
# blocks = [BitVecVal(i,32) for i in blocks] is treated same as above
</span><span class="n">rv1</span><span class="p">,</span> <span class="n">rv2</span> <span class="o">=</span> <span class="nc">BitVecVal</span><span class="p">(</span><span class="mh">0x2423380b4d045</span><span class="p">,</span><span class="mi">32</span><span class="p">),</span> <span class="nc">BitVecVal</span><span class="p">(</span><span class="mh">0x3b30fa7ccaa83</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span>
<span class="c1"># note that they will automatically be truncated to 32 bits
</span><span class="n">key1</span> <span class="o">=</span> <span class="nc">BitVec</span><span class="p">(</span><span class="s">'key1'</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
<span class="n">key2</span> <span class="o">=</span> <span class="nc">BitVec</span><span class="p">(</span><span class="s">'key2'</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
<span class="c1"># key1 and key2 treated as 32-bit unknowns
</span><span class="n">m</span> <span class="o">=</span> <span class="mh">0xffffffff</span> <span class="c1">#can be written as -1 as well ;)
</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">u</span> <span class="o">=</span> <span class="n">key1</span><span class="p">,</span> <span class="o">*</span><span class="p">[</span><span class="nc">BitVecVal</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">(</span><span class="mh">0x39ef52e9f30b3</span><span class="p">,</span> <span class="mh">0x253ea615d0215</span><span class="p">,</span> <span class="mh">0x2cd1372d21d77</span><span class="p">)]</span>
<span class="c1"># bitvecs can be used almost like python variables! I love z3 API
</span></code></pre></div></div>
<h3 id="representing-key1-loop">Representing <a href="#key1-loop">key1 loop</a></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">13</span><span class="p">):</span>
	<span class="n">x</span><span class="p">,</span><span class="n">y</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">x</span><span class="p">,</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">^</span> <span class="n">y</span>
    <span class="c1"># easy interop with xor
</span>	<span class="n">z</span><span class="p">,</span><span class="n">u</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">^</span> <span class="n">z</span><span class="p">,</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="o">^</span> <span class="n">u</span>
	<span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">,</span><span class="n">u</span> <span class="o">=</span> <span class="p">[</span><span class="nf">simplify</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">,</span><span class="n">u</span><span class="p">)]</span> 
    <span class="c1"># simplify tries to evaluate the current symbolic computation of a variable
</span>    <span class="c1"># and tries to simplify as much as possible (no effect on truth, can skip)
</span>	<span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">*</span><span class="p">(</span><span class="n">m</span> <span class="o">+</span> <span class="nc">LShR</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="nc">RotateLeft</span><span class="p">(</span><span class="n">z</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
    <span class="c1"># expanding the walrus (:=)
</span>    <span class="c1"># note that &gt;&gt; is replaced with LShR, this is because in theory of bitvecs
</span>    <span class="c1"># there are two kinds of shift rights, arithmetic and logical. logical
</span>    <span class="c1"># shift right shifts as is whereas arithmetic shift right also retains the
</span>    <span class="c1"># original sign. Python ints are infinite, so &gt;&gt; means logical shift by
</span>    <span class="c1"># shift by default but in z3 &gt;&gt; is arithmetic while LShR is logical
</span>	<span class="n">rv1</span> <span class="o">^=</span> <span class="n">x</span>
	<span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">*</span><span class="p">(</span><span class="n">m</span> <span class="o">+</span> <span class="nc">LShR</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="nc">RotateLeft</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
	<span class="n">rv2</span> <span class="o">^=</span> <span class="n">y</span>
	<span class="n">rv1</span><span class="p">,</span> <span class="n">rv2</span> <span class="o">=</span> <span class="n">rv2</span><span class="p">,</span> <span class="n">rv1</span>
	<span class="n">rv1</span> <span class="o">=</span> <span class="nf">sub</span><span class="p">(</span><span class="n">rv1</span><span class="p">)</span>
</code></pre></div></div>

<p>Wait, how will <code class="language-plaintext highlighter-rouge">sub</code> work?<br />
Good question, it wont the <code class="language-plaintext highlighter-rouge">sub</code> is a previously defined python function which<br />
expects python <code class="language-plaintext highlighter-rouge">int</code> to index the <code class="language-plaintext highlighter-rouge">SBOX</code> and return a value. It wont<br />
understand <code class="language-plaintext highlighter-rouge">BitVec</code> as index and so wont our model understand our function!</p>

<h3 id="theory-of-arrays">Theory of Arrays</h3>
<p>SMT solvers are so mature, we can use multiple theories to create and solve a<br />
model!<br />
With theory of arrays, we can essentially declare an array with arbitrary index<br />
and arbitrary stored value.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">SBOX</span> <span class="o">=</span> <span class="nc">Array</span><span class="p">(</span><span class="s">'SBOX'</span><span class="p">,</span> <span class="nc">BitVecSort</span><span class="p">(</span><span class="mi">8</span><span class="p">),</span> <span class="nc">BitVecSort</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span>
<span class="k">def</span> <span class="nf">sub</span><span class="p">(</span><span class="n">bitvec32</span><span class="p">):</span>
    <span class="n">vec_bytes</span> <span class="o">=</span> <span class="p">[</span><span class="nc">Extract</span><span class="p">(</span><span class="mi">8</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="o">*</span><span class="n">i</span><span class="p">,</span> <span class="n">bitvec32</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
    <span class="c1"># logical analogue of 32-bit int to 4-bytes in big-endian order
</span>    <span class="c1"># Extract(hi,lo,bitvec) takes the bits [lo,hi) and creates a new
</span>    <span class="c1"># bitvector of size hi-lo+1
</span>    <span class="k">return</span> <span class="nc">Concat</span><span class="p">([</span><span class="n">SBOX</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">vec_bytes</span><span class="p">])</span>
    <span class="c1"># i is index BitVec(8) to Array SBOX and SBOX[i] is BitVec(8) stored
</span>    <span class="c1"># Concat concatanates the 4 8-bitvectors to an 32-bitvector like it
</span>    <span class="c1"># is done in after the original sub in the key1 loop
</span></code></pre></div></div>

<h3 id="representing-key2-substitution">Representing <a href="#key2-substitution">key2 substitution</a></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">h</span> <span class="o">=</span> <span class="nf">simplify</span><span class="p">(</span><span class="n">rv1</span> <span class="o">+</span> <span class="mh">0x6276137d7</span><span class="p">)</span>
<span class="n">subkey2</span> <span class="o">=</span> <span class="p">[</span><span class="nc">Extract</span><span class="p">(</span><span class="mi">8</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="o">*</span><span class="n">i</span><span class="p">,</span><span class="n">key2</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
<span class="c1"># splitting to 8-bits again
</span><span class="n">subkey2</span> <span class="o">=</span> <span class="p">[</span><span class="n">SBOX</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">subkey2</span><span class="p">]</span>
<span class="c1"># note that we need to mention SBOX only once in the whole logic
</span><span class="n">subkey2</span> <span class="o">=</span> <span class="p">[</span><span class="nc">ZeroExt</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">subkey2</span><span class="p">]</span>
</code></pre></div></div>
<p>What is ZeroExt? Note that subkey2 after substitution is a list of 8-bit<br />
entities. Now this one wouldn’t look much severe to a programmer since all<br />
programming languages dont bother much about adding two integer values c/c++<br />
would give type warning but just add the smaller value to a bigger value<br />
without ranting. whereas python doesn’t bother at all. But if we think like<br />
a hardware, you will be bothered when presented to add a 32-bit register to<br />
a 8-bit register. Since we require this value later, we make it a 32 bit value<br />
by Extending with 24 zeros in the front (if we were not dealing with uint32<br />
we would have sign-extended these 8-bit values.</p>

<h3 id="representing-key2-loop">Representing <a href="#key2-loop">key2 loop</a></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">d</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">subkey2</span><span class="p">):</span>
	<span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span><span class="o">&lt;&lt;</span><span class="mi">1</span><span class="p">)</span>
	<span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span><span class="o">&lt;&lt;</span><span class="mi">3</span><span class="p">)</span>
	<span class="n">c</span> <span class="o">=</span> <span class="nc">LShR</span><span class="p">(</span><span class="n">h</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
	<span class="c1"># note the LShR again, blindly missing an operator can cost you hours :)
</span>	<span class="n">h</span> <span class="o">^=</span> <span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">+</span><span class="n">c</span><span class="o">-</span><span class="n">d</span><span class="p">)</span>
	<span class="n">h</span> <span class="o">+=</span> <span class="n">h</span>
<span class="n">h</span> <span class="o">^=</span> <span class="n">u</span><span class="o">*</span><span class="n">z</span>
</code></pre></div></div>

<p>Now after all this bizarre symbolic computation, we are not done yet, we are<br />
not here just to model but to ask the solver to find the values of <code class="language-plaintext highlighter-rouge">key1</code> and<br />
<code class="language-plaintext highlighter-rouge">key2</code> such that this symbolic function evaluates to 0</p>

<h3 id="calling-a-solver">Calling a solver</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>solver = Solver()
solver.add(h==0) #the final h we have here should be 0
for i,v in enumerate(sbox): # the original AES sbox
    solver.add(SBOX[i]==v)
# specifing the exact substitution box
if solver.check() == sat:
    m = solver.model()
    # a desirable model
    return (m[key1].as_long(), m[key2].as_long())
# as_long converts bitvecs to python ints
</code></pre></div></div>

<h3 id="putting-it-all-together">Putting it all together</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">hack_proof_of_work</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
	<span class="n">block</span> <span class="o">=</span> <span class="nf">md5</span><span class="p">(</span><span class="n">message</span><span class="p">).</span><span class="nf">digest</span><span class="p">()</span>
	<span class="n">block</span> <span class="o">=</span> <span class="mi">4</span><span class="o">*</span><span class="n">block</span>
	<span class="n">blocks</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">.</span><span class="nf">from_bytes</span><span class="p">(</span><span class="n">block</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">4</span><span class="p">],</span><span class="s">'big'</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">block</span><span class="p">),</span> <span class="mi">4</span><span class="p">)]</span>
	<span class="n">rv1</span><span class="p">,</span> <span class="n">rv2</span> <span class="o">=</span> <span class="nc">BitVecVal</span><span class="p">(</span><span class="mh">0x2423380b4d045</span><span class="p">,</span><span class="mi">32</span><span class="p">),</span> <span class="nc">BitVecVal</span><span class="p">(</span><span class="mh">0x3b30fa7ccaa83</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span>
	<span class="n">key1</span> <span class="o">=</span> <span class="nc">BitVec</span><span class="p">(</span><span class="s">'key1'</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
	<span class="n">key2</span> <span class="o">=</span> <span class="nc">BitVec</span><span class="p">(</span><span class="s">'key2'</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
	<span class="n">m</span> <span class="o">=</span> <span class="mh">0xffffffff</span>
	<span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">u</span> <span class="o">=</span> <span class="n">key1</span><span class="p">,</span> <span class="o">*</span><span class="p">[</span><span class="nc">BitVecVal</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">(</span><span class="mh">0x39ef52e9f30b3</span><span class="p">,</span> <span class="mh">0x253ea615d0215</span><span class="p">,</span> <span class="mh">0x2cd1372d21d77</span><span class="p">)]</span>
	<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">13</span><span class="p">):</span>
		<span class="n">x</span><span class="p">,</span><span class="n">y</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">x</span><span class="p">,</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">^</span> <span class="n">y</span>
		<span class="n">z</span><span class="p">,</span><span class="n">u</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">^</span> <span class="n">z</span><span class="p">,</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="o">^</span> <span class="n">u</span>
		<span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">,</span><span class="n">u</span> <span class="o">=</span> <span class="p">[</span><span class="nf">simplify</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">,</span><span class="n">u</span><span class="p">)]</span> 
		<span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">*</span><span class="p">(</span><span class="n">m</span> <span class="o">+</span> <span class="nc">LShR</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="nc">RotateLeft</span><span class="p">(</span><span class="n">z</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
		<span class="n">rv1</span> <span class="o">^=</span> <span class="n">x</span>
		<span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">*</span><span class="p">(</span><span class="n">m</span> <span class="o">+</span> <span class="nc">LShR</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="nc">RotateLeft</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
		<span class="n">rv2</span> <span class="o">^=</span> <span class="n">y</span>
		<span class="n">rv1</span><span class="p">,</span> <span class="n">rv2</span> <span class="o">=</span> <span class="n">rv2</span><span class="p">,</span> <span class="n">rv1</span>
		<span class="n">rv1</span> <span class="o">=</span> <span class="nf">sub</span><span class="p">(</span><span class="n">rv1</span><span class="p">)</span>

	<span class="n">SBOX</span> <span class="o">=</span> <span class="nc">Array</span><span class="p">(</span><span class="s">'SBOX'</span><span class="p">,</span> <span class="nc">BitVecSort</span><span class="p">(</span><span class="mi">8</span><span class="p">),</span> <span class="nc">BitVecSort</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span>
	<span class="k">def</span> <span class="nf">sub</span><span class="p">(</span><span class="n">bitvec32</span><span class="p">):</span>
		<span class="n">vec_bytes</span> <span class="o">=</span> <span class="p">[</span><span class="nc">Extract</span><span class="p">(</span><span class="mi">8</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="o">*</span><span class="n">i</span><span class="p">,</span> <span class="n">bitvec32</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
		<span class="k">return</span> <span class="nc">Concat</span><span class="p">([</span><span class="n">SBOX</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">vec_bytes</span><span class="p">])</span>

	<span class="n">h</span> <span class="o">=</span> <span class="nf">simplify</span><span class="p">(</span><span class="n">rv1</span> <span class="o">+</span> <span class="mh">0x6276137d7</span><span class="p">)</span>
	<span class="n">subkey2</span> <span class="o">=</span> <span class="p">[</span><span class="nc">Extract</span><span class="p">(</span><span class="mi">8</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="o">*</span><span class="n">i</span><span class="p">,</span><span class="n">key2</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
	<span class="n">subkey2</span> <span class="o">=</span> <span class="p">[</span><span class="n">SBOX</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">subkey2</span><span class="p">]</span>
	<span class="n">subkey2</span> <span class="o">=</span> <span class="p">[</span><span class="nc">ZeroExt</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">subkey2</span><span class="p">]</span>

	<span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">d</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">subkey2</span><span class="p">):</span>
		<span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span><span class="o">&lt;&lt;</span><span class="mi">1</span><span class="p">)</span>
		<span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span><span class="o">&lt;&lt;</span><span class="mi">3</span><span class="p">)</span>
		<span class="n">c</span> <span class="o">=</span> <span class="nc">LShR</span><span class="p">(</span><span class="n">h</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
		<span class="n">h</span> <span class="o">^=</span> <span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">+</span><span class="n">c</span><span class="o">-</span><span class="n">d</span><span class="p">)</span>
		<span class="n">h</span> <span class="o">+=</span> <span class="n">h</span>
	<span class="n">h</span> <span class="o">^=</span> <span class="n">u</span><span class="o">*</span><span class="n">z</span>
	<span class="n">solver</span> <span class="o">=</span> <span class="nc">Solver</span><span class="p">()</span>
	<span class="n">solver</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">h</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
	<span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">sbox</span><span class="p">):</span> 
		<span class="n">solver</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">SBOX</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">v</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">solver</span><span class="p">.</span><span class="nf">check</span><span class="p">()</span> <span class="o">==</span> <span class="n">sat</span><span class="p">:</span>
		<span class="n">m</span> <span class="o">=</span> <span class="n">solver</span><span class="p">.</span><span class="nf">model</span><span class="p">()</span>
		<span class="nf">return </span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="n">key1</span><span class="p">].</span><span class="nf">as_long</span><span class="p">(),</span> <span class="n">m</span><span class="p">[</span><span class="n">key2</span><span class="p">].</span><span class="nf">as_long</span><span class="p">())</span>
</code></pre></div></div>

<p>Lets go!</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">message_one</span> <span class="o">=</span> <span class="s">"You don't have to add the z3 solver to your firmware ever </span><span class="se">\
</span><span class="s">               again. Now you can use it forever."</span>
<span class="n">key1</span><span class="p">,</span> <span class="n">key2</span> <span class="o">=</span> <span class="nf">hack_proof_of_work</span><span class="p">(</span><span class="n">message_one</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="https://media.giphy.com/media/hNGPQK5eGDzTW/giphy.gif" alt="two hours later" /></p>

<p>Well, no key yet?<br />
I know, lets discuss a few problems and workarounds</p>

<h3 id="too-complicated-model">Too complicated model</h3>
<ol>
  <li>Too many multiplications. There are 13 loops and a lot of multiplications. 
And as one may know, factoring has never been easy.</li>
  <li>We dont even have a tentative time by which the solver will spew a 
satisfying model. This is the general drawback of SMT/SAT solvers.</li>
  <li>Not breaking the problem as (an actually intelligent) human</li>
</ol>

<p>So lets analyze the problem carefully part by part.</p>

<h2 id="re-analysis">Re-analysis</h2>
<ol>
  <li>The final value is <code class="language-plaintext highlighter-rouge">h(final) = h(part 2)*u*z (part 1)</code> and we need it to be 0 
final <code class="language-plaintext highlighter-rouge">h</code> will be 0 if sum of least significant <code class="language-plaintext highlighter-rouge">0</code> of <code class="language-plaintext highlighter-rouge">h</code>, <code class="language-plaintext highlighter-rouge">u</code> and <code class="language-plaintext highlighter-rouge">z</code> exceeds</li>
  <li>
    <p>as overflows are ignored in 32-bit multiplication.</p>
  </li>
  <li>What if we can get <code class="language-plaintext highlighter-rouge">h</code> of <a href="#key2-loop">key2 loop</a> to 0 by its own?</li>
</ol>

<h3 id="reversing-only-key2-loop">Reversing only <a href="#key2-loop">key2 loop</a></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">hack_only_key2</span><span class="p">(</span><span class="n">h</span><span class="p">,</span><span class="n">nbits</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
    <span class="c1"># note its post substitution for less complexity and speed
</span>    <span class="c1"># nbits is the number of nonzero most significant bits we can tolerate
</span>    <span class="n">h</span> <span class="o">=</span> <span class="nc">BitVecVal</span><span class="p">(</span><span class="n">h</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span>
    <span class="n">key2</span> <span class="o">=</span> <span class="nc">BitVec</span><span class="p">(</span><span class="s">'key2'</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span>
    <span class="n">subkey2</span> <span class="o">=</span> <span class="p">[</span><span class="nc">Extract</span><span class="p">(</span><span class="mi">8</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="o">*</span><span class="n">i</span><span class="p">,</span><span class="n">key2</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
    <span class="n">subkey2</span> <span class="o">=</span> <span class="p">[</span><span class="nc">ZeroExt</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">subkey2</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">d</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">subkey2</span><span class="p">):</span>
        <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span><span class="o">&lt;&lt;</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span><span class="o">&lt;&lt;</span><span class="mi">3</span><span class="p">)</span>
        <span class="n">c</span> <span class="o">=</span> <span class="nc">LShR</span><span class="p">(</span><span class="n">h</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
        <span class="n">h</span> <span class="o">^=</span> <span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">+</span><span class="n">c</span><span class="o">-</span><span class="n">d</span><span class="p">)</span>
        <span class="n">h</span> <span class="o">+=</span> <span class="n">h</span>
    <span class="n">solver</span> <span class="o">=</span> <span class="nc">Solver</span><span class="p">()</span>
    <span class="c1"># solver.add(Extract(31-nbits,0,h)==0)
</span>    <span class="n">solver</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">h</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">solver</span><span class="p">.</span><span class="nf">check</span><span class="p">()</span> <span class="o">==</span> <span class="n">sat</span><span class="p">:</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">solver</span><span class="p">.</span><span class="nf">model</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">m</span><span class="p">[</span><span class="n">key2</span><span class="p">].</span><span class="nf">as_long</span><span class="p">()</span>

<span class="nf">print</span><span class="p">(</span><span class="nf">try_only_key2</span><span class="p">(</span><span class="mi">1337</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
<span class="c1"># None
</span><span class="nf">print</span><span class="p">(</span><span class="nf">try_only_key2</span><span class="p">(</span><span class="mi">1337</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
<span class="c1"># None
</span><span class="nf">print</span><span class="p">(</span><span class="nf">try_only_key2</span><span class="p">(</span><span class="mi">1337</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
<span class="c1"># None
</span><span class="nf">print</span><span class="p">(</span><span class="nf">try_only_key2</span><span class="p">(</span><span class="mi">1337</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
<span class="c1"># None
</span><span class="nf">print</span><span class="p">(</span><span class="nf">try_only_key2</span><span class="p">(</span><span class="mi">1337</span><span class="p">,</span><span class="mi">8</span><span class="p">))</span>
<span class="c1"># 1311637496
</span><span class="nf">print</span><span class="p">(</span><span class="nf">try_only_key2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
<span class="c1"># 75586596
</span><span class="nf">print</span><span class="p">(</span><span class="nf">try_only_key2</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
<span class="c1"># 276293996
</span><span class="nf">print</span><span class="p">(</span><span class="nf">try_only_key2</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
<span class="c1"># 283836416 
</span></code></pre></div></div>
<p>It seems to be working but only for a limited number of values, lets see how 
frequently can it work independent of <code class="language-plaintext highlighter-rouge">h</code> from first loop.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span>
<span class="kn">from</span> <span class="n">random</span> <span class="kn">import</span> <span class="n">randint</span>
<span class="n">num_samples</span> <span class="o">=</span> <span class="mi">4096</span>
<span class="n">validkey2</span> <span class="o">=</span> <span class="p">[</span><span class="nf">try_only_key2</span><span class="p">(</span><span class="nf">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">**</span><span class="mi">32</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="n">num_samples</span><span class="p">))]</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"Number of suitable h"</span><span class="p">,</span> <span class="n">num_samples</span><span class="o">-</span><span class="n">validkey2</span><span class="p">.</span><span class="nf">count</span><span class="p">(</span><span class="bp">None</span><span class="p">))</span>
<span class="c1"># 5
</span><span class="n">validkey2</span> <span class="o">=</span> <span class="p">[</span><span class="nf">try_only_key2</span><span class="p">(</span><span class="nf">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">**</span><span class="mi">32</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="n">num_samples</span><span class="p">))]</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"Number of suitable h"</span><span class="p">,</span> <span class="n">num_samples</span><span class="o">-</span><span class="n">validkey2</span><span class="p">.</span><span class="nf">count</span><span class="p">(</span><span class="bp">None</span><span class="p">))</span>
<span class="c1"># 11
</span><span class="n">validkey2</span> <span class="o">=</span> <span class="p">[</span><span class="nf">try_only_key2</span><span class="p">(</span><span class="nf">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">**</span><span class="mi">32</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="n">num_samples</span><span class="p">))]</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"Number of suitable h"</span><span class="p">,</span> <span class="n">num_samples</span><span class="o">-</span><span class="n">validkey2</span><span class="p">.</span><span class="nf">count</span><span class="p">(</span><span class="bp">None</span><span class="p">))</span>
<span class="c1"># 72
</span></code></pre></div></div>

<p>It appears that if we entirely ignore <code class="language-plaintext highlighter-rouge">key1</code>, and let <code class="language-plaintext highlighter-rouge">h</code> be whatever it<br />
desires to be i.e. random, we can have our luck with finding <code class="language-plaintext highlighter-rouge">key2</code> with<br />
roughly 1 in 400 chance (ignoring the zeros for <code class="language-plaintext highlighter-rouge">u*z</code> entirely)</p>

<p>So we can bruteforce for <code class="language-plaintext highlighter-rouge">key1</code>, try solving for <code class="language-plaintext highlighter-rouge">key2</code> and this should<br />
take a couple of seconds and lo we are done.</p>

<h2 id="solve-script"><a href="./solve.py">Solve Script</a></h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">zerocount</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">num</span><span class="o">&amp;</span><span class="mi">1</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
        <span class="n">count</span><span class="o">+=</span><span class="mi">1</span>
        <span class="n">num</span><span class="o">&gt;&gt;=</span><span class="mi">1</span>
    <span class="k">return</span> <span class="n">count</span>

<span class="k">def</span> <span class="nf">form_blocks</span><span class="p">(</span><span class="n">block</span><span class="p">):</span>
    <span class="s">"""making bruteforce faster by removing recomputation of md5"""</span>
    <span class="n">block</span> <span class="o">=</span> <span class="nf">md5</span><span class="p">(</span><span class="n">block</span><span class="p">.</span><span class="nf">encode</span><span class="p">()).</span><span class="nf">digest</span><span class="p">()</span>
    <span class="n">block</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">block</span>
    <span class="n">blocks</span> <span class="o">=</span> <span class="p">[</span><span class="nf">bytes_to_long</span><span class="p">(</span><span class="n">block</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">4</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">block</span><span class="p">),</span> <span class="mi">4</span><span class="p">)]</span>
    <span class="k">return</span> <span class="n">blocks</span>


<span class="k">def</span> <span class="nf">phashk1</span><span class="p">(</span><span class="n">blocks</span><span class="p">,</span> <span class="n">key1</span><span class="p">):</span>
    <span class="s">"""hash state till key1 part and before key2 substitution"""</span>
    <span class="n">m</span> <span class="o">=</span> <span class="mh">0xffffffff</span>
    <span class="n">rv1</span><span class="p">,</span> <span class="n">rv2</span> <span class="o">=</span> <span class="mh">0x2423380b4d045</span><span class="p">,</span> <span class="mh">0x3b30fa7ccaa83</span>
    <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">u</span> <span class="o">=</span> <span class="n">key1</span><span class="p">,</span> <span class="mh">0x39ef52e9f30b3</span><span class="p">,</span> <span class="mh">0x253ea615d0215</span><span class="p">,</span> <span class="mh">0x2cd1372d21d77</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">13</span><span class="p">):</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">x</span><span class="p">,</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">^</span> <span class="n">y</span>
        <span class="n">z</span><span class="p">,</span> <span class="n">u</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">^</span> <span class="n">z</span><span class="p">,</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="o">^</span> <span class="n">u</span>
        <span class="n">rv1</span> <span class="o">^=</span> <span class="p">(</span><span class="n">x</span> <span class="p">:</span><span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">&amp;</span> <span class="n">m</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">m</span> <span class="o">+</span> <span class="p">(</span><span class="n">y</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="nf">rotl</span><span class="p">(</span><span class="n">z</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
        <span class="n">rv2</span> <span class="o">^=</span> <span class="p">(</span><span class="n">y</span> <span class="p">:</span><span class="o">=</span> <span class="p">(</span><span class="n">y</span> <span class="o">&amp;</span> <span class="n">m</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">m</span> <span class="o">+</span> <span class="p">(</span><span class="n">z</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="nf">rotl</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
        <span class="n">rv1</span><span class="p">,</span> <span class="n">rv2</span> <span class="o">=</span> <span class="n">rv2</span><span class="p">,</span> <span class="n">rv1</span>
        <span class="n">rv1</span> <span class="o">=</span> <span class="nf">sub</span><span class="p">(</span><span class="n">rv1</span><span class="p">)</span>
        <span class="n">rv1</span> <span class="o">=</span> <span class="nf">bytes_to_long</span><span class="p">(</span><span class="n">rv1</span><span class="p">)</span>
    <span class="n">h</span> <span class="o">=</span> <span class="n">rv1</span> <span class="o">+</span> <span class="mh">0x6276137d7</span> <span class="o">&amp;</span> <span class="n">m</span>
    <span class="c1"># also return the number of zeros in u*z so our model finds it easier
</span>    <span class="k">return</span> <span class="n">h</span><span class="p">,</span><span class="nf">zerocount</span><span class="p">(</span><span class="n">u</span><span class="o">*</span><span class="n">z</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">desubstitute</span><span class="p">(</span><span class="n">key2</span><span class="p">):</span>
    <span class="s">"""reverse the substitution on the found key2"""</span>
    <span class="c1"># we could have added the substitution to the model too, but since we
</span>    <span class="c1"># are bruteforcing, we appreciate a bit of extra speed
</span>    <span class="k">return</span> <span class="nf">bytes</span><span class="p">([</span><span class="n">sbox</span><span class="p">.</span><span class="nf">index</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">int</span><span class="p">.</span><span class="nf">to_bytes</span><span class="p">(</span><span class="n">key2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="s">'big'</span><span class="p">)])</span>

<span class="k">def</span> <span class="nf">bruteforce_key1</span><span class="p">(</span><span class="n">block</span><span class="p">):</span>
    <span class="n">blocks</span> <span class="o">=</span> <span class="nf">form_blocks</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">key1</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">32</span><span class="p">),</span><span class="n">total</span><span class="o">=-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">h</span><span class="p">,</span> <span class="n">nbits</span> <span class="o">=</span> <span class="nf">phashk1</span><span class="p">(</span><span class="n">blocks</span><span class="p">,</span> <span class="n">key1</span><span class="p">)</span>
        <span class="n">key2</span> <span class="o">=</span> <span class="nf">try_only_key2</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">nbits</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">key2</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">key1</span><span class="p">,</span> <span class="nf">desubstitute</span><span class="p">(</span><span class="n">key2</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="final-test">Final Test</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">message_one</span> <span class="o">=</span> <span class="s">"You don't have to add the z3 solver to your firmware ever </span><span class="se">\
</span><span class="s">               again. Now you can use it forever."</span>
<span class="n">key1</span><span class="p">,</span> <span class="n">key2</span> <span class="o">=</span> <span class="nf">bruteforce_key1</span><span class="p">(</span><span class="n">message_one</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">key1</span><span class="o">=</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">key2</span><span class="o">=</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">assert</span> <span class="nf">phash</span><span class="p">(</span><span class="n">message_one</span><span class="p">,</span> <span class="n">key1</span><span class="p">,</span> <span class="n">key2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
<span class="c1"># 909it [00:16, 54.92it/s]
# key1=909 key2=3711505522
</span></code></pre></div></div>

<h2 id="post-solve-wanderings">Post solve wanderings</h2>
<p>I solved the challenge manually by prompting bruteforce 4 times. I wanted to 
create a netcat script, but couldn’t as Hack The Box terminated all instances<br />
post the CTFs so I cant access the server.</p>

<p>I wonder why is there an uncanny resemblance between the hash function and 
a hash collision challenge I created last year for zh3r0 CTF v2</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">.</span><span class="nf">from_bytes</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">4</span><span class="p">],</span><span class="s">'big'</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nf">len</span><span class="p">(</span><span class="n">text</span><span class="p">),</span><span class="mi">4</span><span class="p">)]</span>
<span class="n">M</span> <span class="o">=</span> <span class="mh">0xffff</span>
<span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">,</span><span class="n">u</span> <span class="o">=</span> <span class="mh">0x0124fdce</span><span class="p">,</span> <span class="mh">0x89ab57ea</span><span class="p">,</span> <span class="mh">0xba89370a</span><span class="p">,</span> <span class="mh">0xfedc45ef</span>
<span class="n">A</span><span class="p">,</span><span class="n">B</span><span class="p">,</span><span class="n">C</span><span class="p">,</span><span class="n">D</span> <span class="o">=</span> <span class="mh">0x401ab257</span><span class="p">,</span> <span class="mh">0xb7cd34e1</span><span class="p">,</span> <span class="mh">0x76b3a27c</span><span class="p">,</span> <span class="mh">0xf13c3adf</span>
<span class="n">RV1</span><span class="p">,</span><span class="n">RV2</span><span class="p">,</span><span class="n">RV3</span><span class="p">,</span><span class="n">RV4</span> <span class="o">=</span> <span class="mh">0xe12f23cd</span><span class="p">,</span> <span class="mh">0xc5ab6789</span><span class="p">,</span> <span class="mh">0xf1234567</span><span class="p">,</span> <span class="mh">0x9a8bc7ef</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nf">len</span><span class="p">(</span><span class="n">text</span><span class="p">),</span><span class="mi">4</span><span class="p">):</span>
	<span class="n">X</span><span class="p">,</span><span class="n">Y</span><span class="p">,</span><span class="n">Z</span><span class="p">,</span><span class="n">U</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">^</span><span class="n">x</span><span class="p">,</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">^</span><span class="n">y</span><span class="p">,</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">^</span><span class="n">z</span><span class="p">,</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">^</span><span class="n">u</span>
	<span class="n">RV1</span> <span class="o">^=</span> <span class="p">(</span><span class="n">x</span> <span class="p">:</span><span class="o">=</span> <span class="p">(</span><span class="n">X</span><span class="o">&amp;</span><span class="mh">0xffff</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">M</span> <span class="o">-</span> <span class="p">(</span><span class="n">Y</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="nc">ROTL</span><span class="p">(</span><span class="n">Z</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">^</span> <span class="nc">ROTR</span><span class="p">(</span><span class="n">U</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">^</span> <span class="n">A</span><span class="p">)</span>
	<span class="n">RV2</span> <span class="o">^=</span> <span class="p">(</span><span class="n">y</span> <span class="p">:</span><span class="o">=</span> <span class="p">(</span><span class="n">Y</span><span class="o">&amp;</span><span class="mh">0xffff</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">M</span> <span class="o">-</span> <span class="p">(</span><span class="n">Z</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="nc">ROTL</span><span class="p">(</span><span class="n">U</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="o">^</span> <span class="nc">ROTR</span><span class="p">(</span><span class="n">X</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="o">^</span> <span class="n">B</span><span class="p">)</span>
	<span class="n">RV3</span> <span class="o">^=</span> <span class="p">(</span><span class="n">z</span> <span class="p">:</span><span class="o">=</span> <span class="p">(</span><span class="n">Z</span><span class="o">&amp;</span><span class="mh">0xffff</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">M</span> <span class="o">-</span> <span class="p">(</span><span class="n">U</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="nc">ROTL</span><span class="p">(</span><span class="n">X</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="o">^</span> <span class="nc">ROTR</span><span class="p">(</span><span class="n">Y</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="o">^</span> <span class="n">C</span><span class="p">)</span>
	<span class="n">RV4</span> <span class="o">^=</span> <span class="p">(</span><span class="n">u</span> <span class="p">:</span><span class="o">=</span> <span class="p">(</span><span class="n">U</span><span class="o">&amp;</span><span class="mh">0xffff</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">M</span> <span class="o">-</span> <span class="p">(</span><span class="n">X</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="nc">ROTL</span><span class="p">(</span><span class="n">Y</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span> <span class="o">^</span> <span class="nc">ROTR</span><span class="p">(</span><span class="n">Z</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span> <span class="o">^</span> <span class="n">D</span><span class="p">)</span>
</code></pre></div></div>

<p>Anyways, it was a fun challenge, I had a lot of fun and hope that some 
weird soul had its fun too reading this writeup :)</p>]]></content><author><name>deuterium</name><email>farziemailid69@gmail.com</email></author><category term="HTB" /><category term="2022" /><category term="cyber_apocalypse" /><category term="cryptography" /><category term="hashcollision" /><category term="z3" /><category term="cryptanalysis" /><category term="netcat" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">SDCTF 2022 Crypto - Tasty Crypto Roll</title><link href="https://deut-erium.github.io/WriteUps/2022/sdctf/crypto/tasty_crypto_roll/2022-05-10-SDCTF-2022-Tasty-Crypto-Roll" rel="alternate" type="text/html" title="SDCTF 2022 Crypto - Tasty Crypto Roll" /><published>2022-05-10T00:00:00+05:30</published><updated>2022-05-10T00:00:00+05:30</updated><id>https://deut-erium.github.io/WriteUps/2022/sdctf/crypto/tasty_crypto_roll/SDCTF-2022-Tasty-Crypto-Roll</id><content type="html" xml:base="https://deut-erium.github.io/WriteUps/2022/sdctf/crypto/tasty_crypto_roll/2022-05-10-SDCTF-2022-Tasty-Crypto-Roll"><![CDATA[<!--more-->

<h1 id="tasty-crypto-roll">Tasty Crypto Roll</h1>
<h2 id="description">Description</h2>
<blockquote>
  <p>CRYPTO - Hard <br />
Tasty Crypto Roll<br />
Bob, the genius intern at our company, invented AES-improved. It is based on AES but with layers after layers of proprietary encryption techniques on top of it.</p>

  <p>The end result is an encryption scheme that achieves both confusion and diffusion. The more layers of crypto you add, the better the security, right?</p>

  <p>Encrypter<br />
<a href="./encrypt.py">encrypt.py</a><br />
Encrypted file<br />
<a href="./enc.bin">enc.bin</a><br />
Note<br />
The intended solution requires very little brute force and runs under 5 seconds on our machine.<br />
By k3v1n</p>

</blockquote>

<h2 id="source">Source</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">random</span>
<span class="kn">import</span> <span class="n">secrets</span>
<span class="kn">import</span> <span class="n">sys</span>
<span class="kn">from</span> <span class="n">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>

<span class="n">ENCODING</span> <span class="o">=</span> <span class="s">'utf-8'</span>

<span class="k">def</span> <span class="nf">generate_key</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">os</span><span class="p">.</span><span class="nf">getpid</span><span class="p">(),</span> <span class="n">secrets</span><span class="p">.</span><span class="nf">token_bytes</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">to_binary</span><span class="p">(</span><span class="n">b</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">):</span>
    <span class="k">return</span> <span class="s">''</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="s">'{:08b}'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">b</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">from_binary</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">bytes</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">8</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="mi">8</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">message</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">):</span>
    <span class="n">cipher</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_ECB</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">cipher</span><span class="p">.</span><span class="nf">encrypt</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>

<span class="n">key1</span><span class="p">,</span> <span class="n">key2</span> <span class="o">=</span> <span class="nf">generate_key</span><span class="p">()</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Using Key:</span><span class="se">\n</span><span class="si">{</span><span class="n">key1</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">key2</span><span class="p">.</span><span class="nf">hex</span><span class="p">()</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">get_flag</span><span class="p">():</span>
    <span class="n">flag</span> <span class="o">=</span> <span class="nf">input</span><span class="p">(</span><span class="s">'Enter the flag to encrypt: '</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">flag</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="s">'sdctf{'</span><span class="p">)</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">flag</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="s">'}'</span><span class="p">)</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">flag</span><span class="p">.</span><span class="nf">isascii</span><span class="p">():</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">flag</span><span class="si">}</span><span class="s"> is not a valid flag for this challenge'</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">flag</span>

<span class="n">plaintext</span> <span class="o">=</span> <span class="nf">get_flag</span><span class="p">()[</span><span class="mi">6</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">plaintext</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="n">ENCODING</span><span class="p">)</span>

<span class="n">codes</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="s">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">chr</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mh">0xb0</span><span class="p">,</span> <span class="mh">0x1b0</span><span class="p">)))</span>
<span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span>
<span class="n">random</span><span class="p">.</span><span class="nf">shuffle</span><span class="p">(</span><span class="n">codes</span><span class="p">)</span>
<span class="n">sboxes</span> <span class="o">=</span> <span class="p">[</span><span class="s">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">codes</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="p">:(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">128</span><span class="p">)]</span>

<span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">sboxes</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">128</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Bad key, try again"</span><span class="p">)</span>
    <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

<span class="n">data</span> <span class="o">=</span> <span class="s">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">sboxes</span><span class="p">[</span><span class="n">c</span><span class="p">]</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">data</span><span class="p">).</span><span class="nf">encode</span><span class="p">(</span><span class="n">ENCODING</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">key2</span><span class="p">,</span> <span class="nf">to_binary</span><span class="p">(</span><span class="n">data</span><span class="p">).</span><span class="nf">encode</span><span class="p">(</span><span class="n">ENCODING</span><span class="p">))</span>

<span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span>
<span class="n">key_final</span> <span class="o">=</span> <span class="nf">bytes</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="nf">randrange</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">16</span><span class="p">))</span>

<span class="n">data_bits</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">to_binary</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
<span class="n">random</span><span class="p">.</span><span class="nf">shuffle</span><span class="p">(</span><span class="n">data_bits</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="nf">from_binary</span><span class="p">(</span><span class="s">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_bits</span><span class="p">))</span>

<span class="n">ciphertext</span> <span class="o">=</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">key_final</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Encrypted: </span><span class="si">{</span><span class="n">ciphertext</span><span class="p">.</span><span class="nf">hex</span><span class="p">()</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="s">'enc.bin2'</span><span class="p">,</span> <span class="s">'wb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">ef</span><span class="p">:</span>
    <span class="n">ef</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="analysis">Analysis</h2>
<p>Here we can see mainly two parts</p>
<ol>
  <li>There are two keys
    <ul>
      <li><code class="language-plaintext highlighter-rouge">key1</code>: pid of current process</li>
      <li><code class="language-plaintext highlighter-rouge">key2</code>: secure random key of 16 bytes</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">key1</code> is used as seed at a lot of places and is bruteforcable (&lt; 2^15)
<code class="language-plaintext highlighter-rouge">key_final</code> and <code class="language-plaintext highlighter-rouge">sboxes</code> are derived from <code class="language-plaintext highlighter-rouge">key1</code>, shuffling is done using <code class="language-plaintext highlighter-rouge">key1</code></li>
</ol>

<h3 id="steps-to-crack">Steps to crack</h3>
<ol>
  <li>decrypt using <code class="language-plaintext highlighter-rouge">key_final</code></li>
  <li>convert the intermediate ciphertext <code class="language-plaintext highlighter-rouge">to_binary</code></li>
  <li>de-shuffle the bits</li>
  <li>generate <code class="language-plaintext highlighter-rouge">from_binary</code> intermediate ciphertext of the deshuffled bits</li>
  <li>decrypt using <code class="language-plaintext highlighter-rouge">key2</code>???</li>
</ol>

<h3 id="how-to-find-key1">How to find <code class="language-plaintext highlighter-rouge">key1</code>?</h3>
<p>Assume you have the correct <code class="language-plaintext highlighter-rouge">key1</code>, reverse for the key, validate the results <br />
using some validator/logical assumption.</p>

<p><code class="language-plaintext highlighter-rouge">codes</code> is a list of <code class="language-plaintext highlighter-rouge">2*(0x1b0-0xb0)</code> = <code class="language-plaintext highlighter-rouge">512</code> characters, utf-8 encoding of
which is 2-bytes each <br />
<code class="language-plaintext highlighter-rouge">sboxes</code> will have 4char strings, which encode to 8 bytes each on utf-8 (i.e
        after substitution)<br />
<code class="language-plaintext highlighter-rouge">data</code> is now <code class="language-plaintext highlighter-rouge">4*2 = 8</code> times each byte of the original plaintext<br />
<code class="language-plaintext highlighter-rouge">data</code> is converted <code class="language-plaintext highlighter-rouge">to_binary</code> before encryption hence each byte is converted<br />
to 8 <code class="language-plaintext highlighter-rouge">b"0"</code> or <code class="language-plaintext highlighter-rouge">b"1"</code> byte. Hence each character is substituted to some<br />
<code class="language-plaintext highlighter-rouge">8*8 = 64</code> byte string before encryption.<br />
Hence len of flag = <code class="language-plaintext highlighter-rouge">len(ciphertext)//64</code> = <code class="language-plaintext highlighter-rouge">3520//64 = 55</code> bytes</p>

<h4 id="assumption-1">Assumption 1</h4>
<p>Since length of flag is 55 characters, would it be reasonable to assume that<br />
there would be repeatitions of characters. And since each flag character is<br />
substituted to fixed 64-byte strings before encryption which is a multiple<br />
of AES block size of 16, AES also acts like simple substitution of the flag<br />
but we do not know the mapping.<br />
Hence if we reverse till step 4 above, we can simply check if there are any<br />
repeating 64-byte blocks, as incorrect shuffling of bits will result in each 
block to be distinct with almost 1 probability.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="s">'enc.bin'</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">ciphertext</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">to_binary</span><span class="p">(</span><span class="n">b</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">):</span>
    <span class="k">return</span> <span class="s">''</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="s">'{:08b}'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">b</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">from_binary</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">bytes</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">8</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="mi">8</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">AES</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_ECB</span><span class="p">).</span><span class="nf">encrypt</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">message</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">AES</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_ECB</span><span class="p">).</span><span class="nf">decrypt</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">unshuffle</span><span class="p">(</span><span class="n">data_list</span><span class="p">,</span> <span class="n">shuffle_order</span><span class="p">):</span>
    <span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span><span class="o">*</span><span class="nf">len</span><span class="p">(</span><span class="n">data_list</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">shuffle_order</span><span class="p">):</span>
        <span class="n">res</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">data_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">res</span>

<span class="k">def</span> <span class="nf">key_final_dec</span><span class="p">(</span><span class="n">key1</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">):</span>
    <span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span>
    <span class="n">key_final</span> <span class="o">=</span> <span class="nf">bytes</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="nf">randrange</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">16</span><span class="p">))</span>

    <span class="n">data</span> <span class="o">=</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">key_final</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">)</span>
    <span class="n">data_bits</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">to_binary</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
    <span class="n">data_bits_order</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">data_bits</span><span class="p">)))</span>
    <span class="n">random</span><span class="p">.</span><span class="nf">shuffle</span><span class="p">(</span><span class="n">data_bits_order</span><span class="p">)</span>
    <span class="n">data_bits_uns</span> <span class="o">=</span> <span class="nf">unshuffle</span><span class="p">(</span><span class="n">data_bits</span><span class="p">,</span> <span class="n">data_bits_order</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nf">from_binary</span><span class="p">(</span><span class="s">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_bits_uns</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">data</span>
</code></pre></div></div>

<p>Lets add a few validation too</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">key_final_enc</span><span class="p">(</span><span class="n">key1</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span>
    <span class="n">key_final</span> <span class="o">=</span> <span class="nf">bytes</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="nf">randrange</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">16</span><span class="p">))</span>
    <span class="n">data_bits</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">to_binary</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
    <span class="n">random</span><span class="p">.</span><span class="nf">shuffle</span><span class="p">(</span><span class="n">data_bits</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nf">from_binary</span><span class="p">(</span><span class="s">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_bits</span><span class="p">))</span>
    <span class="k">return</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">key_final</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">test_unshuffle</span><span class="p">():</span>
    <span class="n">random_text</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="nf">randbytes</span><span class="p">(</span><span class="mi">16</span><span class="o">*</span><span class="mi">1337</span><span class="p">))</span>
    <span class="n">random_text_shuffled</span> <span class="o">=</span> <span class="n">random_text</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
    <span class="n">shuffle_order</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">random_text</span><span class="p">)))</span>
    <span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="mi">1337</span><span class="p">)</span>
    <span class="n">random</span><span class="p">.</span><span class="nf">shuffle</span><span class="p">(</span><span class="n">random_text_shuffled</span><span class="p">)</span>
    <span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="mi">1337</span><span class="p">)</span>
    <span class="n">random</span><span class="p">.</span><span class="nf">shuffle</span><span class="p">(</span><span class="n">shuffle_order</span><span class="p">)</span>
    <span class="k">assert</span> <span class="nf">unshuffle</span><span class="p">(</span><span class="n">random_text_shuffled</span><span class="p">,</span> <span class="n">shuffle_order</span><span class="p">)</span> <span class="o">==</span> <span class="n">random_text</span>

<span class="k">def</span> <span class="nf">test_key_final_dec</span><span class="p">():</span>
    <span class="n">random_text</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="nf">randbytes</span><span class="p">(</span><span class="mi">16</span><span class="o">*</span><span class="mi">100</span><span class="p">)</span>
    <span class="k">assert</span> <span class="nf">key_final_dec</span><span class="p">(</span><span class="mi">1337</span><span class="p">,</span> <span class="nf">key_final_enc</span><span class="p">(</span><span class="mi">1337</span><span class="p">,</span> <span class="n">random_text</span><span class="p">))</span> <span class="o">==</span> <span class="n">random_text</span>

<span class="nf">test_unshuffle</span><span class="p">()</span>
<span class="nf">test_key_final_dec</span><span class="p">()</span>
</code></pre></div></div>
<p>Looks like all the decryption functions are correct, lets proceed with<br />
bruteforcing for <code class="language-plaintext highlighter-rouge">key1</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">key1</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">15</span><span class="p">),</span><span class="n">desc</span><span class="o">=</span><span class="s">'solving for key1'</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nf">key_final_dec</span><span class="p">(</span><span class="n">key1</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">)</span>
    <span class="n">substitutions</span> <span class="o">=</span> <span class="nc">Counter</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">64</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span><span class="mi">64</span><span class="p">))</span>
    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">substitutions</span><span class="p">)</span><span class="o">!=</span><span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">//</span><span class="mi">64</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"pid ="</span><span class="p">,</span><span class="n">key1</span><span class="p">)</span>
        <span class="k">break</span>
</code></pre></div></div>
<p>After waiting for an eternity, and exhausting the search space of possible pid’s<br />
yet not getting any <code class="language-plaintext highlighter-rouge">key1</code> got me confused. I checked my script locally for a <br />
test flag it seemed to work fine. There could only be one possibility <br />
<strong>the flag contains 55 distinct characters</strong><br />
But how would I find <code class="language-plaintext highlighter-rouge">key1</code> now?</p>

<h4 id="missed-catch">Missed Catch</h4>
<p>@Utaha#6878 pointed out, that since there are only 256 distinct values in
<code class="language-plaintext highlighter-rouge">codes</code> each repeated twice, and each character encoded to some <code class="language-plaintext highlighter-rouge">b"0"</code> or <code class="language-plaintext highlighter-rouge">b"1"</code><br />
byte strings of length 16, It must be encrypted to the same block always.<br />
Since the flag is <code class="language-plaintext highlighter-rouge">55*4 = 220</code> such 16-byte codes and each code is used twice<br />
for most of the characters, there will be repating 16-byte blocks even with <br />
distinct flag characters.</p>

<h4 id="assumption-2">Assumption 2</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">key1</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">15</span><span class="p">),</span><span class="n">desc</span><span class="o">=</span><span class="s">'solving for key1'</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nf">key_final_dec</span><span class="p">(</span><span class="n">key1</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">)</span>
    <span class="n">substitutions</span> <span class="o">=</span> <span class="nc">Counter</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">16</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span><span class="mi">16</span><span class="p">))</span>
    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">substitutions</span><span class="p">)</span><span class="o">!=</span><span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">//</span><span class="mi">16</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"pid ="</span><span class="p">,</span><span class="n">key1</span><span class="p">)</span>
        <span class="k">break</span>
</code></pre></div></div>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">pid = 83</code></p>
</blockquote>

<p>And we found our <code class="language-plaintext highlighter-rouge">key1</code>!<br />
And we can confirm that the flag is indeed 55 distinct characters.</p>

<p>Wait, if the flag is 55 distinct characters, how will we solve for the subs?<br />
We have no statistical advantage and hence bye bye Mr 
<a href="https://quipqiup.com/">quipquip</a></p>

<h3 id="how-do-we-find-mapping-for-substitution">How do we find mapping for substitution?</h3>
<p>Each <code class="language-plaintext highlighter-rouge">sbox</code> entry is composed of 4 2-byte strings, which can be one of 256<br />
possible values. Moreover, their order is fixed, which is determined by <code class="language-plaintext highlighter-rouge">key1</code>.</p>

<p>If we try to solve for all valid mappings for <code class="language-plaintext highlighter-rouge">AES(binary(sbox(char)))</code> we will
probably end up on the correct mapping and get our flag.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+---------------+---------------+------------------------+---------------+
|flag0          |    flag1      |                        |   flag55      |
+---------------+---------------+         ....           +---------------+
|  sbox         |   sbox        |                        |    sbox       |
+---+---+---+---+---+---+---+---+------------------------+---------------+
|c1 |c2 |c3 |c4 |c5 |c6 |c7 |c8 |                        |               |
|   |   |   |   |   |   |   |   |                        |               |
+---+---+---+---+---+---+---+---+         ....           +---------------+
|   AES         |    AES        |                        |               |
+---+---+-------+---------------+------------------------+---------------+
|   |   +------+                                                          
|   +--+       |                                                          
+------+-------+-------+------+                                           
|E(c1) | E(c2) | E(c3) | E(c4)|                                             
+------+-------+-------+------+   
</code></pre></div></div>

<h3 id="enter-z3">Enter Z3</h3>
<p>We can assume our flag to be a list of <code class="language-plaintext highlighter-rouge">BitVec</code> of 7 bits each<br />
And let the sboxes be a mapping from 7 bits to 64 bits each (16x4)<br />
This can be achieved by assuming sbox to be an array which is indexed<br />
by <code class="language-plaintext highlighter-rouge">BitVec(7)</code> and contains elements of <code class="language-plaintext highlighter-rouge">BitVec(64)</code><br />
And we assume AES to be some function form <code class="language-plaintext highlighter-rouge">BitVec(16)</code> to <code class="language-plaintext highlighter-rouge">BitVec(128)</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">flag</span> <span class="o">=</span> <span class="p">[</span><span class="nc">BitVec</span><span class="p">(</span><span class="s">'flag_'</span><span class="o">+</span><span class="nf">str</span><span class="p">(</span><span class="n">i</span><span class="p">),</span><span class="mi">7</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">//</span><span class="mi">64</span><span class="p">)]</span>
<span class="n">sboxmap</span> <span class="o">=</span> <span class="nc">Array</span><span class="p">(</span><span class="s">'sbox'</span><span class="p">,</span><span class="nc">BitVecSort</span><span class="p">(</span><span class="mi">7</span><span class="p">),</span> <span class="nc">BitVecSort</span><span class="p">(</span><span class="mi">64</span><span class="p">))</span>
<span class="n">aes_encryption</span> <span class="o">=</span> <span class="nc">Function</span><span class="p">(</span><span class="s">'AES'</span><span class="p">,</span><span class="nc">BitVecSort</span><span class="p">(</span><span class="mi">16</span><span class="p">),</span> <span class="nc">BitVecSort</span><span class="p">(</span><span class="mi">128</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">codes</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="s">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">chr</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mh">0xb0</span><span class="p">,</span> <span class="mh">0x1b0</span><span class="p">)))</span>
<span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span>
<span class="n">random</span><span class="p">.</span><span class="nf">shuffle</span><span class="p">(</span><span class="n">codes</span><span class="p">)</span>
<span class="c1"># keeping sboxes utf encoded already
</span><span class="n">sboxes</span> <span class="o">=</span> <span class="p">[</span><span class="s">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">codes</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="p">:(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">]).</span><span class="nf">encode</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">128</span><span class="p">)]</span>

<span class="n">sbytes</span> <span class="o">=</span> <span class="sa">b</span><span class="s">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">sboxes</span><span class="p">)</span>
<span class="n">sboxints</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="nb">int</span><span class="p">.</span><span class="nf">from_bytes</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="s">'big'</span><span class="p">),</span>
            <span class="nf">set</span><span class="p">(</span><span class="n">sbytes</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nf">len</span><span class="p">(</span><span class="n">sbytes</span><span class="p">),</span><span class="mi">2</span><span class="p">))))</span>
<span class="c1"># integer values for 2-byte codes from sbox, will be explained shortly
</span>
<span class="n">sboxes</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">.</span><span class="nf">from_bytes</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="s">'big'</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">sboxes</span><span class="p">]</span>
<span class="n">data</span> <span class="o">=</span> <span class="nf">key_final_dec</span><span class="p">(</span><span class="n">key1</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">)</span>
<span class="c1"># converting intermediate decryption to 128 bit ints
</span><span class="n">data_int</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span><span class="mi">16</span><span class="p">):</span>
    <span class="n">data_int</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nb">int</span><span class="p">.</span><span class="nf">from_bytes</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">16</span><span class="p">],</span><span class="s">'big'</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># we know the sbox already
</span><span class="n">constraints</span> <span class="o">=</span> <span class="p">[</span><span class="n">sboxmap</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">sboxes</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">128</span><span class="p">)]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">//</span><span class="mi">64</span><span class="p">):</span>
    <span class="n">four_code</span> <span class="o">=</span> <span class="n">sboxmap</span><span class="p">[</span><span class="n">flag</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span>
    <span class="c1"># splitting 64 bit quantity to 16 bit individual sbox codes
</span>    <span class="n">four_code_parts</span> <span class="o">=</span> <span class="p">[</span><span class="nc">Extract</span><span class="p">(</span><span class="mi">16</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">15</span><span class="p">,</span><span class="mi">16</span><span class="o">*</span><span class="n">i</span><span class="p">,</span><span class="n">four_code</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
    <span class="c1"># for each code, matching aes_encryption with the observed value
</span>    <span class="k">for</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">data_int</span><span class="p">[</span><span class="mi">4</span><span class="o">*</span><span class="n">i</span><span class="p">:</span><span class="mi">4</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">4</span><span class="p">],</span> <span class="n">four_code_parts</span><span class="p">):</span>
        <span class="n">constraints</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">aes_encryption</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="o">==</span><span class="n">a</span><span class="p">)</span>
    <span class="c1"># last but not least, aes_encryption(i) is unique for each plaintext
</span>    <span class="c1"># how would z3 know? Distinct function encodes them appropriately to
</span>    <span class="c1"># be distinct
</span>    <span class="n">constraints</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Distinct</span><span class="p">([</span><span class="nf">aes_encryption</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">sboxints</span><span class="p">]))</span>

<span class="n">solver</span> <span class="o">=</span> <span class="nc">Solver</span><span class="p">()</span>
<span class="n">solver</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">constraints</span><span class="p">)</span>
<span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="nf">all_smt</span><span class="p">(</span><span class="n">solver</span><span class="p">,</span> <span class="n">flag</span><span class="p">):</span>
    <span class="c1"># lets check for all satisfying flags (in case there are more than one
</span>    <span class="c1"># possible mappings and we will rule out invalid ones in that scenario?
</span>    <span class="n">flag_bytes</span> <span class="o">=</span> <span class="nf">bytes</span><span class="p">([</span><span class="n">m</span><span class="p">.</span><span class="nf">eval</span><span class="p">(</span><span class="n">flag</span><span class="p">[</span><span class="n">i</span><span class="p">]).</span><span class="nf">as_long</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">flag</span><span class="p">))])</span>
    <span class="k">assert</span> <span class="nf">len</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">flag_bytes</span><span class="p">))</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span><span class="nc">Counter</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">64</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span><span class="mi">64</span><span class="p">)))</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">flag_bytes</span><span class="p">)</span> 
</code></pre></div></div>

<h2 id="flag">Flag</h2>
<p>After running the script, we finally get our flag!</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">b'r0l1-uR~pWn.c6yPtO_wi7h,ECB:I5*b8d!KQvJmLxgX9DsaANMFSeU'</code></p>
</blockquote>

<p>And it turns out to be the only satisfying assignment.<br />
Turns out if there were repeated characters in the flag, we will get multiple<br />
possible satisfying values. So the admins have not been so cheeky afterall</p>

<h2 id="full-script">Full <a href="./solve.py">script</a></h2>
<p>Note that it takes a couple of seconds to find the z3 model</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">random</span>
<span class="kn">from</span> <span class="n">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
<span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
<span class="kn">from</span> <span class="n">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span>
<span class="kn">from</span> <span class="n">z3</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="n">sys</span>


<span class="k">def</span> <span class="nf">all_smt</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">initial_terms</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">block_term</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
        <span class="n">s</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">t</span> <span class="o">!=</span> <span class="n">m</span><span class="p">.</span><span class="nf">eval</span><span class="p">(</span><span class="n">t</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">fix_term</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
        <span class="n">s</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">t</span> <span class="o">==</span> <span class="n">m</span><span class="p">.</span><span class="nf">eval</span><span class="p">(</span><span class="n">t</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">all_smt_rec</span><span class="p">(</span><span class="n">terms</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">sat</span> <span class="o">==</span> <span class="n">s</span><span class="p">.</span><span class="nf">check</span><span class="p">():</span>
            <span class="n">m</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="nf">model</span><span class="p">()</span>
            <span class="k">yield</span> <span class="n">m</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">terms</span><span class="p">)):</span>
                <span class="n">s</span><span class="p">.</span><span class="nf">push</span><span class="p">()</span>
                <span class="nf">block_term</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">terms</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
                    <span class="nf">fix_term</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">terms</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
                <span class="k">yield</span> <span class="k">from</span> <span class="nf">all_smt_rec</span><span class="p">(</span><span class="n">terms</span><span class="p">[</span><span class="n">i</span><span class="p">:])</span>
                <span class="n">s</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
    <span class="k">yield</span> <span class="k">from</span> <span class="nf">all_smt_rec</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">initial_terms</span><span class="p">))</span>


<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="s">'enc.bin'</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">ciphertext</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">to_binary</span><span class="p">(</span><span class="n">b</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">):</span>
    <span class="k">return</span> <span class="s">''</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="s">'{:08b}'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">b</span><span class="p">])</span>


<span class="k">def</span> <span class="nf">from_binary</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">bytes</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="mi">8</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="mi">8</span><span class="p">))</span>


<span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">AES</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_ECB</span><span class="p">).</span><span class="nf">encrypt</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">message</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">AES</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_ECB</span><span class="p">).</span><span class="nf">decrypt</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">key_final_enc</span><span class="p">(</span><span class="n">key1</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span>
    <span class="n">key_final</span> <span class="o">=</span> <span class="nf">bytes</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="nf">randrange</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">16</span><span class="p">))</span>
    <span class="n">data_bits</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">to_binary</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
    <span class="n">random</span><span class="p">.</span><span class="nf">shuffle</span><span class="p">(</span><span class="n">data_bits</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nf">from_binary</span><span class="p">(</span><span class="s">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_bits</span><span class="p">))</span>
    <span class="k">return</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">key_final</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">unshuffle</span><span class="p">(</span><span class="n">data_list</span><span class="p">,</span> <span class="n">shuffle_order</span><span class="p">):</span>
    <span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span> <span class="o">*</span> <span class="nf">len</span><span class="p">(</span><span class="n">data_list</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">shuffle_order</span><span class="p">):</span>
        <span class="n">res</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">data_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">res</span>


<span class="k">def</span> <span class="nf">test_unshuffle</span><span class="p">():</span>
    <span class="n">random_text</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="nf">randbytes</span><span class="p">(</span><span class="mi">16</span> <span class="o">*</span> <span class="mi">100</span><span class="p">))</span>
    <span class="n">random_text_shuffled</span> <span class="o">=</span> <span class="n">random_text</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
    <span class="n">shuffle_order</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">random_text</span><span class="p">)))</span>
    <span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    <span class="n">random</span><span class="p">.</span><span class="nf">shuffle</span><span class="p">(</span><span class="n">random_text_shuffled</span><span class="p">)</span>
    <span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    <span class="n">random</span><span class="p">.</span><span class="nf">shuffle</span><span class="p">(</span><span class="n">shuffle_order</span><span class="p">)</span>
    <span class="k">assert</span> <span class="nf">unshuffle</span><span class="p">(</span><span class="n">random_text_shuffled</span><span class="p">,</span> <span class="n">shuffle_order</span><span class="p">)</span> <span class="o">==</span> <span class="n">random_text</span>


<span class="nf">test_unshuffle</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">key_final_dec</span><span class="p">(</span><span class="n">key1</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">):</span>
    <span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span>
    <span class="n">key_final</span> <span class="o">=</span> <span class="nf">bytes</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="nf">randrange</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">16</span><span class="p">))</span>

    <span class="n">data</span> <span class="o">=</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">key_final</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">)</span>
    <span class="n">data_bits</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">to_binary</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
    <span class="n">data_bits_order</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">data_bits</span><span class="p">)))</span>
    <span class="n">random</span><span class="p">.</span><span class="nf">shuffle</span><span class="p">(</span><span class="n">data_bits_order</span><span class="p">)</span>
    <span class="n">data_bits_uns</span> <span class="o">=</span> <span class="nf">unshuffle</span><span class="p">(</span><span class="n">data_bits</span><span class="p">,</span> <span class="n">data_bits_order</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nf">from_binary</span><span class="p">(</span><span class="s">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_bits_uns</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">data</span>


<span class="k">def</span> <span class="nf">test_key_final_dec</span><span class="p">():</span>
    <span class="n">random_text</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="nf">randbytes</span><span class="p">(</span><span class="mi">16</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span>
    <span class="k">assert</span> <span class="nf">key_final_dec</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="nf">key_final_enc</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">random_text</span><span class="p">))</span> <span class="o">==</span> <span class="n">random_text</span>


<span class="nf">test_key_final_dec</span><span class="p">()</span>

<span class="k">for</span> <span class="n">key1</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">15</span><span class="p">),</span> <span class="n">desc</span><span class="o">=</span><span class="s">'solving for key1'</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nf">key_final_dec</span><span class="p">(</span><span class="n">key1</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">)</span>
    <span class="n">substitutions</span> <span class="o">=</span> <span class="nc">Counter</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="mi">16</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="mi">16</span><span class="p">))</span>
    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">substitutions</span><span class="p">)</span> <span class="o">!=</span> <span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">//</span> <span class="mi">16</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"pid ="</span><span class="p">,</span> <span class="n">key1</span><span class="p">)</span>
        <span class="k">break</span>

<span class="n">codes</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="s">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">chr</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mh">0xb0</span><span class="p">,</span> <span class="mh">0x1b0</span><span class="p">)))</span>
<span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span>
<span class="n">random</span><span class="p">.</span><span class="nf">shuffle</span><span class="p">(</span><span class="n">codes</span><span class="p">)</span>
<span class="n">sboxes</span> <span class="o">=</span> <span class="p">[</span><span class="s">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">codes</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span><span class="p">:(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mi">4</span><span class="p">]).</span><span class="nf">encode</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">128</span><span class="p">)]</span>
<span class="n">sbytes</span> <span class="o">=</span> <span class="sa">b</span><span class="s">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">sboxes</span><span class="p">)</span>
<span class="n">sboxints</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="nb">int</span><span class="p">.</span><span class="nf">from_bytes</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="s">'big'</span><span class="p">),</span> <span class="nf">set</span><span class="p">(</span>
    <span class="n">sbytes</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">sbytes</span><span class="p">),</span> <span class="mi">2</span><span class="p">))))</span>
<span class="n">sboxes</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">.</span><span class="nf">from_bytes</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="s">'big'</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">sboxes</span><span class="p">]</span>
<span class="n">data</span> <span class="o">=</span> <span class="nf">key_final_dec</span><span class="p">(</span><span class="n">key1</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">)</span>
<span class="n">data_int</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="mi">16</span><span class="p">):</span>
    <span class="n">data_int</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nb">int</span><span class="p">.</span><span class="nf">from_bytes</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="mi">16</span><span class="p">],</span> <span class="s">'big'</span><span class="p">))</span>

<span class="n">flag</span> <span class="o">=</span> <span class="p">[</span><span class="nc">BitVec</span><span class="p">(</span><span class="s">'flag_'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="mi">7</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">//</span> <span class="mi">64</span><span class="p">)]</span>
<span class="n">sboxmap</span> <span class="o">=</span> <span class="nc">Array</span><span class="p">(</span><span class="s">'sbox'</span><span class="p">,</span> <span class="nc">BitVecSort</span><span class="p">(</span><span class="mi">7</span><span class="p">),</span> <span class="nc">BitVecSort</span><span class="p">(</span><span class="mi">64</span><span class="p">))</span>
<span class="n">aes_encryption</span> <span class="o">=</span> <span class="nc">Function</span><span class="p">(</span><span class="s">'AES'</span><span class="p">,</span> <span class="nc">BitVecSort</span><span class="p">(</span><span class="mi">16</span><span class="p">),</span> <span class="nc">BitVecSort</span><span class="p">(</span><span class="mi">128</span><span class="p">))</span>

<span class="n">constraints</span> <span class="o">=</span> <span class="p">[</span><span class="n">sboxmap</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">sboxes</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">128</span><span class="p">)]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">//</span> <span class="mi">64</span><span class="p">):</span>
    <span class="n">four_code</span> <span class="o">=</span> <span class="n">sboxmap</span><span class="p">[</span><span class="n">flag</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span>
    <span class="n">four_code_parts</span> <span class="o">=</span> <span class="p">[</span><span class="nc">Extract</span><span class="p">(</span><span class="mi">16</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">16</span> <span class="o">*</span> <span class="n">i</span><span class="p">,</span> <span class="n">four_code</span><span class="p">)</span>
                       <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
    <span class="k">for</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">data_int</span><span class="p">[</span><span class="mi">4</span> <span class="o">*</span> <span class="n">i</span><span class="p">:</span><span class="mi">4</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">4</span><span class="p">],</span> <span class="n">four_code_parts</span><span class="p">):</span>
        <span class="n">constraints</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">aes_encryption</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="o">==</span> <span class="n">a</span><span class="p">)</span>
    <span class="n">constraints</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Distinct</span><span class="p">([</span><span class="nf">aes_encryption</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">sboxints</span><span class="p">]))</span>
<span class="n">solver</span> <span class="o">=</span> <span class="nc">Solver</span><span class="p">()</span>
<span class="n">solver</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">constraints</span><span class="p">)</span>
<span class="c1"># if solver.check() == sat:
# m = solver.model()
</span><span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="nf">all_smt</span><span class="p">(</span><span class="n">solver</span><span class="p">,</span> <span class="n">flag</span><span class="p">):</span>
    <span class="n">flag_bytes</span> <span class="o">=</span> <span class="nf">bytes</span><span class="p">([</span><span class="n">m</span><span class="p">.</span><span class="nf">eval</span><span class="p">(</span><span class="n">flag</span><span class="p">[</span><span class="n">i</span><span class="p">]).</span><span class="nf">as_long</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">flag</span><span class="p">))])</span>
    <span class="k">assert</span> <span class="nf">len</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">flag_bytes</span><span class="p">))</span> <span class="o">==</span> <span class="nf">len</span><span class="p">(</span>
        <span class="nc">Counter</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="mi">64</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="mi">64</span><span class="p">)))</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">flag_bytes</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"failed to solve"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="alternate-solution-by-teammate-utaha6878">Alternate Solution by teammate (Utaha#6878)</h3>

<p>All due regards to him for solving the challenge while I was stuck over finding<br />
<code class="language-plaintext highlighter-rouge">key1</code> XD</p>

<p>All parts will be almost same except the substitution solving part, which he<br />
did by manual bruteforcing i.e. recursively enumerating all mappings and
backtracking on contradictions</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mp</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">()</span>
<span class="n">codes</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">([[</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">256</span><span class="p">)],</span> <span class="n">start</span><span class="o">=</span><span class="p">[])</span> 
<span class="c1"># notice that the range is changed from [0xb0, 0x1b0) to [0, 256). 
# It's just for relabeling.
</span><span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span>
<span class="n">random</span><span class="p">.</span><span class="nf">shuffle</span><span class="p">(</span><span class="n">codes</span><span class="p">)</span>
<span class="n">sboxes</span> <span class="o">=</span> <span class="p">[</span><span class="n">codes</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="p">:(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">128</span><span class="p">)]</span>

<span class="k">def</span> <span class="nf">match</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
	<span class="s">"""
	equate two objects elementwise ignoring if the entry is -1
	"""</span>
    <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">or</span> <span class="n">y</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
            <span class="k">continue</span>
        <span class="k">if</span> <span class="n">x</span> <span class="o">!=</span> <span class="n">y</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
    <span class="k">return</span> <span class="bp">True</span>

<span class="n">answers</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">getFlag</span><span class="p">(</span><span class="n">cip</span><span class="p">,</span> <span class="n">sboxes</span><span class="p">,</span> <span class="n">mp</span><span class="p">):</span> 
<span class="c1"># get the flag based on current mapping, unknown char will be shown as '?'
</span>    <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">cip</span><span class="p">:</span>
        <span class="n">afterMap</span> <span class="o">=</span> <span class="p">[</span><span class="n">mp</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">c</span><span class="p">]</span>
        <span class="n">found</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">s</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">sboxes</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">s</span> <span class="o">==</span> <span class="n">afterMap</span><span class="p">:</span>
                <span class="n">res</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="n">found</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="k">break</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">found</span><span class="p">:</span>
            <span class="n">res</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">ord</span><span class="p">(</span><span class="s">'?'</span><span class="p">))</span>
    <span class="k">return</span> <span class="nf">bytes</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">brute</span><span class="p">(</span><span class="n">cip</span><span class="p">,</span> <span class="n">sboxes</span><span class="p">,</span> <span class="n">mp</span><span class="p">):</span>
    <span class="s">"""
    cip and sboxes remain unchanged throughout the recursive call, 
    but I feel bad using global varaibles.
    """</span>
    <span class="k">if</span> <span class="n">DEBUG</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="nf">getFlag</span><span class="p">(</span><span class="n">cip</span><span class="p">,</span> <span class="n">sboxes</span><span class="p">,</span> <span class="n">mp</span><span class="p">))</span>

    <span class="c1"># check is finished
</span>    <span class="n">isFinished</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">cip</span><span class="p">:</span>
        <span class="k">if</span> <span class="nf">all</span><span class="p">(</span><span class="n">x</span> <span class="ow">in</span> <span class="n">mp</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">c</span><span class="p">):</span>
            <span class="k">pass</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">isFinished</span> <span class="o">=</span> <span class="bp">False</span>

    <span class="k">if</span> <span class="n">isFinished</span><span class="p">:</span>
        <span class="n">answers</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getFlag</span><span class="p">(</span><span class="n">cip</span><span class="p">,</span> <span class="n">sboxes</span><span class="p">,</span> <span class="n">mp</span><span class="p">))</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"Found an answer!!!!!!!"</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="c1"># try matching
</span>    <span class="n">isContradiction</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="n">mp</span> <span class="o">=</span> <span class="n">mp</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>

    <span class="c1"># Find the one with least possible matches.
</span>    <span class="n">min_pos</span> <span class="o">=</span> <span class="mi">256</span>
    <span class="n">index</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>

    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">cip</span><span class="p">):</span>
        <span class="n">afterMap</span> <span class="o">=</span> <span class="p">[</span><span class="n">mp</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">c</span><span class="p">]</span>
        <span class="k">if</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">afterMap</span><span class="p">:</span>
            <span class="k">continue</span>

        <span class="n">matches</span> <span class="o">=</span> <span class="p">[</span><span class="n">s</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">sboxes</span> <span class="k">if</span> <span class="nf">match</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">afterMap</span><span class="p">)]</span>

        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">matches</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">isContradiction</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="k">break</span>

        <span class="k">if</span> <span class="n">min_pos</span> <span class="o">&gt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">matches</span><span class="p">):</span>
            <span class="n">index</span> <span class="o">=</span> <span class="n">idx</span>
            <span class="n">min_pos</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">matches</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">isContradiction</span><span class="p">:</span>
        <span class="k">return</span>

    <span class="c1"># now bruteforce all possibilities
</span>    <span class="k">assert</span> <span class="n">index</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span>
    <span class="n">afterMap</span> <span class="o">=</span> <span class="p">[</span><span class="n">mp</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">cip</span><span class="p">[</span><span class="n">index</span><span class="p">]]</span>
    <span class="n">matches</span> <span class="o">=</span> <span class="p">[</span><span class="n">s</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">sboxes</span> <span class="k">if</span> <span class="nf">match</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">afterMap</span><span class="p">)]</span>
    <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">matches</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">cip</span><span class="p">[</span><span class="n">index</span><span class="p">],</span> <span class="n">m</span><span class="p">):</span>
            <span class="n">mp</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">y</span>
        <span class="nf">brute</span><span class="p">(</span><span class="n">cip</span><span class="p">,</span> <span class="n">sboxes</span><span class="p">,</span> <span class="n">mp</span><span class="p">)</span>

<span class="c1"># This is based on the repetition
</span><span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">132</span><span class="p">,</span> <span class="mi">197</span><span class="p">]:</span>
    <span class="n">mp</span> <span class="o">=</span> <span class="p">{</span><span class="mi">35</span><span class="p">:</span> <span class="mi">224</span><span class="p">,</span> <span class="mi">109</span><span class="p">:</span> <span class="mi">144</span><span class="p">,</span> <span class="mi">4</span><span class="p">:</span> <span class="n">_</span><span class="p">}</span>
    <span class="nf">brute</span><span class="p">(</span><span class="n">cip</span><span class="p">,</span> <span class="n">sboxes</span><span class="p">,</span> <span class="n">mp</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="s">"Answers:"</span><span class="p">)</span>
<span class="n">answers</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">answers</span><span class="p">))</span>
<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">answers</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">b</span><span class="s">"sdctf{"</span> <span class="o">+</span> <span class="n">x</span> <span class="o">+</span> <span class="sa">b</span><span class="s">"}"</span><span class="p">)</span>

<span class="c1"># The fourth one is the actual answer
</span></code></pre></div></div>

<blockquote>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ciphertext repetition:
[4, 5, 4, 6]
[34, 35, 36, 35]
[109, 60, 110, 109]
Sbox repetition:
[132, 93, 132, 211]
[197, 32, 197, 248]
[144, 86, 67, 144]
[165, 224, 27, 224]
Found an answer!!!!!!!
Found an answer!!!!!!!
Found an answer!!!!!!!
Found an answer!!!!!!!
Found an answer!!!!!!!
Found an answer!!!!!!!
Found an answer!!!!!!!
Found an answer!!!!!!!
Answers:
b'sdctf{r0l1-LR~pWn.c6yPtO_wi7h,ECB:I5*b8d!KQvJmLxgX95saANMFSeU}'
b'sdctf{r0l1-uR~pWn.c6yPtO_wi7h,ECB:I5*b8d!cQvJmLxgX9DsaANMFSeU}'
b'sdctf{r0l1-uR~pWn.c6yPtO_wi7h,ECB:I5*b8d!KQvJmLxgX9DsaANMFSeU}'
b'sdctf{r0l1-uR~pWn.c6yPtO_wi7h,ECB:I5*b8d!cQvJmLxgX95saANMFSeU}'
b'sdctf{r0l1-LR~pWn.c6yPtO_wi7h,ECB:I5*b8d!KQvJmLxgX9DsaANMFSeU}'
b'sdctf{r0l1-LR~pWn.c6yPtO_wi7h,ECB:I5*b8d!cQvJmLxgX9DsaANMFSeU}'
b'sdctf{r0l1-uR~pWn.c6yPtO_wi7h,ECB:I5*b8d!KQvJmLxgX95saANMFSeU}'
b'sdctf{r0l1-LR~pWn.c6yPtO_wi7h,ECB:I5*b8d!cQvJmLxgX95saANMFSeU}'
</code></pre></div>  </div>
</blockquote>

<p>full script in <a href="./solve2.py">solve2.py</a></p>]]></content><author><name>deuterium</name><email>farziemailid69@gmail.com</email></author><category term="SDCTF" /><category term="2022" /><category term="cryptography" /><category term="AES" /><category term="z3" /><category term="substitution" /><category term="permutation" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Google CTF 2021 Crypto - Pythia</title><link href="https://deut-erium.github.io/WriteUps/2021/google_ctf/crypto/pythia/2021-07-21-google-ctf-2021-pythia" rel="alternate" type="text/html" title="Google CTF 2021 Crypto - Pythia" /><published>2021-07-21T00:00:00+05:30</published><updated>2021-07-21T00:00:00+05:30</updated><id>https://deut-erium.github.io/WriteUps/2021/google_ctf/crypto/pythia/google-ctf-2021-pythia</id><content type="html" xml:base="https://deut-erium.github.io/WriteUps/2021/google_ctf/crypto/pythia/2021-07-21-google-ctf-2021-pythia"><![CDATA[<!--more-->

<h2 id="challenge-description">Challenge Description</h2>
<blockquote>
  <p>Yet another oracle, but the queries are costly and limited so be frugal
with them.
<code class="language-plaintext highlighter-rouge">pythia.2021.ctfcompetition.com 1337</code></p>
</blockquote>

<h2 id="files">Files</h2>
<blockquote>
  <p><a href="./source.zip">source.zip</a></p>
  <ul>
    <li><a href="./server.py">server.py</a></li>
    <li><a href="./flag.txt">dummpy flag</a></li>
  </ul>
</blockquote>

<h2 id="server">Server</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">max_queries</span> <span class="o">=</span> <span class="mi">150</span>
<span class="n">query_delay</span> <span class="o">=</span> <span class="mi">0</span>

<span class="n">passwords</span> <span class="o">=</span> <span class="p">[</span><span class="nf">bytes</span><span class="p">(</span><span class="s">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">(</span><span class="n">string</span><span class="p">.</span><span class="n">ascii_lowercase</span><span class="p">)</span> \
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">)),</span> <span class="s">'UTF-8'</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
<span class="n">flag</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="s">"flag.txt"</span><span class="p">,</span> <span class="s">"rb"</span><span class="p">).</span><span class="nf">read</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">menu</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"What you wanna do?"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"1- Set key"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"2- Read flag"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"3- Decrypt text"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"4- Exit"</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="s">"&gt;&gt;&gt; "</span><span class="p">))</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>

<span class="nf">print</span><span class="p">(</span><span class="s">"Welcome!</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>

<span class="n">key_used</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">for</span> <span class="n">query</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">max_queries</span><span class="p">):</span>
    <span class="n">option</span> <span class="o">=</span> <span class="nf">menu</span><span class="p">()</span>

    <span class="k">if</span> <span class="n">option</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"Which key you want to use [0-2]?"</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">i</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="s">"&gt;&gt;&gt; "</span><span class="p">))</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="n">i</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">:</span>
          <span class="n">key_used</span> <span class="o">=</span> <span class="n">i</span>
        <span class="k">else</span><span class="p">:</span>
          <span class="nf">print</span><span class="p">(</span><span class="s">"Please select a valid key."</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">option</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"Password?"</span><span class="p">)</span>
        <span class="n">passwd</span> <span class="o">=</span> <span class="nf">bytes</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="s">"&gt;&gt;&gt; "</span><span class="p">),</span> <span class="s">'UTF-8'</span><span class="p">)</span>

        <span class="nf">print</span><span class="p">(</span><span class="s">"Checking..."</span><span class="p">)</span>
        <span class="c1"># Prevent bruteforce attacks...
</span>        <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">query_delay</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">passwd</span> <span class="o">==</span> <span class="p">(</span><span class="n">passwords</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">passwords</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">passwords</span><span class="p">[</span><span class="mi">2</span><span class="p">]):</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"ACCESS GRANTED: "</span> <span class="o">+</span> <span class="n">flag</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="s">'UTF-8'</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"ACCESS DENIED!"</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">option</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"Send your ciphertext "</span><span class="p">)</span>

        <span class="n">ct</span> <span class="o">=</span> <span class="nf">input</span><span class="p">(</span><span class="s">"&gt;&gt;&gt; "</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"Decrypting..."</span><span class="p">)</span>
        <span class="c1"># Prevent bruteforce attacks...
</span>        <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">query_delay</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">nonce</span><span class="p">,</span> <span class="n">ciphertext</span> <span class="o">=</span> <span class="n">ct</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="s">","</span><span class="p">)</span>
            <span class="n">nonce</span> <span class="o">=</span> <span class="nf">b64decode</span><span class="p">(</span><span class="n">nonce</span><span class="p">)</span>
            <span class="n">ciphertext</span> <span class="o">=</span> <span class="nf">b64decode</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">)</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"ERROR: Ciphertext has invalid format. </span><span class="se">\
</span><span class="s">            Must be of the form </span><span class="se">\"</span><span class="s">nonce,ciphertext</span><span class="se">\"</span><span class="s">, where </span><span class="se">\
</span><span class="s">            nonce and ciphertext are base64 strings."</span><span class="p">)</span>
            <span class="k">continue</span>

        <span class="n">kdf</span> <span class="o">=</span> <span class="nc">Scrypt</span><span class="p">(</span><span class="n">salt</span><span class="o">=</span><span class="sa">b</span><span class="s">''</span><span class="p">,</span> <span class="n">length</span><span class="o">=</span><span class="mi">16</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">2</span><span class="o">**</span><span class="mi">4</span><span class="p">,</span> <span class="n">r</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">p</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">backend</span><span class="o">=</span><span class="nf">default_backend</span><span class="p">())</span>
        <span class="n">key</span> <span class="o">=</span> <span class="n">kdf</span><span class="p">.</span><span class="nf">derive</span><span class="p">(</span><span class="n">passwords</span><span class="p">[</span><span class="n">key_used</span><span class="p">])</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">cipher</span> <span class="o">=</span> <span class="nc">AESGCM</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
            <span class="n">plaintext</span> <span class="o">=</span> <span class="n">cipher</span><span class="p">.</span><span class="nf">decrypt</span><span class="p">(</span><span class="n">nonce</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">,</span> <span class="n">associated_data</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"ERROR: Decryption failed. Key was not correct."</span><span class="p">)</span>
            <span class="k">continue</span>

        <span class="nf">print</span><span class="p">(</span><span class="s">"Decryption successful"</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">option</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"Bye!"</span><span class="p">)</span>
        <span class="k">break</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"Invalid option!"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"You have "</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">max_queries</span> <span class="o">-</span> <span class="n">query</span><span class="p">)</span> <span class="o">+</span> <span class="s">" trials left...</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="recon">Recon</h2>

<p>Taking a look at the source, we have a few observations</p>
<ul>
  <li>The server generates 3 passwords of 3 lower case ASCII each and uses Scrypt (a <a href="https://en.wikipedia.org/wiki/Key_derivation_function">Password based key derivation function</a>) on it to derive a 16 byte encryption key from each of the 3 byte passwords, which can be treated as deriving 3 16-byte keys from a set of $26^3 = 17576$ known randomly generated keys.</li>
  <li>It provides us 3 options to work with. Option 1 to set 1 of the 3 unknown randomly generated keys</li>
  <li>Option 3 provides as a decryption oracle, allowing us to check whether any arbitrary ciphertext of our choice decrypts successfully. (Why would it fail? more details in <a href="#how-decryption-works">How decryption works</a>)</li>
  <li>Option 2 is the option we dig, give the server all three passwords (hence keys) correctly, it gives back the flag.</li>
  <li>There are 150 queries for all 3 options, which means we have effectively 147 decryption oracles to work with, which indicates we need an average case key recovery in &lt;49 queries.</li>
</ul>

<h2 id="thinking-methodology-ideas-to-reject">Thinking Methodology/ Ideas to reject</h2>
<h3 id="1-bruteforcing-luck">1. Bruteforcing/ luck</h3>
<p>Since the number of keys is quite small, one might be tempted to bruteforce the keys and be optimistic that he/she gets all three keys in 150 attempts.<br />
But the fact that guessing 3 keys consecutively within 150 attempts has probability as low as $\approx 10^{-7}$ which is already out of practical server-bruteforcing further enforced by 10 s delay between each guess taking 25 mins for each bruteforce, its clearly crossed out.</p>
<h3 id="2-the-challenge-is-not-about-scrypt">2. The challenge is not about Scrypt</h3>
<p>Again, one would be tempted to think that it could be some weakness of Scrypt or the given configuration, or some relation between the derived keys which renders GCM ez. This hypothesis can also countered easily looking at the amount of stuff going inside Scrypt :P</p>
<h3 id="3-famous-attacks-on-aes-gcm">3. Famous attacks on AES-GCM</h3>
<p>Again, someone sees AESGCM, they get cryptopals <a href="https://toadstyle.org/cryptopals/">set 8</a> flashbacks.</p>
<ol>
  <li>Key recovery attacks on repeated nonces
    - Again this is possible if the server <em>encrypts</em> stuff, not check its decryption. What the attacker recovers is $E(0,K)$ not the key itself, but since keyspace is small, they could recover it through. Although again, this is definitely not the challenge.</li>
  <li>Key recovery attacks on truncated mac
    - Clearly, I cant see any sort of truncation. So its out.</li>
</ol>

<h3 id="possible-approach">Possible approach</h3>
<p>The only information we can extract from the oracle is whether the provided ciphertext forms the given tag under the key of the server. How would this help us reduce the number of queries required from $26^3$ to say 50. If it was possible to get it in one shot, the challenge authors would not give a slack of 50 :P<br />
How about there exists a (ciphertext, tag) which decrypts successfully for more than one key?<br />
This would reduce the number of queries by half! We will just need to keep on asking ciphertexts for a 2 pair till the key of server happens to lie in that pair.<br />
That’s all, if we can get a (ciphertext, tag) which is valid for $n$ keys, we can reduce the search to a binary search, requiring $log_{2}(26^3) \approx 14.1 = 15$ queries at max making 45 queries in total. Then again why 150 and not 50?<br />
More on it <a href="#performance-considerations">later</a>…</p>

<h2 id="how-decryption-works">How decryption works</h2>
<p>This little detour is for the people who may be confused about <a href="https://en.wikipedia.org/wiki/Authenticated_encryption">Authenticated Encryption with Associated Data</a>, and why would an arbitrary decryption of some ciphertext would fail under a given key as opposed to some other mode of AES say CBC.<br />
So the whole idea here is that the ciphertext will comprise of three parts</p>
<ol>
  <li>The encrypted payload i.e the data we wish to communicate</li>
  <li>Associated un-encrypted data which contains any additional metadata which needs to be preserved against any sort of tempering.</li>
  <li>Tag which is essentially an attempt of proof that the given ciphertext was encrypted by someone who holds the secret key and the payload and additional associated data has not been tempered with.</li>
</ol>

<p>Whenever the server receives a ciphertext to decrypt, it will first try to verify that the received tag is actually corresponding to the received ciphertext encrypted with the secret key.<br />
If the computation of tag on the ciphertext fails, the server would reject the proposal to decrypt the message.</p>

<h3 id="how-aes-gcm-works">How AES-GCM works?</h3>
<p>AES-GCM is, put simply, an authentication mechanism built upon AES in <a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Counter_(CTR)">CTR mode</a> (a stream cipher not necessary for our discussion), such that encrypted blocks of the ciphertext, additional authentication data, and lengths of those two put together in a GCM mac. This is whats all we will need to consider.
Here comes the mandatory picture from Wikipedia. Just follow the components used in the <code class="language-plaintext highlighter-rouge">Auth tag</code> generation.<br />
<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/25/GCM-Galois_Counter_Mode_with_IV.svg/1000px-GCM-Galois_Counter_Mode_with_IV.svg.png" width="600" /><br />
GCM is simply a polynomial (in $GF(2^{128})$) constructed using the blocks of authentication data, ciphertext, and two additional blocks, one constructed using the lengths of data and ciphertext and one using the encryption of 96 bit nonce $N$ appended with 31 bits of 0 and a single bit 1. i.e. $s = E(N||0^{31}1,K)$<br />
This polynomial is evaluated at $h = E(0,K)$ to compute the <code class="language-plaintext highlighter-rouge">Auth tag</code><br />
\(T = ((((((h*A_0) \oplus A_1)*h ...  \oplus  A_m)*h  \oplus  C_0)*h ...  \oplus  C_{n-1})*h \oplus L)*h  \oplus  s\)<br />
Since there’s no additional data in the challenge, we get<br />
\(T = ((((h*C_0) \oplus C_1)*h ...  \oplus  C_{n-1})*h  \oplus L)*h  \oplus  s\) or<br />
\(T = C_0*h^{n+1} \oplus C_1*h^{n+1} ...  \oplus  C_{n-1}*h^{2}  \oplus  L*h  \oplus  s\)</p>

<h2 id="attack">Attack</h2>
<p>Continuing and exploring the idea <a href="#possible-approach">above</a> one would come across a recent paper titled <a href="https://eprint.iacr.org/2020/1491.pdf">Partitioning Oracle Attack</a> and what’s cherry on the top is that a quick CTRL+F for github in the paper reveals the <a href="https://github.com/julialen/key_multicollision">POC demo</a> of the same making it a lot easier to implement.</p>

<h3 id="construction">Construction</h3>
<p>Continuing from the expression of tag, the terms dependent on key for calculation of tag are $\textbf{h, s}$ only.<br />
\(T = C_0*\textbf{h}^{n+1} \oplus C_1*\textbf{h}^{n} ...  \oplus  C_{n-1}*\textbf{h}^{2}  \oplus  L*\textbf{h}  \oplus  \textbf{s}\)<br />
\(C_0*\textbf{h}^{n+1} \oplus C_1*\textbf{h}^{n} ...  \oplus  C_{n-1}*\textbf{h}^{2} = T \oplus L*\textbf{h}  \oplus  \textbf{s}\)<br />
\(C_0*\textbf{h}^{n-1} \oplus C_1*\textbf{h}^{n-2} ...  \oplus  C_{n-1} = (T \oplus L*\textbf{h}  \oplus  \textbf{s})*\textbf{h}^{-2}\)<br />
writing 
\((T \oplus L*\textbf{h}  \oplus  \textbf{s})*\textbf{h}^{-2}\) as a key dependent quantity \(\textbf{B}\) we can write  it for $n$ keys \(K_0...K_{n-1}\) , we get<br />
\(C_0*\textbf{h}^{n-1}_{0} \oplus C_1*\textbf{h}^{n-2}_{0} ...  \oplus  C_{n-1} = \textbf{B}_{0}\)<br />
\(C_0*\textbf{h}^{n-1}_{1} \oplus C_1*\textbf{h}^{n-2}_{1} ...  \oplus  C_{n-1} = \textbf{B}_{1}\)<br />
\(\vdots \qquad \qquad \vdots \qquad \qquad \vdots \qquad \qquad \vdots\)<br />
\(C_0*\textbf{h}^{n-1}_{n-1} \oplus C_1*\textbf{h}^{n-2}_{n-1} ...  \oplus  C_{n-1} = \textbf{B}_{n-1}\)<br />
\(\begin{bmatrix}
1 &amp; \textbf{h}_{0} &amp; \textbf{h}_{0}^{2} &amp; \cdots &amp; \textbf{h}_{0}^{n-1}\\
1 &amp; \textbf{h}_{0} &amp; \textbf{h}_{0}^{2}  &amp;  \cdots &amp; \textbf{h}_{0}^{n-1} \\
 \vdots &amp; \vdots &amp;\vdots &amp; \ddots &amp; \vdots\\
1 &amp; \textbf{h}_{0} &amp; \textbf{h}_{0}^{2}  &amp; \cdots &amp; \textbf{h}_{0}^{n-1}
\end{bmatrix} .
\begin{bmatrix}
C_{n-1} \\
C_{n-2}  \\
 \vdots  \\
 C_{0}
\end{bmatrix} =
\begin{bmatrix}
\textbf{B}_{0} \\
\textbf{B}_{1}  \\
\vdots \\
\textbf{B}_{n-1}
\end{bmatrix}\)</p>

<p>Now that we have all the required equations set up, we can find $C_{0}, C_{1} \ldots, C_{n-1}$ through <a href="https://en.wikipedia.org/wiki/Lagrange_polynomial">lagrange interpolation</a> in $O(n^2)$ time and $O(n)$ space.</p>

<h3 id="performance-considerations">Performance considerations</h3>
<p>Theoretically 15 searches would be enough to find the key, but it would require a multicollision for ~8000 keys.<br />
What we can do is to first check for a few groups of smaller sizes, then proceeding with binary search on a given group.<br />
If we form groups of size $k$, the total number of calls should be roughly (for worst case number of calls)
$17576/k + \lceil log_{2}k \rceil= 49 \implies k\approx 367$
Time taken to find a multicollision for $k=367$ keys,</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">statistics</span>
<span class="n">k</span><span class="o">=</span><span class="mi">367</span>
<span class="n">times</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">26</span><span class="o">**</span><span class="mi">3</span><span class="p">,</span><span class="n">k</span><span class="p">):</span>
    <span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
    <span class="n">multi</span> <span class="o">=</span> <span class="nf">multicollision</span><span class="p">(</span><span class="n">derived_keys</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="n">k</span><span class="p">])</span>
    <span class="n">times</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span><span class="o">-</span><span class="n">start_time</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">statistics</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">times</span><span class="p">))</span>
<span class="c1">#4.06
</span></code></pre></div></div>
<p>It takes around 4 seconds on an i9 processor. For the binary search part the times for computation
take quadratically shorter duration, adding to roughly 1.5s for 9 calls.<br />
Overall it should take average case \((10+4)*(17576/367)*1/2 + 9*10 + 1.5 \approx 426s \approx 7mins\) to find a key and worst case to around 760s ~ 12.7 minutes</p>

<p>Average case time to solve the challenge would be around 21 minutes and worst case to around 38 minutes :(</p>

<p>Borrowing logic from <a href="https://github.com/julialen/key_multicollision/blob/main/collide_gcm.sage">collide_gcm.sage</a>, <a href="./collide.sage">local copy</a> here is a dirty script</p>

<h3 id="solve-script"><a href="./solve.sage">Solve script</a></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">random</span>
<span class="kn">import</span> <span class="n">string</span>
<span class="kn">import</span> <span class="n">time</span>

<span class="kn">from</span> <span class="n">base64</span> <span class="kn">import</span> <span class="n">b64encode</span><span class="p">,</span> <span class="n">b64decode</span>
<span class="kn">from</span> <span class="n">cryptography.hazmat.backends</span> <span class="kn">import</span> <span class="n">default_backend</span>
<span class="kn">from</span> <span class="n">cryptography.hazmat.primitives.ciphers.aead</span> <span class="kn">import</span> <span class="n">AESGCM</span>
<span class="kn">from</span> <span class="n">cryptography.hazmat.primitives.kdf.scrypt</span> <span class="kn">import</span> <span class="n">Scrypt</span>
<span class="kn">from</span> <span class="n">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
<span class="kn">from</span> <span class="n">itertools</span> <span class="kn">import</span> <span class="n">product</span>
<span class="kn">from</span> <span class="n">bitstring</span> <span class="kn">import</span> <span class="n">BitArray</span><span class="p">,</span> <span class="n">Bits</span>
<span class="kn">import</span> <span class="n">pwn</span>

<span class="n">derived_keys</span> <span class="o">=</span> <span class="p">[]</span>  <span class="c1"># keys derived from scrypt of password
</span><span class="n">rev_keys</span> <span class="o">=</span> <span class="p">{}</span>  <span class="c1"># holds mapping from derived key to password
</span><span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nf">product</span><span class="p">(</span><span class="n">string</span><span class="p">.</span><span class="n">ascii_lowercase</span><span class="p">,</span> <span class="n">repeat</span><span class="o">=</span><span class="mi">3</span><span class="p">):</span>
    <span class="n">kdf</span> <span class="o">=</span> <span class="nc">Scrypt</span><span class="p">(</span><span class="n">salt</span><span class="o">=</span><span class="sa">b</span><span class="s">''</span><span class="p">,</span> <span class="n">length</span><span class="o">=</span><span class="mi">16</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">16</span><span class="p">,</span> <span class="n">r</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span>
                 <span class="n">p</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">backend</span><span class="o">=</span><span class="nf">default_backend</span><span class="p">())</span>
    <span class="n">derived_key</span> <span class="o">=</span> <span class="n">kdf</span><span class="p">.</span><span class="nf">derive</span><span class="p">(</span><span class="s">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">k</span><span class="p">).</span><span class="nf">encode</span><span class="p">())</span>
    <span class="n">derived_keys</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">derived_key</span><span class="p">)</span>
    <span class="n">rev_keys</span><span class="p">[</span><span class="n">derived_key</span><span class="p">]</span> <span class="o">=</span> <span class="s">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>

<span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span> <span class="o">=</span> <span class="s">"pythia.2021.ctfcompetition.com"</span><span class="p">,</span> <span class="mi">1337</span>
<span class="n">REM</span> <span class="o">=</span> <span class="n">pwn</span><span class="p">.</span><span class="nf">remote</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">bytes_to_element</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">field</span><span class="p">,</span> <span class="n">a</span><span class="p">):</span>
    <span class="s">"""Converting a bytes object to an element in `field`"""</span>
    <span class="n">bits</span> <span class="o">=</span> <span class="nc">BitArray</span><span class="p">(</span><span class="n">val</span><span class="p">)</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">field</span><span class="p">.</span><span class="nf">fetch_int</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">bits</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">bits</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
            <span class="n">result</span> <span class="o">+=</span> <span class="n">a</span><span class="o">**</span><span class="n">i</span>
    <span class="k">return</span> <span class="n">result</span>


<span class="n">P</span><span class="p">.</span><span class="o">&lt;</span><span class="n">x</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nc">PolynomialRing</span><span class="p">(</span><span class="nc">GF</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">x</span><span class="o">**</span><span class="mi">128</span> <span class="o">+</span> <span class="n">x</span><span class="o">**</span><span class="mi">7</span> <span class="o">+</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>
<span class="n">GFghash</span><span class="p">.</span><span class="o">&lt;</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">=</span> <span class="nc">GF</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">128</span><span class="p">,</span> <span class="s">'x'</span><span class="p">,</span> <span class="n">modulus</span><span class="o">=</span><span class="n">p</span><span class="p">)</span>
<span class="n">R</span> <span class="o">=</span> <span class="nc">PolynomialRing</span><span class="p">(</span><span class="n">GFghash</span><span class="p">,</span> <span class="s">'x'</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">multicollision</span><span class="p">(</span><span class="n">keyset</span><span class="p">,</span> <span class="n">nonce</span><span class="o">=</span><span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span> <span class="o">*</span> <span class="mi">12</span><span class="p">,</span> <span class="n">tag</span><span class="o">=</span><span class="sa">b</span><span class="s">'</span><span class="se">\x01</span><span class="s">'</span> <span class="o">*</span> <span class="mi">16</span><span class="p">):</span>
    <span class="s">"""main function to find multicollisions, Tag is kept a constant
    and so is nonce for all the key encryptions
    x_bf corresponds byte object x transformed to the field element
    """</span>
    <span class="n">L_bytes</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">keyset</span><span class="p">)</span> <span class="o">*</span> <span class="mi">128</span><span class="p">).</span><span class="nf">to_bytes</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="s">'big'</span><span class="p">)</span>
    <span class="n">L_bf</span> <span class="o">=</span> <span class="nf">bytes_to_element</span><span class="p">(</span><span class="n">L_bytes</span><span class="p">,</span> <span class="n">GFghash</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
    <span class="n">nonce_plus</span> <span class="o">=</span> <span class="n">nonce</span> <span class="o">+</span> <span class="nf">bytes</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
    <span class="n">tag_bf</span> <span class="o">=</span> <span class="nf">bytes_to_element</span><span class="p">(</span><span class="n">tag</span><span class="p">,</span> <span class="n">GFghash</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
    <span class="n">pairs</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">keyset</span><span class="p">:</span>
        <span class="c1"># compute H
</span>        <span class="n">aes</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_ECB</span><span class="p">)</span>
        <span class="n">H</span> <span class="o">=</span> <span class="n">aes</span><span class="p">.</span><span class="nf">encrypt</span><span class="p">(</span><span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span> <span class="o">*</span> <span class="mi">16</span><span class="p">)</span>
        <span class="n">h_bf</span> <span class="o">=</span> <span class="nf">bytes_to_element</span><span class="p">(</span><span class="n">H</span><span class="p">,</span> <span class="n">GFghash</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>

        <span class="n">s</span> <span class="o">=</span> <span class="n">aes</span><span class="p">.</span><span class="nf">encrypt</span><span class="p">(</span><span class="n">nonce_plus</span><span class="p">)</span>
        <span class="n">s_bf</span> <span class="o">=</span> <span class="nf">bytes_to_element</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">GFghash</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>
        <span class="c1"># assign (lens * H) + s + T to b
</span>        <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">L_bf</span> <span class="o">*</span> <span class="n">h_bf</span><span class="p">)</span> <span class="o">+</span> <span class="n">s_bf</span> <span class="o">+</span> <span class="n">tag_bf</span>
        <span class="c1"># get pair (H, b*(H^-2))
</span>        <span class="n">y</span> <span class="o">=</span> <span class="n">b</span> <span class="o">*</span> <span class="n">h_bf</span><span class="o">**-</span><span class="mi">2</span>
        <span class="n">pairs</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">h_bf</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
    <span class="c1"># compute Lagrange interpolation
</span>    <span class="n">f</span> <span class="o">=</span> <span class="n">R</span><span class="p">.</span><span class="nf">lagrange_polynomial</span><span class="p">(</span><span class="n">pairs</span><span class="p">)</span>
    <span class="n">ct</span> <span class="o">=</span> <span class="s">''</span>
    <span class="k">for</span> <span class="n">coeff</span> <span class="ow">in</span> <span class="n">f</span><span class="p">.</span><span class="nf">list</span><span class="p">()[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
        <span class="n">ct_pad</span> <span class="o">=</span> <span class="s">''</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">coeff</span><span class="p">.</span><span class="nf">polynomial</span><span class="p">().</span><span class="nf">list</span><span class="p">()))</span>
        <span class="n">ct</span> <span class="o">+=</span> <span class="nc">Bits</span><span class="p">(</span><span class="nb">bin</span><span class="o">=</span><span class="n">ct_pad</span><span class="p">.</span><span class="nf">ljust</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="s">'0'</span><span class="p">))</span>
    <span class="n">ct</span> <span class="o">=</span> <span class="n">ct</span><span class="p">.</span><span class="nb">bytes</span>
    <span class="k">return</span> <span class="n">ct</span> <span class="o">+</span> <span class="n">tag</span>


<span class="k">def</span> <span class="nf">decrypt_text</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="n">REM</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">'3'</span><span class="p">)</span>
    <span class="n">REM</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="s">'A'</span> <span class="o">*</span> <span class="mi">16</span> <span class="o">+</span> <span class="s">','</span> <span class="o">+</span> <span class="n">pwn</span><span class="p">.</span><span class="nf">b64e</span><span class="p">(</span><span class="n">text</span><span class="p">))</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">REM</span><span class="p">.</span><span class="nf">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">'Exit</span><span class="se">\n</span><span class="s">&gt;&gt;&gt; '</span><span class="p">)</span>
    <span class="k">return</span> <span class="sa">b</span><span class="s">'successful'</span> <span class="ow">in</span> <span class="n">data</span>


<span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="mi">367</span><span class="p">):</span>
    <span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
    <span class="n">api_count</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">26</span><span class="o">**</span><span class="mi">3</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"trying range ({},{})"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="n">size</span><span class="p">))</span>
        <span class="n">api_count</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="nf">decrypt_text</span><span class="p">(</span><span class="nf">multicollision</span><span class="p">(</span><span class="n">derived_keys</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="n">size</span><span class="p">])):</span>
            <span class="k">break</span>
    <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span> <span class="o">=</span> <span class="n">i</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="n">size</span>
    <span class="k">while</span> <span class="n">lo</span> <span class="o">&lt;=</span> <span class="n">hi</span><span class="p">:</span>
        <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">lo</span> <span class="o">+</span> <span class="n">hi</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
        <span class="n">api_count</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"trying range ({},{})"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">lo</span><span class="p">,</span> <span class="n">hi</span><span class="p">))</span>
        <span class="k">if</span> <span class="nf">decrypt_text</span><span class="p">(</span><span class="nf">multicollision</span><span class="p">(</span><span class="n">derived_keys</span><span class="p">[</span><span class="n">lo</span><span class="p">:</span><span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])):</span>
            <span class="n">hi</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">lo</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="k">if</span> <span class="nf">decrypt_text</span><span class="p">(</span><span class="nf">multicollision</span><span class="p">(</span><span class="n">derived_keys</span><span class="p">[</span><span class="n">lo</span><span class="p">:</span><span class="n">lo</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])):</span>
        <span class="n">keyindex</span> <span class="o">=</span> <span class="n">lo</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">keyindex</span> <span class="o">=</span> <span class="n">lo</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="n">password</span> <span class="o">=</span> <span class="n">rev_keys</span><span class="p">[</span><span class="n">derived_keys</span><span class="p">[</span><span class="n">keyindex</span><span class="p">]]</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"key:{} found in {} calls"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">password</span><span class="p">,</span> <span class="n">api_count</span><span class="p">))</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"time taken :"</span><span class="p">,</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start_time</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">password</span>


<span class="n">REM</span><span class="p">.</span><span class="nf">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">'Exit</span><span class="se">\n</span><span class="s">&gt;&gt;&gt;'</span><span class="p">)</span>
<span class="n">password</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">for</span> <span class="n">key_index</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
    <span class="n">REM</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">'1'</span><span class="p">)</span>  <span class="c1"># option1
</span>    <span class="n">REM</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">key_index</span><span class="p">))</span>
    <span class="n">REM</span><span class="p">.</span><span class="nf">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">'Exit</span><span class="se">\n</span><span class="s">&gt;&gt;&gt;'</span><span class="p">)</span>
    <span class="n">password</span> <span class="o">+=</span> <span class="nf">search</span><span class="p">()</span>


<span class="n">REM</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">'2'</span><span class="p">)</span>
<span class="n">REM</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">REM</span><span class="p">.</span><span class="nf">recvregex</span><span class="p">(</span><span class="sa">b</span><span class="s">'CTF{.*}'</span><span class="p">)</span>
<span class="c1"># CTF{gCm_1s_n0t_v3ry_r0bust_4nd_1_sh0uld_us3_s0m3th1ng_els3_h3r3}
</span></code></pre></div></div>

<p>And we get our flag!</p>
<h3 id="ctfgcm_1s_n0t_v3ry_r0bust_4nd_1_sh0uld_us3_s0m3th1ng_els3_h3r3">CTF{gCm_1s_n0t_v3ry_r0bust_4nd_1_sh0uld_us3_s0m3th1ng_els3_h3r3}</h3>]]></content><author><name>deuterium</name><email>farziemailid69@gmail.com</email></author><category term="googlectf" /><category term="2021" /><category term="cryptography" /><category term="AES" /><category term="GCM" /><category term="polynomialring" /><category term="oracle" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">rgbCTF 2020 Crypto - Adequate Encryption Standard</title><link href="https://deut-erium.github.io/WriteUps/2020/rgbctf/crypto/Adequate_Encryption_Standard/2020-07-13-rgbctf-2020-Adequate-Encryption_standard" rel="alternate" type="text/html" title="rgbCTF 2020 Crypto - Adequate Encryption Standard" /><published>2020-07-13T00:00:00+05:30</published><updated>2020-07-13T00:00:00+05:30</updated><id>https://deut-erium.github.io/WriteUps/2020/rgbctf/crypto/Adequate_Encryption_Standard/rgbctf-2020-Adequate-Encryption_standard</id><content type="html" xml:base="https://deut-erium.github.io/WriteUps/2020/rgbctf/crypto/Adequate_Encryption_Standard/2020-07-13-rgbctf-2020-Adequate-Encryption_standard"><![CDATA[<h1 id="aedquate-encryption-standard">Aedquate Encryption Standard</h1>

<h2 id="description">Description</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I wrote my own AES! Can you break it?

hQWYogqLXUO+rePyWkNlBlaAX47/2dCeLFMLrmPKcYRLYZgFuqRC7EtwX4DRtG31XY4az+yOvJJ/pwWR0/J9gg==


~qpwoeirut#5057
</code></pre></div></div>

<h2 id="files">Files</h2>
<ul>
  <li><a href="./adequate_encryption_standard.py">adequate_encryption_standard.py</a></li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">base64</span> <span class="kn">import</span> <span class="n">b64encode</span>

<span class="n">BLOCK_SIZE</span> <span class="o">=</span> <span class="mi">8</span>
<span class="n">ROUNDS</span> <span class="o">=</span> <span class="mi">8</span>

<span class="n">sbox</span> <span class="o">=</span> <span class="p">[</span><span class="mi">111</span><span class="p">,</span> <span class="mi">161</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">136</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">69</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">145</span><span class="p">,</span> <span class="mi">237</span><span class="p">,</span> <span class="mi">169</span><span class="p">,</span> <span class="mi">115</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">138</span><span class="p">,</span> <span class="mi">183</span><span class="p">,</span> <span class="mi">232</span><span class="p">,</span> <span class="mi">95</span><span class="p">,</span> <span class="mi">244</span><span class="p">,</span> <span class="mi">163</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">229</span><span class="p">,</span> <span class="mi">224</span><span class="p">,</span> <span class="mi">104</span><span class="p">,</span> <span class="mi">231</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span> <span class="mi">121</span><span class="p">,</span> <span class="mi">152</span><span class="p">,</span> <span class="mi">97</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">74</span><span class="p">,</span> <span class="mi">96</span><span class="p">,</span> <span class="mi">247</span><span class="p">,</span> <span class="mi">144</span><span class="p">,</span> <span class="mi">194</span><span class="p">,</span> <span class="mi">86</span><span class="p">,</span> <span class="mi">186</span><span class="p">,</span> <span class="mi">234</span><span class="p">,</span> <span class="mi">99</span><span class="p">,</span> <span class="mi">122</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">215</span><span class="p">,</span> <span class="mi">168</span><span class="p">,</span> <span class="mi">173</span><span class="p">,</span> <span class="mi">188</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span> <span class="mi">243</span><span class="p">,</span> <span class="mi">219</span><span class="p">,</span> <span class="mi">203</span><span class="p">,</span> <span class="mi">141</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">171</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">116</span><span class="p">,</span> <span class="mi">178</span><span class="p">,</span> <span class="mi">233</span><span class="p">,</span> <span class="mi">210</span><span class="p">,</span> <span class="mi">184</span><span class="p">,</span> <span class="mi">253</span><span class="p">,</span> <span class="mi">151</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">206</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="mi">133</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">147</span><span class="p">,</span> <span class="mi">137</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">187</span><span class="p">,</span> <span class="mi">129</span><span class="p">,</span> <span class="mi">225</span><span class="p">,</span> <span class="mi">209</span><span class="p">,</span> <span class="mi">191</span><span class="p">,</span> <span class="mi">92</span><span class="p">,</span> <span class="mi">238</span><span class="p">,</span> <span class="mi">127</span><span class="p">,</span> <span class="mi">241</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">160</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">170</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">157</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">205</span><span class="p">,</span> <span class="mi">196</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">146</span><span class="p">,</span> <span class="mi">142</span><span class="p">,</span> <span class="mi">150</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">118</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">216</span><span class="p">,</span> <span class="mi">220</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="mi">112</span><span class="p">,</span> <span class="mi">222</span><span class="p">,</span> <span class="mi">226</span><span class="p">,</span> <span class="mi">126</span><span class="p">,</span> <span class="mi">197</span><span class="p">,</span> <span class="mi">180</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">182</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">148</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">201</span><span class="p">,</span> <span class="mi">236</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">62</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">193</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">164</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">252</span><span class="p">,</span> <span class="mi">166</span><span class="p">,</span> <span class="mi">221</span><span class="p">,</span> <span class="mi">208</span><span class="p">,</span> <span class="mi">176</span><span class="p">,</span> <span class="mi">235</span><span class="p">,</span> <span class="mi">149</span><span class="p">,</span> <span class="mi">109</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">103</span><span class="p">,</span> <span class="mi">223</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">140</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">218</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">153</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">228</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">240</span><span class="p">,</span> <span class="mi">248</span><span class="p">,</span> <span class="mi">246</span><span class="p">,</span> <span class="mi">110</span><span class="p">,</span> <span class="mi">156</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">227</span><span class="p">,</span> <span class="mi">207</span><span class="p">,</span> <span class="mi">254</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">174</span><span class="p">,</span> <span class="mi">79</span><span class="p">,</span> <span class="mi">128</span><span class="p">,</span> <span class="mi">155</span><span class="p">,</span> <span class="mi">251</span><span class="p">,</span> <span class="mi">242</span><span class="p">,</span> <span class="mi">177</span><span class="p">,</span> <span class="mi">135</span><span class="p">,</span> <span class="mi">230</span><span class="p">,</span> <span class="mi">154</span><span class="p">,</span> <span class="mi">179</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">189</span><span class="p">,</span> <span class="mi">143</span><span class="p">,</span> <span class="mi">130</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">107</span><span class="p">,</span> <span class="mi">211</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">105</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">134</span><span class="p">,</span> <span class="mi">124</span><span class="p">,</span> <span class="mi">125</span><span class="p">,</span> <span class="mi">245</span><span class="p">,</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">204</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">131</span><span class="p">,</span> <span class="mi">117</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">114</span><span class="p">,</span> <span class="mi">213</span><span class="p">,</span> <span class="mi">212</span><span class="p">,</span> <span class="mi">102</span><span class="p">,</span> <span class="mi">195</span><span class="p">,</span> <span class="mi">101</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">217</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">198</span><span class="p">,</span> <span class="mi">249</span><span class="p">,</span> <span class="mi">192</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">94</span><span class="p">,</span> <span class="mi">181</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">185</span><span class="p">,</span> <span class="mi">172</span><span class="p">,</span> <span class="mi">165</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">202</span><span class="p">,</span> <span class="mi">106</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">175</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">162</span><span class="p">,</span> <span class="mi">158</span><span class="p">,</span> <span class="mi">119</span><span class="p">,</span> <span class="mi">139</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">108</span><span class="p">,</span> <span class="mi">190</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">159</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">113</span><span class="p">,</span> <span class="mi">214</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="mi">199</span><span class="p">,</span> <span class="mi">167</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">239</span><span class="p">,</span> <span class="mi">84</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">132</span><span class="p">,</span> <span class="mi">98</span><span class="p">]</span>
<span class="n">pbox</span> <span class="o">=</span> <span class="p">[</span><span class="mi">39</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">62</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">25</span><span class="p">]</span>


<span class="k">def</span> <span class="nf">pad</span><span class="p">(</span><span class="n">block</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">block</span> <span class="o">+</span> <span class="nf">chr</span><span class="p">(</span><span class="n">BLOCK_SIZE</span> <span class="o">-</span> <span class="nf">len</span><span class="p">(</span><span class="n">block</span><span class="p">)).</span><span class="nf">encode</span><span class="p">()</span> <span class="o">*</span> <span class="p">(</span><span class="n">BLOCK_SIZE</span> <span class="o">-</span> <span class="nf">len</span><span class="p">(</span><span class="n">block</span><span class="p">))</span>


<span class="k">def</span> <span class="nf">to_blocks</span><span class="p">(</span><span class="n">in_bytes</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">:</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">in_bytes</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="n">BLOCK_SIZE</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">in_bytes</span><span class="p">),</span> <span class="n">BLOCK_SIZE</span><span class="p">)]</span>


<span class="k">def</span> <span class="nf">enc_sub</span><span class="p">(</span><span class="n">in_bytes</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="k">return</span> <span class="nf">bytes</span><span class="p">([</span><span class="n">sbox</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">in_bytes</span><span class="p">])</span>


<span class="k">def</span> <span class="nf">enc_perm</span><span class="p">(</span><span class="n">in_bytes</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="n">num</span> <span class="o">=</span> <span class="nb">int</span><span class="p">.</span><span class="nf">from_bytes</span><span class="p">(</span><span class="n">in_bytes</span><span class="p">,</span> <span class="s">'big'</span><span class="p">)</span>
    <span class="n">binary</span> <span class="o">=</span> <span class="nf">bin</span><span class="p">(</span><span class="n">num</span><span class="p">)[</span><span class="mi">2</span><span class="p">:].</span><span class="nf">rjust</span><span class="p">(</span><span class="n">BLOCK_SIZE</span> <span class="o">*</span> <span class="mi">8</span><span class="p">,</span> <span class="s">'0'</span><span class="p">)</span>
    <span class="n">permuted</span> <span class="o">=</span> <span class="s">''</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">binary</span><span class="p">[</span><span class="n">pbox</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">BLOCK_SIZE</span> <span class="o">*</span> <span class="mi">8</span><span class="p">)])</span>
    <span class="n">out</span> <span class="o">=</span> <span class="nf">bytes</span><span class="p">([</span><span class="nf">int</span><span class="p">(</span><span class="n">permuted</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="mi">8</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">BLOCK_SIZE</span> <span class="o">*</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">)])</span>
    <span class="k">return</span> <span class="n">out</span>


<span class="k">def</span> <span class="nf">expand_key</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">key_len</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="n">expanded</span> <span class="o">=</span> <span class="nf">bytearray</span><span class="p">()</span>
    <span class="n">cur</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">byte</span> <span class="ow">in</span> <span class="n">key</span><span class="p">:</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="p">(</span><span class="n">cur</span> <span class="o">+</span> <span class="n">byte</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">((</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">expanded</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">cur</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="p">[</span><span class="n">key</span><span class="p">[</span><span class="n">i</span> <span class="o">%</span> <span class="nf">len</span><span class="p">(</span><span class="n">key</span><span class="p">)]</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">key_len</span><span class="p">)]:</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="nf">pow</span><span class="p">(</span><span class="n">cur</span><span class="p">,</span> <span class="n">num</span><span class="p">,</span> <span class="mi">256</span><span class="p">)</span>
        <span class="n">expanded</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">cur</span><span class="p">)</span>
    <span class="k">return</span> <span class="nf">bytes</span><span class="p">(</span><span class="n">expanded</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">plain</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="n">blocks</span> <span class="o">=</span> <span class="nf">to_blocks</span><span class="p">(</span><span class="n">plain</span><span class="p">)</span>
    <span class="n">out</span> <span class="o">=</span> <span class="nf">bytearray</span><span class="p">()</span>
    <span class="n">key</span> <span class="o">=</span> <span class="nf">expand_key</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">blocks</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">block</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">blocks</span><span class="p">):</span>
        <span class="n">block</span> <span class="o">=</span> <span class="nf">pad</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
        <span class="k">assert</span> <span class="nf">len</span><span class="p">(</span><span class="n">block</span><span class="p">)</span> <span class="o">==</span> <span class="n">BLOCK_SIZE</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">ROUNDS</span><span class="p">):</span>
            <span class="n">block</span> <span class="o">=</span> <span class="nf">enc_sub</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
            <span class="n">block</span> <span class="o">=</span> <span class="nf">enc_perm</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
            <span class="n">block</span> <span class="o">=</span> <span class="nf">bytearray</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">block</span><span class="p">)):</span>
                <span class="n">block</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^=</span> <span class="n">key</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
        <span class="n">out</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
    <span class="k">return</span> <span class="nf">bytes</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="s">"flag"</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">flag_file</span><span class="p">:</span>
        <span class="n">flag</span> <span class="o">=</span> <span class="n">flag_file</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="s">"key"</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">key_file</span><span class="p">:</span>
        <span class="n">key</span> <span class="o">=</span> <span class="n">key_file</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="nf">b64encode</span><span class="p">(</span><span class="nf">encrypt</span><span class="p">(</span><span class="n">flag</span><span class="p">,</span> <span class="n">key</span><span class="p">)).</span><span class="nf">decode</span><span class="p">())</span>
</code></pre></div></div>

<p>This seems like a custom AES implementation. Note that we are not provided a decryption routine, so lets simply write one.<br />
Implementing one is not too complicated, one just need to reverse the <code class="language-plaintext highlighter-rouge">encrypt</code> function step by step.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">cipher</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span><span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="n">blocks</span> <span class="o">=</span> <span class="nf">to_blocks</span><span class="p">(</span><span class="n">cipher</span><span class="p">)</span>
    <span class="n">out</span> <span class="o">=</span> <span class="nf">bytearray</span><span class="p">()</span>
    <span class="n">key</span> <span class="o">=</span> <span class="nf">expand_key</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">blocks</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">block</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">blocks</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">ROUNDS</span><span class="p">):</span>
            <span class="n">block</span> <span class="o">=</span> <span class="nf">bytearray</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">block</span><span class="p">)):</span>
                <span class="n">block</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^=</span> <span class="n">key</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
            <span class="n">block</span> <span class="o">=</span> <span class="nf">dec_perm</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
            <span class="n">block</span> <span class="o">=</span> <span class="nf">dec_sub</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
        <span class="n">out</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
    <span class="k">return</span> <span class="nf">bytes</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</code></pre></div></div>
<p>Its essentially the encrypt function in reverse, in <code class="language-plaintext highlighter-rouge">encrypt</code>, key is xored at last in the for loop, we do it first.<br />
Then we do reverse of permutation <code class="language-plaintext highlighter-rouge">dec_perm</code> and reverse of substitution <code class="language-plaintext highlighter-rouge">dec_sub</code> in the following functions.</p>

<p>For reversing <code class="language-plaintext highlighter-rouge">enc_sub</code>, we just need to find the index of corresponding byte in the <code class="language-plaintext highlighter-rouge">sbox</code></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">enc_sub</span><span class="p">(</span><span class="n">in_bytes</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="k">return</span> <span class="nf">bytes</span><span class="p">([</span><span class="n">sbox</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">in_bytes</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">dec_sub</span><span class="p">(</span><span class="n">in_bytes</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="k">return</span> <span class="nf">bytes</span><span class="p">([</span><span class="n">sbox</span><span class="p">.</span><span class="nf">index</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">in_bytes</span> <span class="p">])</span>
</code></pre></div></div>

<p>To reverse the permutation,</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">enc_perm</span><span class="p">(</span><span class="n">in_bytes</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="n">num</span> <span class="o">=</span> <span class="nb">int</span><span class="p">.</span><span class="nf">from_bytes</span><span class="p">(</span><span class="n">in_bytes</span><span class="p">,</span> <span class="s">'big'</span><span class="p">)</span>
    <span class="n">binary</span> <span class="o">=</span> <span class="nf">bin</span><span class="p">(</span><span class="n">num</span><span class="p">)[</span><span class="mi">2</span><span class="p">:].</span><span class="nf">rjust</span><span class="p">(</span><span class="n">BLOCK_SIZE</span> <span class="o">*</span> <span class="mi">8</span><span class="p">,</span> <span class="s">'0'</span><span class="p">)</span>
    <span class="n">permuted</span> <span class="o">=</span> <span class="s">''</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">binary</span><span class="p">[</span><span class="n">pbox</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">BLOCK_SIZE</span> <span class="o">*</span> <span class="mi">8</span><span class="p">)])</span>
    <span class="n">out</span> <span class="o">=</span> <span class="nf">bytes</span><span class="p">([</span><span class="nf">int</span><span class="p">(</span><span class="n">permuted</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="mi">8</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">BLOCK_SIZE</span> <span class="o">*</span> <span class="mi">8</span><span class="p">,</span>
 <span class="mi">8</span><span class="p">)])</span>
    <span class="k">return</span> <span class="n">out</span>

<span class="k">def</span> <span class="nf">dec_perm</span><span class="p">(</span><span class="n">in_bytes</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="n">out</span> <span class="o">=</span> <span class="nf">bytearray</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
    <span class="n">permuted</span> <span class="o">=</span> <span class="nf">bin</span><span class="p">(</span><span class="nb">int</span><span class="p">.</span><span class="nf">from_bytes</span><span class="p">(</span><span class="n">in_bytes</span><span class="p">,</span> <span class="s">'big'</span><span class="p">))[</span><span class="mi">2</span><span class="p">:].</span><span class="nf">zfill</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span> <span class="c1">#just converting to binary
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">64</span><span class="p">):</span>
        <span class="n">out</span><span class="p">[</span><span class="n">pbox</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="nf">ord</span><span class="p">(</span><span class="n">permuted</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="c1"># should be ones and zeros but using ord as bytearrays are directly convertible to int
</span>    <span class="n">out_bytes</span> <span class="o">=</span> <span class="nb">int</span><span class="p">.</span><span class="nf">to_bytes</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span><span class="mi">8</span><span class="p">,</span><span class="n">byteorder</span><span class="o">=</span><span class="s">'big'</span><span class="p">)</span> <span class="c1">#converting to bytes again
</span>    <span class="k">return</span> <span class="n">out_bytes</span>
</code></pre></div></div>

<p>Once we have decryption function set up, we can start exploring the challenge :)</p>

<p>The devil at work here is the <code class="language-plaintext highlighter-rouge">expand_key</code> function. One could easily verify that without using much brain  :)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">20</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="nf">expand_key</span><span class="p">(</span><span class="nf">bytes</span><span class="p">([</span><span class="n">i</span><span class="p">]),</span><span class="mi">8</span><span class="p">))</span>
<span class="c1"># 8 since we know the flag is 8*BLOCK_LENGTH bytes
#b'\x00\x01\x01\x01\x01\x01\x01\x01\x01'
#b'\x01\x01\x01\x01\x01\x01\x01\x01\x01'
#b'\x02\x10\x00\x00\x00\x00\x00\x00\x00'
#b'\x03\xd9\xd1\xe1A\x81\x01\x01\x01'
#b'\x04\x00\x00\x00\x00\x00\x00\x00\x00'
#b'\x05\xf9\xf1a\xc1\x81\x01\x01\x01'
#b'\x06\x00\x00\x00\x00\x00\x00\x00\x00'
#b'\x07QaA\x81\x01\x01\x01\x01'
#b'\x08\x00\x00\x00\x00\x00\x00\x00\x00'
#b'\t\xd1\xa1A\x81\x01\x01\x01\x01'
#b'\n\x00\x00\x00\x00\x00\x00\x00\x00'
#b'\x0b\xe9\xb1!\xc1\x81\x01\x01\x01'
#b'\x0c\x00\x00\x00\x00\x00\x00\x00\x00'
#b'\r\t\x11\xa1A\x81\x01\x01\x01'
#b'\x0e\x00\x00\x00\x00\x00\x00\x00\x00'
#b'\x0f!\xc1\x81\x01\x01\x01\x01\x01'
#b'\x10\x00\x00\x00\x00\x00\x00\x00\x00'
#b'\x11!A\x81\x01\x01\x01\x01\x01'
#b'\x12\x00\x00\x00\x00\x00\x00\x00\x00'
#b'\x13y\x91aA\x81\x01\x01\x01'
</span></code></pre></div></div>
<p>Without even looking at the key_expansion, one could say the keys it expands to are quite bad and possibly quite repetitive.<br />
Voila, lets try randomly decrypting with a key.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">flag_enc</span> <span class="o">=</span> <span class="nf">b64decode</span><span class="p">(</span><span class="sa">b</span><span class="s">'hQWYogqLXUO+rePyWkNlBlaAX47/2dCeLFMLrmPKcYRLYZgFuqRC7EtwX4DRtG31XY4az+yOvJJ/pwWR0/J9gg=='</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">decyrpt</span><span class="p">(</span><span class="n">flag_enc</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">decyrpt</span><span class="p">(</span><span class="n">flag_enc</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x01</span><span class="s">'</span><span class="p">))</span>
<span class="c1">#b'\xe2\xaa/\xb8}\xb2\xe1\x9d\xbe\xf0\xad\x1c\xe4)\xa77c3_is_4LW4YS_th3_4nsw3r(but_with_0ptimiz4ti0ns)}'
#b'\x15\xa84N\xff\x83\x00{\xbe\xf0\xad\x1c\xe4)\xa77c3_is_4LW4YS_th3_4nsw3r(but_with_0ptimiz4ti0ns)}'
</span></code></pre></div></div>
<p>One could aready read a lot of the flag! We only lack the first two blocks of the flag.<br />
Why can we read the rest of the flag by decrypting with some non-sense key?<br />
Since in <code class="language-plaintext highlighter-rouge">encrypt</code> function each block is xored with the key byte at the corresponding position, we luckily end up encrypting it with byte <code class="language-plaintext highlighter-rouge">b'\x01'</code> for the last 6 bytes.<br />
And xoring with <code class="language-plaintext highlighter-rouge">b'\x01'</code> would be the same byte again hehe.<br />
But wouldnt it be lost amidst all the permutation and substitution??<br />
No, since we are exactly reversing the permutation and substitution since the xor part dies out!</p>

<p>Why do we have so many 0’s and 1’s in the expanded key?<br />
It is evident from this part</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="p">[</span><span class="n">key</span><span class="p">[</span><span class="n">i</span> <span class="o">%</span> <span class="nf">len</span><span class="p">(</span><span class="n">key</span><span class="p">)]</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">key_len</span><span class="p">)]:</span>
    <span class="n">cur</span> <span class="o">=</span> <span class="nf">pow</span><span class="p">(</span><span class="n">cur</span><span class="p">,</span> <span class="n">num</span><span class="p">,</span> <span class="mi">256</span><span class="p">)</span>
    <span class="n">expanded</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">cur</span><span class="p">)</span>
</code></pre></div></div>
<p>As <code class="language-plaintext highlighter-rouge">cur</code> is repeteadly raised to the power <code class="language-plaintext highlighter-rouge">num</code>, once <code class="language-plaintext highlighter-rouge">cur</code> hits 0 or 1, it will stay 0 or 1 out of its misery.<br />
So all we need to figure out is the first two bytes, which should be quite easy!</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">65536</span><span class="p">):</span>
    <span class="n">key</span> <span class="o">=</span> <span class="nf">long_to_bytes</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="nf">if </span><span class="p">(</span><span class="n">a</span> <span class="p">:</span><span class="o">=</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">flag_enc</span><span class="p">,</span> <span class="n">key</span><span class="p">)).</span><span class="nf">startswith</span><span class="p">(</span><span class="sa">b</span><span class="s">'rgbCTF'</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">key</span><span class="p">)</span>
</code></pre></div></div>
<p>Ugly solution in <a href="./solve.py">solve.py</a></p>

<p>And boom! we have our flag</p>
<h3 id="rgbctfbrut3_f0rc3_is_4lw4ys_th3_4nsw3rbut_with_0ptimiz4ti0ns">rgbCTF{brut3_f0rc3_is_4LW4YS_th3_4nsw3r(but_with_0ptimiz4ti0ns)}</h3>]]></content><author><name>deuterium</name><email>farziemailid69@gmail.com</email></author><category term="rgbCTF" /><category term="2020" /><category term="cryptography" /><category term="AES" /><category term="substitution" /><category term="permutation" /><category term="bruteforce" /><summary type="html"><![CDATA[Aedquate Encryption Standard Description I wrote my own AES! Can you break it? hQWYogqLXUO+rePyWkNlBlaAX47/2dCeLFMLrmPKcYRLYZgFuqRC7EtwX4DRtG31XY4az+yOvJJ/pwWR0/J9gg== ~qpwoeirut#5057 Files adequate_encryption_standard.py from base64 import b64encode BLOCK_SIZE = 8 ROUNDS = 8 sbox = [111, 161, 71, 136, 68, 69, 31, 0, 145, 237, 169, 115, 16, 20, 22, 82, 138, 183, 232, 95, 244, 163, 64, 229, 224, 104, 231, 61, 121, 152, 97, 50, 74, 96, 247, 144, 194, 86, 186, 234, 99, 122, 46, 18, 215, 168, 173, 188, 41, 243, 219, 203, 141, 21, 171, 57, 116, 178, 233, 210, 184, 253, 151, 48, 206, 250, 133, 44, 59, 147, 137, 66, 52, 75, 187, 129, 225, 209, 191, 92, 238, 127, 241, 25, 160, 9, 170, 13, 157, 45, 205, 196, 28, 146, 142, 150, 17, 39, 24, 80, 118, 6, 32, 93, 11, 216, 220, 100, 85, 112, 222, 226, 126, 197, 180, 34, 182, 37, 148, 70, 78, 201, 236, 81, 62, 42, 193, 67, 8, 164, 43, 252, 166, 221, 208, 176, 235, 149, 109, 63, 103, 223, 65, 56, 140, 255, 218, 54, 153, 2, 228, 1, 240, 248, 246, 110, 156, 60, 227, 207, 254, 51, 174, 79, 128, 155, 251, 242, 177, 135, 230, 154, 179, 15, 189, 143, 130, 27, 107, 211, 30, 105, 19, 134, 124, 125, 245, 76, 204, 12, 26, 38, 40, 131, 117, 87, 114, 213, 212, 102, 195, 101, 55, 10, 47, 120, 200, 217, 88, 83, 36, 198, 249, 192, 23, 94, 181, 73, 185, 172, 165, 58, 53, 202, 106, 5, 7, 175, 89, 72, 90, 14, 162, 158, 119, 139, 77, 108, 190, 91, 29, 49, 159, 33, 113, 214, 4, 123, 199, 167, 35, 239, 84, 3, 132, 98] pbox = [39, 20, 18, 62, 4, 60, 19, 43, 33, 6, 51, 61, 40, 35, 47, 16, 23, 58, 31, 53, 28, 55, 54, 30, 17, 42, 34, 45, 49, 13, 46, 0, 26, 2, 8, 3, 11, 48, 63, 36, 37, 7, 32, 5, 27, 59, 29, 44, 14, 56, 21, 22, 12, 52, 57, 41, 10, 1, 24, 38, 50, 15, 9, 25] def pad(block): return block + chr(BLOCK_SIZE - len(block)).encode() * (BLOCK_SIZE - len(block)) def to_blocks(in_bytes: bytes) -&gt; list: return [in_bytes[i:i + BLOCK_SIZE] for i in range(0, len(in_bytes), BLOCK_SIZE)] def enc_sub(in_bytes: bytes) -&gt; bytes: return bytes([sbox[b] for b in in_bytes]) def enc_perm(in_bytes: bytes) -&gt; bytes: num = int.from_bytes(in_bytes, 'big') binary = bin(num)[2:].rjust(BLOCK_SIZE * 8, '0') permuted = ''.join([binary[pbox[i]] for i in range(BLOCK_SIZE * 8)]) out = bytes([int(permuted[i:i + 8], 2) for i in range(0, BLOCK_SIZE * 8, 8)]) return out def expand_key(key: bytes, key_len: int) -&gt; bytes: expanded = bytearray() cur = 0 for byte in key: cur = (cur + byte) &amp; ((1 &lt;&lt; 8) - 1) expanded.append(cur) for num in [key[i % len(key)] * 2 for i in range(key_len)]: cur = pow(cur, num, 256) expanded.append(cur) return bytes(expanded) def encrypt(plain: bytes, key: bytes) -&gt; bytes: blocks = to_blocks(plain) out = bytearray() key = expand_key(key, len(blocks)) for idx, block in enumerate(blocks): block = pad(block) assert len(block) == BLOCK_SIZE for _ in range(ROUNDS): block = enc_sub(block) block = enc_perm(block) block = bytearray(block) for i in range(len(block)): block[i] ^= key[idx] out.extend(block) return bytes(out) if __name__ == '__main__': with open("flag", 'rb') as flag_file: flag = flag_file.read() with open("key", 'rb') as key_file: key = key_file.read() print(b64encode(encrypt(flag, key)).decode()) This seems like a custom AES implementation. Note that we are not provided a decryption routine, so lets simply write one. Implementing one is not too complicated, one just need to reverse the encrypt function step by step. def decrypt(cipher: bytes, key:bytes) -&gt; bytes: blocks = to_blocks(cipher) out = bytearray() key = expand_key(key, len(blocks)) for idx, block in enumerate(blocks): for _ in range(ROUNDS): block = bytearray(block) for i in range(len(block)): block[i] ^= key[idx] block = dec_perm(block) block = dec_sub(block) out.extend(block) return bytes(out) Its essentially the encrypt function in reverse, in encrypt, key is xored at last in the for loop, we do it first. Then we do reverse of permutation dec_perm and reverse of substitution dec_sub in the following functions. For reversing enc_sub, we just need to find the index of corresponding byte in the sbox def enc_sub(in_bytes: bytes) -&gt; bytes: return bytes([sbox[b] for b in in_bytes]) def dec_sub(in_bytes: bytes) -&gt; bytes: return bytes([sbox.index(b) for b in in_bytes ]) To reverse the permutation, def enc_perm(in_bytes: bytes) -&gt; bytes: num = int.from_bytes(in_bytes, 'big') binary = bin(num)[2:].rjust(BLOCK_SIZE * 8, '0') permuted = ''.join([binary[pbox[i]] for i in range(BLOCK_SIZE * 8)]) out = bytes([int(permuted[i:i + 8], 2) for i in range(0, BLOCK_SIZE * 8, 8)]) return out def dec_perm(in_bytes: bytes) -&gt; bytes: out = bytearray(64) permuted = bin(int.from_bytes(in_bytes, 'big'))[2:].zfill(64) #just converting to binary for i in range(64): out[pbox[i]] = ord(permuted[i]) # should be ones and zeros but using ord as bytearrays are directly convertible to int out_bytes = int.to_bytes(int(out,2),8,byteorder='big') #converting to bytes again return out_bytes Once we have decryption function set up, we can start exploring the challenge :) The devil at work here is the expand_key function. One could easily verify that without using much brain :) for i in range(20): print(expand_key(bytes([i]),8)) # 8 since we know the flag is 8*BLOCK_LENGTH bytes #b'\x00\x01\x01\x01\x01\x01\x01\x01\x01' #b'\x01\x01\x01\x01\x01\x01\x01\x01\x01' #b'\x02\x10\x00\x00\x00\x00\x00\x00\x00' #b'\x03\xd9\xd1\xe1A\x81\x01\x01\x01' #b'\x04\x00\x00\x00\x00\x00\x00\x00\x00' #b'\x05\xf9\xf1a\xc1\x81\x01\x01\x01' #b'\x06\x00\x00\x00\x00\x00\x00\x00\x00' #b'\x07QaA\x81\x01\x01\x01\x01' #b'\x08\x00\x00\x00\x00\x00\x00\x00\x00' #b'\t\xd1\xa1A\x81\x01\x01\x01\x01' #b'\n\x00\x00\x00\x00\x00\x00\x00\x00' #b'\x0b\xe9\xb1!\xc1\x81\x01\x01\x01' #b'\x0c\x00\x00\x00\x00\x00\x00\x00\x00' #b'\r\t\x11\xa1A\x81\x01\x01\x01' #b'\x0e\x00\x00\x00\x00\x00\x00\x00\x00' #b'\x0f!\xc1\x81\x01\x01\x01\x01\x01' #b'\x10\x00\x00\x00\x00\x00\x00\x00\x00' #b'\x11!A\x81\x01\x01\x01\x01\x01' #b'\x12\x00\x00\x00\x00\x00\x00\x00\x00' #b'\x13y\x91aA\x81\x01\x01\x01' Without even looking at the key_expansion, one could say the keys it expands to are quite bad and possibly quite repetitive. Voila, lets try randomly decrypting with a key. flag_enc = b64decode(b'hQWYogqLXUO+rePyWkNlBlaAX47/2dCeLFMLrmPKcYRLYZgFuqRC7EtwX4DRtG31XY4az+yOvJJ/pwWR0/J9gg==') print(decyrpt(flag_enc, b'\x00')) print(decyrpt(flag_enc, b'\x01')) #b'\xe2\xaa/\xb8}\xb2\xe1\x9d\xbe\xf0\xad\x1c\xe4)\xa77c3_is_4LW4YS_th3_4nsw3r(but_with_0ptimiz4ti0ns)}' #b'\x15\xa84N\xff\x83\x00{\xbe\xf0\xad\x1c\xe4)\xa77c3_is_4LW4YS_th3_4nsw3r(but_with_0ptimiz4ti0ns)}' One could aready read a lot of the flag! We only lack the first two blocks of the flag. Why can we read the rest of the flag by decrypting with some non-sense key? Since in encrypt function each block is xored with the key byte at the corresponding position, we luckily end up encrypting it with byte b'\x01' for the last 6 bytes. And xoring with b'\x01' would be the same byte again hehe. But wouldnt it be lost amidst all the permutation and substitution?? No, since we are exactly reversing the permutation and substitution since the xor part dies out! Why do we have so many 0’s and 1’s in the expanded key? It is evident from this part for num in [key[i % len(key)] * 2 for i in range(key_len)]: cur = pow(cur, num, 256) expanded.append(cur) As cur is repeteadly raised to the power num, once cur hits 0 or 1, it will stay 0 or 1 out of its misery. So all we need to figure out is the first two bytes, which should be quite easy! for i in range(65536): key = long_to_bytes(i) if (a := decrypt(flag_enc, key)).startswith(b'rgbCTF'): print(a,key) Ugly solution in solve.py And boom! we have our flag rgbCTF{brut3_f0rc3_is_4LW4YS_th3_4nsw3r(but_with_0ptimiz4ti0ns)}]]></summary></entry><entry><title type="html">rgbCTF 2020 Crypto - N-AES</title><link href="https://deut-erium.github.io/WriteUps/2020/rgbctf/crypto/N-AES/2020-07-13-rgbCTF-2020-N-AES" rel="alternate" type="text/html" title="rgbCTF 2020 Crypto - N-AES" /><published>2020-07-13T00:00:00+05:30</published><updated>2020-07-13T00:00:00+05:30</updated><id>https://deut-erium.github.io/WriteUps/2020/rgbctf/crypto/N-AES/rgbCTF-2020-N-AES</id><content type="html" xml:base="https://deut-erium.github.io/WriteUps/2020/rgbctf/crypto/N-AES/2020-07-13-rgbCTF-2020-N-AES"><![CDATA[<h1 id="n-aes">N-AES</h1>

<h2 id="description">Description</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>What if I encrypt something with AES multiple times? nc challenge.rgbsec.xyz 34567


~qpwoeirut#5057
</code></pre></div></div>

<h2 id="files">Files</h2>
<ul>
  <li><a href="./n_aes.py">n_aes.py</a></li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">binascii</span>
<span class="kn">from</span> <span class="n">base64</span> <span class="kn">import</span> <span class="n">b64encode</span><span class="p">,</span> <span class="n">b64decode</span>
<span class="kn">from</span> <span class="n">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
<span class="kn">from</span> <span class="n">Crypto.Util.Padding</span> <span class="kn">import</span> <span class="n">pad</span><span class="p">,</span> <span class="n">unpad</span>
<span class="kn">from</span> <span class="n">os</span> <span class="kn">import</span> <span class="n">urandom</span>
<span class="kn">from</span> <span class="n">random</span> <span class="kn">import</span> <span class="n">seed</span><span class="p">,</span> <span class="n">randint</span>

<span class="n">BLOCK_SIZE</span> <span class="o">=</span> <span class="mi">16</span>


<span class="k">def</span> <span class="nf">rand_block</span><span class="p">(</span><span class="n">key_seed</span><span class="o">=</span><span class="nf">urandom</span><span class="p">(</span><span class="mi">1</span><span class="p">)):</span>
    <span class="nf">seed</span><span class="p">(</span><span class="n">key_seed</span><span class="p">)</span>
    <span class="k">return</span> <span class="nf">bytes</span><span class="p">([</span><span class="nf">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">BLOCK_SIZE</span><span class="p">)])</span>


<span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">plaintext</span><span class="p">,</span> <span class="n">seed_bytes</span><span class="p">):</span>
    <span class="n">ciphertext</span> <span class="o">=</span> <span class="nf">pad</span><span class="p">(</span><span class="nf">b64decode</span><span class="p">(</span><span class="n">plaintext</span><span class="p">),</span> <span class="n">BLOCK_SIZE</span><span class="p">)</span>
    <span class="n">seed_bytes</span> <span class="o">=</span> <span class="nf">b64decode</span><span class="p">(</span><span class="n">seed_bytes</span><span class="p">)</span>
    <span class="k">assert</span> <span class="nf">len</span><span class="p">(</span><span class="n">seed_bytes</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">8</span>
    <span class="k">for</span> <span class="n">seed</span> <span class="ow">in</span> <span class="n">seed_bytes</span><span class="p">:</span>
        <span class="n">ciphertext</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="nf">rand_block</span><span class="p">(</span><span class="n">seed</span><span class="p">),</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_ECB</span><span class="p">).</span><span class="nf">encrypt</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">)</span>

    <span class="k">return</span> <span class="nf">b64encode</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">,</span> <span class="n">seed_bytes</span><span class="p">):</span>
    <span class="n">plaintext</span> <span class="o">=</span> <span class="nf">b64decode</span><span class="p">(</span><span class="n">ciphertext</span><span class="s">"rgbCTF 2020 Crypto - N-AES"</span>    <span class="n">seed_bytes</span> <span class="o">=</span> <span class="nf">b64decode</span><span class="p">(</span><span class="n">seed_bytes</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">byte</span> <span class="ow">in</span> <span class="nf">reversed</span><span class="p">(</span><span class="n">seed_bytes</span><span class="p">):</span>
        <span class="n">plaintext</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="nf">rand_block</span><span class="p">(</span><span class="n">byte</span><span class="p">),</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_ECB</span><span class="p">).</span><span class="nf">decrypt</span><span class="p">(</span><span class="n">plaintext</span><span class="p">)</span>

    <span class="k">return</span> <span class="nf">b64encode</span><span class="p">(</span><span class="nf">unpad</span><span class="p">(</span><span class="n">plaintext</span><span class="p">,</span> <span class="n">BLOCK_SIZE</span><span class="p">))</span>


<span class="k">def</span> <span class="nf">gen_chall</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="n">text</span> <span class="o">=</span> <span class="nf">pad</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">BLOCK_SIZE</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">128</span><span class="p">):</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="nf">rand_block</span><span class="p">(),</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_ECB</span><span class="p">).</span><span class="nf">encrypt</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>

    <span class="k">return</span> <span class="nf">b64encode</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">challenge</span> <span class="o">=</span> <span class="nf">b64encode</span><span class="p">(</span><span class="nf">urandom</span><span class="p">(</span><span class="mi">64</span><span class="p">))</span>
    <span class="nf">print</span><span class="p">(</span><span class="nf">gen_chall</span><span class="p">(</span><span class="n">challenge</span><span class="p">).</span><span class="nf">decode</span><span class="p">())</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"[1] Encrypt"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"[2] Decrypt"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"[3] Solve challenge"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"[4] Give up"</span><span class="p">)</span>

        <span class="n">command</span> <span class="o">=</span> <span class="nf">input</span><span class="p">(</span><span class="s">"&gt; "</span><span class="p">)</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">command</span> <span class="o">==</span> <span class="s">'1'</span><span class="p">:</span>
                <span class="n">text</span> <span class="o">=</span> <span class="nf">input</span><span class="p">(</span><span class="s">"Enter text to encrypt, in base64: "</span><span class="p">)</span>
                <span class="n">seed_bytes</span> <span class="o">=</span> <span class="nf">input</span><span class="p">(</span><span class="s">"Enter key, in base64: "</span><span class="p">)</span>
                <span class="nf">print</span><span class="p">(</span><span class="nf">encrypt</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">seed_bytes</span><span class="p">))</span>
            <span class="k">elif</span> <span class="n">command</span> <span class="o">==</span> <span class="s">'2'</span><span class="p">:</span>
                <span class="n">text</span> <span class="o">=</span> <span class="nf">input</span><span class="p">(</span><span class="s">"Enter text to decrypt, in base64: "</span><span class="p">)</span>
                <span class="n">seed_bytes</span> <span class="o">=</span> <span class="nf">input</span><span class="p">(</span><span class="s">"Enter key, in base64: "</span><span class="p">)</span>
                <span class="nf">print</span><span class="p">(</span><span class="nf">decrypt</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">seed_bytes</span><span class="p">))</span>
            <span class="k">elif</span> <span class="n">command</span> <span class="o">==</span> <span class="s">'3'</span><span class="p">:</span>
                <span class="n">answer</span> <span class="o">=</span> <span class="nf">input</span><span class="p">(</span><span class="s">"Enter the decrypted challenge, in base64: "</span><span class="p">)</span>
                <span class="k">if</span> <span class="nf">b64decode</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span> <span class="o">==</span> <span class="n">challenge</span><span class="p">:</span>
                    <span class="nf">print</span><span class="p">(</span><span class="s">"Correct!"</span><span class="p">)</span>
                    <span class="nf">print</span><span class="p">(</span><span class="s">"Here's your flag:"</span><span class="p">)</span>
                    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="s">"flag"</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                        <span class="nf">print</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">())</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="nf">print</span><span class="p">(</span><span class="s">"Incorrect!"</span><span class="p">)</span>
                <span class="k">break</span>
            <span class="k">elif</span> <span class="n">command</span> <span class="o">==</span> <span class="s">'4'</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="s">"Invalid command!"</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">binascii</span><span class="p">.</span><span class="n">Error</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"Base64 error!"</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"Error!"</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="s">"Bye!"</span><span class="p">)</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<p>On netcatting, we get get a base64 encoded encryption of a base64 encoded random string of 64 bytes.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">challenge</span> <span class="o">=</span> <span class="nf">b64encode</span><span class="p">(</span><span class="nf">urandom</span><span class="p">(</span><span class="mi">64</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">gen_chall</span><span class="p">(</span><span class="n">challenge</span><span class="p">).</span><span class="nf">decode</span><span class="p">())</span>
</code></pre></div></div>

<p>Taking a look at <code class="language-plaintext highlighter-rouge">gen_chall</code></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">gen_chall</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="n">text</span> <span class="o">=</span> <span class="nf">pad</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">BLOCK_SIZE</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">128</span><span class="p">):</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="nf">rand_block</span><span class="p">(),</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_ECB</span><span class="p">).</span><span class="nf">encrypt</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>

    <span class="k">return</span> <span class="nf">b64encode</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</code></pre></div></div>
<p>And</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">rand_block</span><span class="p">(</span><span class="n">key_seed</span><span class="o">=</span><span class="nf">urandom</span><span class="p">(</span><span class="mi">1</span><span class="p">)):</span>
    <span class="nf">seed</span><span class="p">(</span><span class="n">key_seed</span><span class="p">)</span>
    <span class="k">return</span> <span class="nf">bytes</span><span class="p">([</span><span class="nf">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">BLOCK_SIZE</span><span class="p">)])</span>
</code></pre></div></div>
<p>This seems quite tricky, since <code class="language-plaintext highlighter-rouge">rand_block</code> will be presenting some random key and <code class="language-plaintext highlighter-rouge">gen_chall</code> is encrypting with some random key 128 times! right?<br />
<strong>WRONG</strong>, There are some few caveats which we might exploit ;)</p>
<ul>
  <li>Since no <code class="language-plaintext highlighter-rouge">key_seed</code> is specified in the <code class="language-plaintext highlighter-rouge">gen_chall</code> call to <code class="language-plaintext highlighter-rouge">rand_block</code>, it should be taking <code class="language-plaintext highlighter-rouge">key_seed</code> to be <code class="language-plaintext highlighter-rouge">urandom(1)</code> which is simply one byte :)</li>
  <li>More importantly, once it gets called, <code class="language-plaintext highlighter-rouge">key_seed</code> is fixed! So all the random blocks would essentially be the same! One may test it out.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">os</span> <span class="kn">import</span> <span class="n">urandom</span>
<span class="kn">from</span> <span class="n">random</span> <span class="kn">import</span> <span class="n">seed</span><span class="p">,</span> <span class="n">randint</span>

<span class="n">BLOCK_SIZE</span> <span class="o">=</span> <span class="mi">16</span>


<span class="k">def</span> <span class="nf">rand_block</span><span class="p">(</span><span class="n">key_seed</span><span class="o">=</span><span class="nf">urandom</span><span class="p">(</span><span class="mi">1</span><span class="p">)):</span>
    <span class="nf">seed</span><span class="p">(</span><span class="n">key_seed</span><span class="p">)</span>
    <span class="k">return</span> <span class="nf">bytes</span><span class="p">([</span><span class="nf">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">BLOCK_SIZE</span><span class="p">)])</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="nf">rand_block</span><span class="p">())</span>

<span class="c1">#b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w'
#b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w'
#b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w'
#b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w'
#b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w'
#b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w'
#b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w'
#b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w'
#b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w'
#b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w'
</span></code></pre></div></div>

<p>So all that needs to be done is find out that random byte with which seed was initialised, and we will know the key, just decrypt our way out of the flag.</p>

<h2 id="solution">Solution</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pwn</span> <span class="kn">import</span> <span class="n">remote</span>
<span class="kn">from</span> <span class="n">base64</span> <span class="kn">import</span> <span class="n">b64encode</span><span class="p">,</span> <span class="n">b64decode</span>
<span class="kn">from</span> <span class="n">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
<span class="kn">from</span> <span class="n">Crypto.Util.Padding</span> <span class="kn">import</span> <span class="n">pad</span><span class="p">,</span> <span class="n">unpad</span>
<span class="kn">from</span> <span class="n">random</span> <span class="kn">import</span> <span class="n">seed</span><span class="p">,</span> <span class="n">randint</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span> <span class="o">=</span> <span class="s">"challenge.rgbsec.xyz"</span><span class="p">,</span> <span class="mi">34567</span>
<span class="n">REM</span> <span class="o">=</span> <span class="nf">remote</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>

<span class="n">CHALL</span> <span class="o">=</span> <span class="nf">b64decode</span><span class="p">(</span><span class="n">REM</span><span class="p">.</span><span class="nf">recvline</span><span class="p">().</span><span class="nf">strip</span><span class="p">())</span>
<span class="k">def</span> <span class="nf">rand_block</span><span class="p">(</span><span class="n">byte</span><span class="p">):</span>
    <span class="s">"""random block for given seed byte"""</span>
    <span class="nf">seed</span><span class="p">(</span><span class="n">byte</span><span class="p">)</span>
    <span class="k">return</span> <span class="nf">bytes</span><span class="p">([</span><span class="nf">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span> <span class="p">])</span>

<span class="n">REM</span><span class="p">.</span><span class="nf">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">'</span><span class="se">\n</span><span class="s">&gt;'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">dec_serv</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">,</span> <span class="n">seed_bytes</span><span class="p">):</span>
    <span class="s">"""Requests decryption from the server"""</span>
    <span class="n">REM</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">'2'</span><span class="p">)</span>
    <span class="n">REM</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="nf">b64encode</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">))</span>
    <span class="n">REM</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="nf">b64encode</span><span class="p">(</span><span class="n">seed_bytes</span><span class="p">))</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">REM</span><span class="p">.</span><span class="nf">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">'</span><span class="se">\n</span><span class="s">&gt;'</span><span class="p">)</span>
    <span class="k">if</span> <span class="sa">b</span><span class="s">'Error'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
        <span class="n">decd</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="sa">b</span><span class="s">'b</span><span class="se">\'</span><span class="s">([a-zA-Z0-9\+/]+)</span><span class="se">\'</span><span class="s">'</span><span class="p">,</span><span class="n">data</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">return</span> <span class="nf">b64decode</span><span class="p">(</span><span class="n">decd</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
    <span class="n">decryption</span> <span class="o">=</span> <span class="nf">dec_serv</span><span class="p">(</span><span class="n">CHALL</span><span class="p">,</span> <span class="nf">bytes</span><span class="p">([</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="mi">128</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">decryption</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">decryption</span><span class="p">)</span>
        <span class="k">break</span>

<span class="n">REM</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">'3'</span><span class="p">)</span>
<span class="n">REM</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="nf">b64encode</span><span class="p">(</span><span class="nf">decrypt</span><span class="p">(</span><span class="n">CHALL</span><span class="p">)))</span>
<span class="nf">print</span><span class="p">(</span><span class="n">REM</span><span class="p">.</span><span class="nf">recvregex</span><span class="p">(</span><span class="sa">b</span><span class="s">'rgbCTF{.*}'</span><span class="p">).</span><span class="nf">decode</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="wait-that-wont-work"><strong>WAIT! THAT WONT WORK!!</strong></h3>
<p>Tbh, I expected that to work but it didnt! Why?<br />
Because server uses this decryption routine</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">,</span> <span class="n">seed_bytes</span><span class="p">):</span>
    <span class="n">plaintext</span> <span class="o">=</span> <span class="nf">b64decode</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">)</span>
    <span class="n">seed_bytes</span> <span class="o">=</span> <span class="nf">b64decode</span><span class="p">(</span><span class="n">seed_bytes</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">byte</span> <span class="ow">in</span> <span class="nf">reversed</span><span class="p">(</span><span class="n">seed_bytes</span><span class="p">):</span>
        <span class="n">plaintext</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="nf">rand_block</span><span class="p">(</span><span class="n">byte</span><span class="p">),</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_ECB</span><span class="p">).</span><span class="nf">decrypt</span><span class="p">(</span><span class="n">plaintext</span><span class="p">)</span>

    <span class="k">return</span> <span class="nf">b64encode</span><span class="p">(</span><span class="nf">unpad</span><span class="p">(</span><span class="n">plaintext</span><span class="p">,</span> <span class="n">BLOCK_SIZE</span><span class="p">))</span>
</code></pre></div></div>
<p>Still cant spot it out?<br />
All the devil is in <code class="language-plaintext highlighter-rouge">rand_block(byte)</code>. How? Because when byte objects are iterated upon, all the individual bytes are returned as int.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="sa">b</span><span class="s">'a'</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="nf">type</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>

<span class="c1">#97 &lt;class 'int'&gt;
</span></code></pre></div></div>
<p>Hmm, very interesting. But how does that make a difference?<br />
Because <code class="language-plaintext highlighter-rouge">rand_block(i)</code> and <code class="language-plaintext highlighter-rouge">rand_block(byte([i])</code> are completly different for an int <code class="language-plaintext highlighter-rouge">i</code>! Why?<br />
Because internally <code class="language-plaintext highlighter-rouge">seed(key_seed)</code> is used to initialize, and <code class="language-plaintext highlighter-rouge">seed(byte([i]))</code> and <code class="language-plaintext highlighter-rouge">seed(i)</code> are different! WTF!!</p>

<p>This implies the server would <del>not</del> never be able to decrypt using its own decryption routine!</p>

<p>To fix this, all we need to do is to write our own!<br />
We know the decryption is correct just by looking at correct padding, since len(b64encode(64 random bytes)) = 64*4/3 = 85 and we have a ciphertext of len 96.</p>
<blockquote>
  <p>1 in AES initialization suggests <code class="language-plaintext highlighter-rouge">AES.MODE_ECB</code></p>
  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">ct</span><span class="p">):</span>
    <span class="n">ct_orig</span> <span class="o">=</span> <span class="n">ct</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
        <span class="n">ct</span> <span class="o">=</span> <span class="n">ct_orig</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">128</span><span class="p">):</span>
            <span class="n">ct</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="nf">rand_block</span><span class="p">(</span><span class="nf">bytes</span><span class="p">([</span><span class="n">i</span><span class="p">])),</span><span class="mi">1</span><span class="p">).</span><span class="nf">decrypt</span><span class="p">(</span><span class="n">ct</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">return</span> <span class="nf">unpad</span><span class="p">(</span><span class="n">ct</span><span class="p">,</span><span class="mi">16</span><span class="p">)</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="k">continue</span>
</code></pre></div>  </div>
</blockquote>

<p>Putting the final script in <a href="./solve.py">solve.py</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pwn</span> <span class="kn">import</span> <span class="n">remote</span>
<span class="kn">from</span> <span class="n">base64</span> <span class="kn">import</span> <span class="n">b64encode</span><span class="p">,</span> <span class="n">b64decode</span>
<span class="kn">from</span> <span class="n">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
<span class="kn">from</span> <span class="n">Crypto.Util.Padding</span> <span class="kn">import</span> <span class="n">pad</span><span class="p">,</span> <span class="n">unpad</span>
<span class="kn">from</span> <span class="n">random</span> <span class="kn">import</span> <span class="n">seed</span><span class="p">,</span> <span class="n">randint</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span> <span class="o">=</span> <span class="s">"challenge.rgbsec.xyz"</span><span class="p">,</span> <span class="mi">34567</span>
<span class="n">REM</span> <span class="o">=</span> <span class="nf">remote</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>

<span class="n">CHALL</span> <span class="o">=</span> <span class="nf">b64decode</span><span class="p">(</span><span class="n">REM</span><span class="p">.</span><span class="nf">recvline</span><span class="p">().</span><span class="nf">strip</span><span class="p">())</span>
<span class="k">def</span> <span class="nf">rand_block</span><span class="p">(</span><span class="n">byte</span><span class="p">):</span>
    <span class="s">"""random block for given seed byte"""</span>
    <span class="nf">seed</span><span class="p">(</span><span class="n">byte</span><span class="p">)</span>
    <span class="k">return</span> <span class="nf">bytes</span><span class="p">([</span><span class="nf">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span> <span class="p">])</span>

<span class="n">REM</span><span class="p">.</span><span class="nf">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">'</span><span class="se">\n</span><span class="s">&gt;'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">ct</span><span class="p">):</span>
    <span class="n">ct_orig</span> <span class="o">=</span> <span class="n">ct</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
        <span class="n">ct</span> <span class="o">=</span> <span class="n">ct_orig</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">128</span><span class="p">):</span>
            <span class="n">ct</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="nf">rand_block</span><span class="p">(</span><span class="nf">bytes</span><span class="p">([</span><span class="n">i</span><span class="p">])),</span><span class="mi">1</span><span class="p">).</span><span class="nf">decrypt</span><span class="p">(</span><span class="n">ct</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">return</span> <span class="nf">unpad</span><span class="p">(</span><span class="n">ct</span><span class="p">,</span><span class="mi">16</span><span class="p">)</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="k">continue</span>

<span class="n">REM</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">'3'</span><span class="p">)</span>
<span class="n">REM</span><span class="p">.</span><span class="nf">sendline</span><span class="p">(</span><span class="nf">b64encode</span><span class="p">(</span><span class="nf">decrypt</span><span class="p">(</span><span class="n">CHALL</span><span class="p">)))</span>
<span class="nf">print</span><span class="p">(</span><span class="n">REM</span><span class="p">.</span><span class="nf">recvregex</span><span class="p">(</span><span class="sa">b</span><span class="s">'rgbCTF{.*}'</span><span class="p">).</span><span class="nf">decode</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="rgbctfi_d0nt_7hink_7his_d03s_wh47_y0u_7hink_i7_d03s">rgbCTF{i_d0nt_7hink_7his_d03s_wh47_y0u_7hink_i7_d03s}</h3>]]></content><author><name>deuterium</name><email>farziemailid69@gmail.com</email></author><category term="rgbCTF" /><category term="2020" /><category term="cryptography" /><category term="AES" /><category term="netcat" /><category term="python_bytes" /><summary type="html"><![CDATA[N-AES Description What if I encrypt something with AES multiple times? nc challenge.rgbsec.xyz 34567 ~qpwoeirut#5057 Files n_aes.py import binascii from base64 import b64encode, b64decode from Crypto.Cipher import AES from Crypto.Util.Padding import pad, unpad from os import urandom from random import seed, randint BLOCK_SIZE = 16 def rand_block(key_seed=urandom(1)): seed(key_seed) return bytes([randint(0, 255) for _ in range(BLOCK_SIZE)]) def encrypt(plaintext, seed_bytes): ciphertext = pad(b64decode(plaintext), BLOCK_SIZE) seed_bytes = b64decode(seed_bytes) assert len(seed_bytes) &gt;= 8 for seed in seed_bytes: ciphertext = AES.new(rand_block(seed), AES.MODE_ECB).encrypt(ciphertext) return b64encode(ciphertext) def decrypt(ciphertext, seed_bytes): plaintext = b64decode(ciphertext"rgbCTF 2020 Crypto - N-AES" seed_bytes = b64decode(seed_bytes) for byte in reversed(seed_bytes): plaintext = AES.new(rand_block(byte), AES.MODE_ECB).decrypt(plaintext) return b64encode(unpad(plaintext, BLOCK_SIZE)) def gen_chall(text): text = pad(text, BLOCK_SIZE) for i in range(128): text = AES.new(rand_block(), AES.MODE_ECB).encrypt(text) return b64encode(text) def main(): challenge = b64encode(urandom(64)) print(gen_chall(challenge).decode()) while True: print("[1] Encrypt") print("[2] Decrypt") print("[3] Solve challenge") print("[4] Give up") command = input("&gt; ") try: if command == '1': text = input("Enter text to encrypt, in base64: ") seed_bytes = input("Enter key, in base64: ") print(encrypt(text, seed_bytes)) elif command == '2': text = input("Enter text to decrypt, in base64: ") seed_bytes = input("Enter key, in base64: ") print(decrypt(text, seed_bytes)) elif command == '3': answer = input("Enter the decrypted challenge, in base64: ") if b64decode(answer) == challenge: print("Correct!") print("Here's your flag:") with open("flag", 'r') as f: print(f.read()) else: print("Incorrect!") break elif command == '4': break else: print("Invalid command!") except binascii.Error: print("Base64 error!") except Exception: print("Error!") print("Bye!") if __name__ == '__main__': main() On netcatting, we get get a base64 encoded encryption of a base64 encoded random string of 64 bytes. challenge = b64encode(urandom(64)) print(gen_chall(challenge).decode()) Taking a look at gen_chall def gen_chall(text): text = pad(text, BLOCK_SIZE) for i in range(128): text = AES.new(rand_block(), AES.MODE_ECB).encrypt(text) return b64encode(text) And def rand_block(key_seed=urandom(1)): seed(key_seed) return bytes([randint(0, 255) for _ in range(BLOCK_SIZE)]) This seems quite tricky, since rand_block will be presenting some random key and gen_chall is encrypting with some random key 128 times! right? WRONG, There are some few caveats which we might exploit ;) Since no key_seed is specified in the gen_chall call to rand_block, it should be taking key_seed to be urandom(1) which is simply one byte :) More importantly, once it gets called, key_seed is fixed! So all the random blocks would essentially be the same! One may test it out. from os import urandom from random import seed, randint BLOCK_SIZE = 16 def rand_block(key_seed=urandom(1)): seed(key_seed) return bytes([randint(0, 255) for _ in range(BLOCK_SIZE)]) for i in range(10): print(rand_block()) #b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w' #b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w' #b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w' #b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w' #b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w' #b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w' #b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w' #b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w' #b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w' #b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w' So all that needs to be done is find out that random byte with which seed was initialised, and we will know the key, just decrypt our way out of the flag. Solution from pwn import remote from base64 import b64encode, b64decode from Crypto.Cipher import AES from Crypto.Util.Padding import pad, unpad from random import seed, randint import re HOST, PORT = "challenge.rgbsec.xyz", 34567 REM = remote(HOST, PORT) CHALL = b64decode(REM.recvline().strip()) def rand_block(byte): """random block for given seed byte""" seed(byte) return bytes([randint(0,255) for _ in range(16) ]) REM.recvuntil(b'\n&gt;') def dec_serv(ciphertext, seed_bytes): """Requests decryption from the server""" REM.sendline(b'2') REM.sendline(b64encode(ciphertext)) REM.sendline(b64encode(seed_bytes)) data = REM.recvuntil(b'\n&gt;') if b'Error' not in data: decd = re.search(b'b\'([a-zA-Z0-9\+/]+)\'',data)[1] return b64decode(decd) for i in range(256): decryption = dec_serv(CHALL, bytes([i]*128)) if decryption: print(decryption) break REM.sendline(b'3') REM.sendline(b64encode(decrypt(CHALL))) print(REM.recvregex(b'rgbCTF{.*}').decode()) WAIT! THAT WONT WORK!! Tbh, I expected that to work but it didnt! Why? Because server uses this decryption routine def decrypt(ciphertext, seed_bytes): plaintext = b64decode(ciphertext) seed_bytes = b64decode(seed_bytes) for byte in reversed(seed_bytes): plaintext = AES.new(rand_block(byte), AES.MODE_ECB).decrypt(plaintext) return b64encode(unpad(plaintext, BLOCK_SIZE)) Still cant spot it out? All the devil is in rand_block(byte). How? Because when byte objects are iterated upon, all the individual bytes are returned as int. for i in b'a': print(i,type(i)) #97 &lt;class 'int'&gt; Hmm, very interesting. But how does that make a difference? Because rand_block(i) and rand_block(byte([i]) are completly different for an int i! Why? Because internally seed(key_seed) is used to initialize, and seed(byte([i])) and seed(i) are different! WTF!! This implies the server would not never be able to decrypt using its own decryption routine! To fix this, all we need to do is to write our own! We know the decryption is correct just by looking at correct padding, since len(b64encode(64 random bytes)) = 64*4/3 = 85 and we have a ciphertext of len 96. 1 in AES initialization suggests AES.MODE_ECB def decrypt(ct): ct_orig = ct for i in range(256): ct = ct_orig for _ in range(128): ct = AES.new(rand_block(bytes([i])),1).decrypt(ct) try: return unpad(ct,16) except: continue Putting the final script in solve.py from pwn import remote from base64 import b64encode, b64decode from Crypto.Cipher import AES from Crypto.Util.Padding import pad, unpad from random import seed, randint import re HOST, PORT = "challenge.rgbsec.xyz", 34567 REM = remote(HOST, PORT) CHALL = b64decode(REM.recvline().strip()) def rand_block(byte): """random block for given seed byte""" seed(byte) return bytes([randint(0,255) for _ in range(16) ]) REM.recvuntil(b'\n&gt;') def decrypt(ct): ct_orig = ct for i in range(256): ct = ct_orig for _ in range(128): ct = AES.new(rand_block(bytes([i])),1).decrypt(ct) try: return unpad(ct,16) except: continue REM.sendline(b'3') REM.sendline(b64encode(decrypt(CHALL))) print(REM.recvregex(b'rgbCTF{.*}').decode()) rgbCTF{i_d0nt_7hink_7his_d03s_wh47_y0u_7hink_i7_d03s}]]></summary></entry><entry><title type="html">0CTF/TCTF 2020 Crypto - babyring</title><link href="https://deut-erium.github.io/WriteUps/2020/tctf/crypto/babyring/2020-06-30-TCTF-2020-Quals-babyring" rel="alternate" type="text/html" title="0CTF/TCTF 2020 Crypto - babyring" /><published>2020-06-30T00:00:00+05:30</published><updated>2020-06-30T00:00:00+05:30</updated><id>https://deut-erium.github.io/WriteUps/2020/tctf/crypto/babyring/TCTF-2020-Quals-babyring</id><content type="html" xml:base="https://deut-erium.github.io/WriteUps/2020/tctf/crypto/babyring/2020-06-30-TCTF-2020-Quals-babyring"><![CDATA[<h1 id="babyring">Babyring</h1>

<h2 id="description">Description</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc pwnable.org 10001
</code></pre></div></div>
<h2 id="files">Files</h2>
<ul>
  <li><a href="ring_1f0f741fcfdfc52519d7b09b78c97b43.tar.gz">ring.tar.gz</a>
    <ul>
      <li><a href="./release/task.py">release/task.py</a></li>
    </ul>
  </li>
</ul>

<p>task.py reads (trimming most part)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/python2
</span><span class="kn">import</span> <span class="n">os</span><span class="p">,</span><span class="n">random</span><span class="p">,</span><span class="n">sys</span><span class="p">,</span><span class="n">string</span>
<span class="kn">from</span> <span class="n">hashlib</span> <span class="kn">import</span> <span class="n">sha256</span>
<span class="kn">from</span> <span class="n">struct</span> <span class="kn">import</span> <span class="n">pack</span><span class="p">,</span> <span class="n">unpack</span>
<span class="kn">import</span> <span class="n">SocketServer</span>
<span class="kn">from</span> <span class="n">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">ARC4</span>

<span class="kn">from</span> <span class="n">flag</span> <span class="kn">import</span> <span class="n">flag</span>

<span class="n">K</span> <span class="o">=</span> <span class="mi">64</span>

<span class="k">def</span> <span class="nf">gen</span><span class="p">():</span>
    <span class="kn">from</span> <span class="n">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">getStrongPrime</span>
    <span class="n">e</span> <span class="o">=</span> <span class="mi">65537</span>
    <span class="n">Ns</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">K</span><span class="p">):</span>
        <span class="n">p</span> <span class="o">=</span> <span class="nf">getStrongPrime</span><span class="p">(</span><span class="mi">2048</span><span class="p">)</span>
        <span class="n">q</span> <span class="o">=</span> <span class="nf">getStrongPrime</span><span class="p">(</span><span class="mi">2048</span><span class="p">)</span>
        <span class="n">Ns</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="n">q</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">e</span><span class="p">,</span><span class="n">Ns</span>

<span class="n">e</span><span class="p">,</span><span class="n">Ns</span> <span class="o">=</span> <span class="mi">65537</span><span class="p">,</span><span class="c1">#list trimmed[...]
</span><span class="k">class</span> <span class="nc">Task</span><span class="p">(</span><span class="n">SocketServer</span><span class="p">.</span><span class="n">BaseRequestHandler</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">proof_of_work</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">proof</span> <span class="o">=</span> <span class="s">''</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">(</span><span class="n">string</span><span class="p">.</span><span class="n">ascii_letters</span><span class="o">+</span><span class="n">string</span><span class="p">.</span><span class="n">digits</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">xrange</span><span class="p">(</span><span class="mi">20</span><span class="p">)])</span>
        <span class="n">digest</span> <span class="o">=</span> <span class="nf">sha256</span><span class="p">(</span><span class="n">proof</span><span class="p">).</span><span class="nf">hexdigest</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="s">"sha256(XXXX+%s) == %s</span><span class="se">\n</span><span class="s">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">proof</span><span class="p">[</span><span class="mi">4</span><span class="p">:],</span><span class="n">digest</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="s">'Give me XXXX:'</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="nf">recv</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">4</span> <span class="ow">or</span> <span class="nf">sha256</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="n">proof</span><span class="p">[</span><span class="mi">4</span><span class="p">:]).</span><span class="nf">hexdigest</span><span class="p">()</span> <span class="o">!=</span> <span class="n">digest</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="bp">True</span>

    <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="nf">proof_of_work</span><span class="p">():</span>
            <span class="k">return</span>
        <span class="n">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="nf">settimeout</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="nf">sendall</span><span class="p">(</span><span class="s">"message: "</span><span class="p">)</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="nf">recv</span><span class="p">(</span><span class="mh">0x40</span><span class="p">).</span><span class="nf">strip</span><span class="p">()</span>
            <span class="n">ys</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">K</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="nf">sendall</span><span class="p">(</span><span class="s">"x%d: "</span> <span class="o">%</span> <span class="n">i</span><span class="p">)</span>
                <span class="n">x</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="nf">recv</span><span class="p">(</span><span class="mh">0x40</span><span class="p">).</span><span class="nf">strip</span><span class="p">())</span>
                <span class="n">ys</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">pow</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">e</span><span class="p">,</span><span class="n">Ns</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
            <span class="n">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="nf">sendall</span><span class="p">(</span><span class="s">"v: "</span><span class="p">)</span>
            <span class="n">v</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="nf">recv</span><span class="p">(</span><span class="mh">0x40</span><span class="p">).</span><span class="nf">strip</span><span class="p">())</span>

            <span class="n">key</span> <span class="o">=</span> <span class="nf">sha256</span><span class="p">(</span><span class="n">msg</span><span class="p">).</span><span class="nf">digest</span><span class="p">()[:</span><span class="mi">16</span><span class="p">]</span>
            <span class="n">E</span> <span class="o">=</span> <span class="n">ARC4</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">v</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">K</span><span class="p">):</span>
                <span class="n">pt</span> <span class="o">=</span> <span class="p">(</span><span class="n">ys</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">^</span><span class="n">cur</span><span class="p">)</span><span class="o">%</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">64</span><span class="p">)</span>
                <span class="n">ct</span> <span class="o">=</span> <span class="nf">unpack</span><span class="p">(</span><span class="s">'Q'</span><span class="p">,</span> <span class="n">E</span><span class="p">.</span><span class="nf">encrypt</span><span class="p">(</span><span class="nf">pack</span><span class="p">(</span><span class="s">'Q'</span><span class="p">,</span><span class="n">pt</span><span class="p">)))[</span><span class="mi">0</span><span class="p">]</span>
                <span class="n">cur</span> <span class="o">=</span> <span class="n">ct</span>

            <span class="k">if</span> <span class="n">cur</span> <span class="o">==</span> <span class="n">v</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="nf">sendall</span><span class="p">(</span><span class="s">"%s</span><span class="se">\n</span><span class="s">"</span> <span class="o">%</span> <span class="n">flag</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="nf">sendall</span><span class="p">(</span><span class="s">"fin</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>


<span class="k">class</span> <span class="nc">ThreadedServer</span><span class="p">(</span><span class="n">SocketServer</span><span class="p">.</span><span class="n">ThreadingMixIn</span><span class="p">,</span> <span class="n">SocketServer</span><span class="p">.</span><span class="n">TCPServer</span><span class="p">):</span>
    <span class="k">pass</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span> <span class="o">=</span> <span class="s">'0.0.0.0'</span><span class="p">,</span> <span class="mi">10001</span>
    <span class="n">server</span> <span class="o">=</span> <span class="nc">ThreadedServer</span><span class="p">((</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">),</span> <span class="n">Task</span><span class="p">)</span>
    <span class="n">server</span><span class="p">.</span><span class="n">allow_reuse_address</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">server</span><span class="p">.</span><span class="nf">serve_forever</span><span class="p">()</span>
</code></pre></div></div>
<p>The first part is obviously proof of work, in which we have to find 4 bytes <code class="language-plaintext highlighter-rouge">XXXX</code> such that
<code class="language-plaintext highlighter-rouge">sha256(XXXX + 16-char-val) = sha256_hash</code> for provided <code class="language-plaintext highlighter-rouge">16-char-val</code> postfix and <code class="language-plaintext highlighter-rouge">sha256_hash</code><br />
Which is easy to solve</p>
<blockquote>
  <p>using permutations may not always work (in case of repeated characters), earlier I used combinations_with_replacement which had some weird issues which I could not debug
```python
from hashlib import sha256
import string
from itertools import permutations as take
CHARSET_SHA = string.printable[:62].encode() #0-9a-zA-Z as in challenge</p>
</blockquote>

<p>def pow_sha(postfix, hash_val):
    for prefix in take(CHARSET_SHA, 4):
        prefix_bytes = bytes(prefix)
        shaa = sha256(prefix_bytes+postfix).hexdigest()
        if shaa == SHA_256_HASH:
            return prefix_bytes</p>

<p>HOST, PORT = “pwnable.org”, 10001
REM = remote(HOST, PORT)
SHA_CHALL = REM.recvuntil(b’XXXX:’)
#print(SHA_CHALL.decode())
SHA_256_HASH = re.search(b”[0-9a-f]{64}”,SHA_CHALL).group(0).decode()
POSTFIX_STR = re.search(b”[0-9a-zA-Z]{16}”,SHA_CHALL).group(0)
PREFIX_CHALL = pow_sha(POSTFIX_STR, SHA_256_HASH)
REM.send(PREFIX_CHALL)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
Now comes the main part of the challenge, in which we have to provide 64 `xi` values a message `msg` and a value `v`  
The `msg` is sha256 hashed and first 16 bytes are taken to form the `key` for `ARC4`  
The value `v` is XORed with last 64 bits of `pow(x[i], e, Ns[i])` and then `ARC4` encrypted. The goal is to produce the final value equal to the input `v`.  

Since `ARC4` is simply a stream cipher, and encryption is just XORing the plaintext with a keystream, our final value `cur` is essentially `v^ys[0]^...ys[63]^xors[0]^xors[1]...^xors[63]`, where `ys[0..63]` are the last 64 bits of the respective `y[0..63]`  and `xors[0]^xors[1]...^xors[63]` part is essentially dependent on `key` and an invariant for a given `key`, lets call it `invariant(key)` (bye bye `ARC4`).  
All we need to do is to find `x[0..63]` such that `ys[0]^ys[1]...^ys[63] == invariant(key)` and we will have `cur==v` for all `v` as a consequence.

```python
from Crypto.Cipher import ARC4
from hashlib import sha256
from struct import pack, unpack

def encrypt_64(v,key,y):
    E = ARC4.new(key)
    cur = v
    for i in range(64):
        pt = (cur^y[i])%(1&lt;&lt;64)
        ct = unpack('Q',E.encrypt(pack('Q',pt)))[0]
        cur = ct
    return cur

def invariant(key):
    key_val = sha256(key).digest()[:16]
    return encrypt_64(0,key_val,[0 for i in range(64)])

print(invariant(b'aaa'))
# 911494890333775973
</code></pre></div></div>
<p>One could simply put <code class="language-plaintext highlighter-rouge">x[i]</code> as some value such that <code class="language-plaintext highlighter-rouge">ys[i] == invariant</code> and all other <code class="language-plaintext highlighter-rouge">xs == 0</code> but only if one could solve ANY of the RSA by factoring 4096 bit <code class="language-plaintext highlighter-rouge">Ns</code>, which is obviously not feasible!</p>

<p>Not knowing much linear algebra, I found this <a href="https://cs.stackexchange.com/questions/53331/minimal-basis-for-set-of-binary-vectors-using-xor/53337#53337">stackexchange post</a> and <a href="https://math.stackexchange.com/questions/2054271/gaussian-elimination-gf2">this</a> showing all that needs to be done is to have a set of 64 64-bit vectors, and we can represent any 64 bit value using xor of a subset of the vectors. Taking the corresponding <code class="language-plaintext highlighter-rouge">ys</code> for <code class="language-plaintext highlighter-rouge">xs = 2</code> for all <code class="language-plaintext highlighter-rouge">i</code>, and solving the subset for given invariant, we will only set <code class="language-plaintext highlighter-rouge">x[i] = 2</code> in the <code class="language-plaintext highlighter-rouge">i</code> in subset else <code class="language-plaintext highlighter-rouge">x[i]=0</code> (to have no effect).</p>

<p>Sagemath ftw! <a href="https://cocalc.com/app">CoCalc</a> for the poor</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Ns not shown here
</span><span class="n">last_64</span> <span class="o">=</span> <span class="p">[</span><span class="nf">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">e</span><span class="p">,</span><span class="n">i</span><span class="p">)</span><span class="o">%</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">64</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">Ns</span><span class="p">]</span>
<span class="n">invariant</span> <span class="o">=</span> <span class="mi">911494890333775973</span> <span class="c1">#for msg = b'aaa'
</span><span class="n">I</span> <span class="o">=</span> <span class="nc">GF</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">64</span><span class="p">)</span>
<span class="n">last_64_mat</span> <span class="o">=</span> <span class="p">[</span> <span class="nf">list</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nf">bin</span><span class="p">(</span><span class="n">i</span><span class="p">)[</span><span class="mi">2</span><span class="p">:].</span><span class="nf">zfill</span><span class="p">(</span><span class="mi">64</span><span class="p">)))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">last_64</span>  <span class="p">]</span>
<span class="n">mat</span> <span class="o">=</span> <span class="nf">matrix</span><span class="p">(</span><span class="n">I</span><span class="p">,</span><span class="n">last_64_mat</span><span class="p">)</span>
<span class="n">invariant_vec</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nf">bin</span><span class="p">(</span><span class="n">invariant</span><span class="p">)[</span><span class="mi">2</span><span class="p">:].</span><span class="nf">zfill</span><span class="p">(</span><span class="mi">64</span><span class="p">)))</span>
<span class="n">invariant_vec</span> <span class="o">=</span> <span class="nf">matrix</span><span class="p">(</span><span class="n">I</span><span class="p">,</span><span class="n">invariant_vec</span><span class="p">)</span>
<span class="n">op</span> <span class="o">=</span> <span class="n">mat</span><span class="p">.</span><span class="nf">solve_left</span><span class="p">(</span><span class="n">invariant_vec</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">op</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</code></pre></div></div>
<p>Awesome! we have
<code class="language-plaintext highlighter-rouge">(0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1)</code> as our output vector, we just have to return <code class="language-plaintext highlighter-rouge">xi</code> as <code class="language-plaintext highlighter-rouge">2*op</code> and we are done ;)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">xs</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">xs</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">xs</span><span class="p">]</span>
<span class="n">REM</span><span class="p">.</span><span class="nf">recv</span><span class="p">()</span>
<span class="n">REM</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="sa">b</span><span class="s">'aaa'</span><span class="p">)</span> <span class="c1">#message
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">64</span><span class="p">):</span>
    <span class="n">REM</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">xs</span><span class="p">[</span><span class="n">i</span><span class="p">]).</span><span class="nf">encode</span><span class="p">())</span> <span class="c1">#xi's
</span>    <span class="n">REM</span><span class="p">.</span><span class="nf">recv</span><span class="p">()</span>

<span class="n">REM</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="sa">b</span><span class="s">'0'</span><span class="p">)</span> <span class="c1">#v any v would do the job ;)
</span><span class="n">REM</span><span class="p">.</span><span class="nf">recv</span><span class="p">()</span>
<span class="c1">#flag{babbbcbdbebfbgbhbibjbkblbmbnbobpbqbrbsbtbubvbwbxby}
</span></code></pre></div></div>
<p>Unorganized code in files <a href="./solve.py">solve.py</a>, <a href="./part2.sage">part2.sage</a> and <a href="./test.py">test.py</a></p>

<h3 id="flagbabbbcbdbebfbgbhbibjbkblbmbnbobpbqbrbsbtbubvbwbxby">flag{babbbcbdbebfbgbhbibjbkblbmbnbobpbqbrbsbtbubvbwbxby}</h3>]]></content><author><name>deuterium</name><email>farziemailid69@gmail.com</email></author><category term="0CTF" /><category term="2020" /><category term="cryptography" /><category term="sagemath" /><category term="rc4" /><category term="PoW" /><category term="gaussian_elimination" /><category term="GF2" /><summary type="html"><![CDATA[Babyring Description nc pwnable.org 10001 Files ring.tar.gz release/task.py task.py reads (trimming most part) #!/usr/bin/python2 import os,random,sys,string from hashlib import sha256 from struct import pack, unpack import SocketServer from Crypto.Cipher import ARC4 from flag import flag K = 64 def gen(): from Crypto.Util.number import getStrongPrime e = 65537 Ns = [] for i in range(K): p = getStrongPrime(2048) q = getStrongPrime(2048) Ns.append(p*q) return e,Ns e,Ns = 65537,#list trimmed[...] class Task(SocketServer.BaseRequestHandler): def proof_of_work(self): proof = ''.join([random.choice(string.ascii_letters+string.digits) for _ in xrange(20)]) digest = sha256(proof).hexdigest() self.request.send("sha256(XXXX+%s) == %s\n" % (proof[4:],digest)) self.request.send('Give me XXXX:') x = self.request.recv(10) x = x.strip() if len(x) != 4 or sha256(x+proof[4:]).hexdigest() != digest: return False return True def handle(self): if not self.proof_of_work(): return self.request.settimeout(3) try: self.request.sendall("message: ") msg = self.request.recv(0x40).strip() ys = [] for i in range(K): self.request.sendall("x%d: " % i) x = int(self.request.recv(0x40).strip()) ys.append(pow(x,e,Ns[i])) self.request.sendall("v: ") v = int(self.request.recv(0x40).strip()) key = sha256(msg).digest()[:16] E = ARC4.new(key) cur = v for i in range(K): pt = (ys[i]^cur)%(1&lt;&lt;64) ct = unpack('Q', E.encrypt(pack('Q',pt)))[0] cur = ct if cur == v: self.request.sendall("%s\n" % flag) self.request.sendall("fin\n") finally: self.request.close() class ThreadedServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer): pass if __name__ == "__main__": HOST, PORT = '0.0.0.0', 10001 server = ThreadedServer((HOST, PORT), Task) server.allow_reuse_address = True server.serve_forever() The first part is obviously proof of work, in which we have to find 4 bytes XXXX such that sha256(XXXX + 16-char-val) = sha256_hash for provided 16-char-val postfix and sha256_hash Which is easy to solve using permutations may not always work (in case of repeated characters), earlier I used combinations_with_replacement which had some weird issues which I could not debug ```python from hashlib import sha256 import string from itertools import permutations as take CHARSET_SHA = string.printable[:62].encode() #0-9a-zA-Z as in challenge def pow_sha(postfix, hash_val): for prefix in take(CHARSET_SHA, 4): prefix_bytes = bytes(prefix) shaa = sha256(prefix_bytes+postfix).hexdigest() if shaa == SHA_256_HASH: return prefix_bytes HOST, PORT = “pwnable.org”, 10001 REM = remote(HOST, PORT) SHA_CHALL = REM.recvuntil(b’XXXX:’) #print(SHA_CHALL.decode()) SHA_256_HASH = re.search(b”[0-9a-f]{64}”,SHA_CHALL).group(0).decode() POSTFIX_STR = re.search(b”[0-9a-zA-Z]{16}”,SHA_CHALL).group(0) PREFIX_CHALL = pow_sha(POSTFIX_STR, SHA_256_HASH) REM.send(PREFIX_CHALL) Now comes the main part of the challenge, in which we have to provide 64 `xi` values a message `msg` and a value `v` The `msg` is sha256 hashed and first 16 bytes are taken to form the `key` for `ARC4` The value `v` is XORed with last 64 bits of `pow(x[i], e, Ns[i])` and then `ARC4` encrypted. The goal is to produce the final value equal to the input `v`. Since `ARC4` is simply a stream cipher, and encryption is just XORing the plaintext with a keystream, our final value `cur` is essentially `v^ys[0]^...ys[63]^xors[0]^xors[1]...^xors[63]`, where `ys[0..63]` are the last 64 bits of the respective `y[0..63]` and `xors[0]^xors[1]...^xors[63]` part is essentially dependent on `key` and an invariant for a given `key`, lets call it `invariant(key)` (bye bye `ARC4`). All we need to do is to find `x[0..63]` such that `ys[0]^ys[1]...^ys[63] == invariant(key)` and we will have `cur==v` for all `v` as a consequence. ```python from Crypto.Cipher import ARC4 from hashlib import sha256 from struct import pack, unpack def encrypt_64(v,key,y): E = ARC4.new(key) cur = v for i in range(64): pt = (cur^y[i])%(1&lt;&lt;64) ct = unpack('Q',E.encrypt(pack('Q',pt)))[0] cur = ct return cur def invariant(key): key_val = sha256(key).digest()[:16] return encrypt_64(0,key_val,[0 for i in range(64)]) print(invariant(b'aaa')) # 911494890333775973 One could simply put x[i] as some value such that ys[i] == invariant and all other xs == 0 but only if one could solve ANY of the RSA by factoring 4096 bit Ns, which is obviously not feasible! Not knowing much linear algebra, I found this stackexchange post and this showing all that needs to be done is to have a set of 64 64-bit vectors, and we can represent any 64 bit value using xor of a subset of the vectors. Taking the corresponding ys for xs = 2 for all i, and solving the subset for given invariant, we will only set x[i] = 2 in the i in subset else x[i]=0 (to have no effect). Sagemath ftw! CoCalc for the poor #Ns not shown here last_64 = [pow(2,e,i)%(1&lt;&lt;64) for i in Ns] invariant = 911494890333775973 #for msg = b'aaa' I = GF(2**64) last_64_mat = [ list(map(int, bin(i)[2:].zfill(64))) for i in last_64 ] mat = matrix(I,last_64_mat) invariant_vec = list(map(int, bin(invariant)[2:].zfill(64))) invariant_vec = matrix(I,invariant_vec) op = mat.solve_left(invariant_vec) print(op[0]) Awesome! we have (0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1) as our output vector, we just have to return xi as 2*op and we are done ;) xs = (0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1) xs = [2*i for i in xs] REM.recv() REM.send(b'aaa') #message for i in range(64): REM.send(str(xs[i]).encode()) #xi's REM.recv() REM.send(b'0') #v any v would do the job ;) REM.recv() #flag{babbbcbdbebfbgbhbibjbkblbmbnbobpbqbrbsbtbubvbwbxby} Unorganized code in files solve.py, part2.sage and test.py flag{babbbcbdbebfbgbhbibjbkblbmbnbobpbqbrbsbtbubvbwbxby}]]></summary></entry><entry><title type="html">Redpwn 2020 Crypto - 12 Shades of Redpwn</title><link href="https://deut-erium.github.io/WriteUps/2020/redpwn/crypto/12-shades-of-redpwn/2020-06-27-redpwn-2020-12-shades-of-redpwn" rel="alternate" type="text/html" title="Redpwn 2020 Crypto - 12 Shades of Redpwn" /><published>2020-06-27T00:00:00+05:30</published><updated>2020-06-27T00:00:00+05:30</updated><id>https://deut-erium.github.io/WriteUps/2020/redpwn/crypto/12-shades-of-redpwn/redpwn-2020-12-shades-of-redpwn</id><content type="html" xml:base="https://deut-erium.github.io/WriteUps/2020/redpwn/crypto/12-shades-of-redpwn/2020-06-27-redpwn-2020-12-shades-of-redpwn"><![CDATA[<h1 id="12-shades-of-redpwn">12-shades-of-redpwn</h1>

<h2 id="description">Description</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Everyone's favorite guess god Tux just sent me a flag that he somehow encrypted with a color wheel!

I don't even know where to start, the wheel looks more like a clock than a cipher... can you help me crack the code?
</code></pre></div></div>

<h2 id="files">Files</h2>

<ul>
  <li><a href="color-wheel.jpg">color-wheel.jpg</a></li>
</ul>

<p><img src="color-wheel.jpg" alt="" /></p>

<ul>
  <li><a href="ciphertext.jpg">ciphertext.jpg</a> “Text” XD</li>
</ul>

<p><img src="ciphertext.jpg" alt="" /></p>

<p>Lets think like a clock, and start numbering colors from <code class="language-plaintext highlighter-rouge">0-11</code></p>

<p><img src="color-wheel2.gif" alt="" /></p>

<p>And if we map the corresponding numbers, we get</p>

<p><img src="ciphertext-extracted.jpg" alt="" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>86 90 81 87 a3 49 99 43 97 97 41 92 49 7b 41 97 7b 44 92 7b 44 96 98 a5
</code></pre></div></div>

<p>Now, we know that the flag begins with the prefix <code class="language-plaintext highlighter-rouge">flag{</code>, which helps us easily guess what it is, since <code class="language-plaintext highlighter-rouge">'f'</code> and <code class="language-plaintext highlighter-rouge">'l'</code> differ by <code class="language-plaintext highlighter-rouge">4</code>, here the ciphertext also differs by <code class="language-plaintext highlighter-rouge">4</code> i.e <code class="language-plaintext highlighter-rouge">90-86</code>. Also, <code class="language-plaintext highlighter-rouge">'l'</code> and <code class="language-plaintext highlighter-rouge">'a'</code> differ by 11, which confirms, that it is base 12 encoding.</p>

<p>Voila, here we go</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">EXTRACTED</span> <span class="o">=</span> <span class="s">'86 90 81 87 a3 49 99 43 97 97 41 92 49 7b 41 97 7b 44 92 7b 44 96 98 a5'</span>

<span class="n">flag</span> <span class="o">=</span> <span class="s">''</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="nf">chr</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="mi">12</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">EXTRACTED</span><span class="p">.</span><span class="nf">split</span><span class="p">()])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="flag--flag9u3ss1n9_1s_4n_4rt">flag = flag{9u3ss1n9_1s_4n_4rt}</h3>]]></content><author><name>deuterium</name><email>farziemailid69@gmail.com</email></author><category term="2020" /><category term="redpwn" /><category term="cryptography" /><category term="known_plaintext" /><category term="guess" /><category term="base12" /><summary type="html"><![CDATA[12-shades-of-redpwn Description Everyone's favorite guess god Tux just sent me a flag that he somehow encrypted with a color wheel! I don't even know where to start, the wheel looks more like a clock than a cipher... can you help me crack the code? Files color-wheel.jpg ciphertext.jpg “Text” XD Lets think like a clock, and start numbering colors from 0-11 And if we map the corresponding numbers, we get 86 90 81 87 a3 49 99 43 97 97 41 92 49 7b 41 97 7b 44 92 7b 44 96 98 a5 Now, we know that the flag begins with the prefix flag{, which helps us easily guess what it is, since 'f' and 'l' differ by 4, here the ciphertext also differs by 4 i.e 90-86. Also, 'l' and 'a' differ by 11, which confirms, that it is base 12 encoding. Voila, here we go EXTRACTED = '86 90 81 87 a3 49 99 43 97 97 41 92 49 7b 41 97 7b 44 92 7b 44 96 98 a5' flag = ''.join([chr(int(i,12)) for i in EXTRACTED.split()]) print(flag) flag = flag{9u3ss1n9_1s_4n_4rt}]]></summary></entry><entry><title type="html">Redpwn 2020 Crypto - 4k-rsa</title><link href="https://deut-erium.github.io/WriteUps/2020/redpwn/crypto/4k-rsa/2020-06-27-redpwn-2020-4k-rsa" rel="alternate" type="text/html" title="Redpwn 2020 Crypto - 4k-rsa" /><published>2020-06-27T00:00:00+05:30</published><updated>2020-06-27T00:00:00+05:30</updated><id>https://deut-erium.github.io/WriteUps/2020/redpwn/crypto/4k-rsa/redpwn-2020-4k-rsa</id><content type="html" xml:base="https://deut-erium.github.io/WriteUps/2020/redpwn/crypto/4k-rsa/2020-06-27-redpwn-2020-4k-rsa"><![CDATA[<h1 id="4k-rsa">4k-rsa</h1>

<h2 id="description">Description</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Only n00bz use 2048-bit RSA. True gamers use keys that are at least 4k bits long, no matter how many primes it takes...
</code></pre></div></div>

<h2 id="files">Files</h2>
<p><a href="./4k-rsa-public-key.txt">4k-rsa-public-key.txt</a> which contains a <code class="language-plaintext highlighter-rouge">n, e, c</code> triple</p>

<p>Seems like there are a lot of primes in the factorization of <code class="language-plaintext highlighter-rouge">n</code>, since the factorization process is influenced directly by the size of prime factors and not the size of the number being factored itself, it should be fairly doable by <a href="https://www.alpertron.com.ar/ECM.HTM">alpetron.ar</a></p>

<p><img src="alpetron.PNG" alt="" /></p>

<p>It took about half an hour to factor, one may engage to other activities or alternatively try if the factors are available on <a href="http://factordb.com/">factordb</a>.<br />
Anyways, once finished factoring, alpetron produces both the <a href="./factors">factors</a> and the Euler’s totient <code class="language-plaintext highlighter-rouge">phi</code> which will be used to compute <code class="language-plaintext highlighter-rouge">d</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>d = pow(e,-1,phi) # on python3.8
# or gmpy2.invert(e,phi) 
m = pow(c,d,n)
print(bytes.fromhex(hex(m)[2:]).decode())
</code></pre></div></div>
<p>And hurray, we have our flag</p>

<h3 id="flagt0000_m4nyyyy_pr1m355555">flag{t0000_m4nyyyy_pr1m355555}</h3>]]></content><author><name>deuterium</name><email>farziemailid69@gmail.com</email></author><category term="redpwn" /><category term="2020" /><category term="cryptography" /><category term="alpertron" /><category term="ECM" /><category term="RSA" /><summary type="html"><![CDATA[4k-rsa Description Only n00bz use 2048-bit RSA. True gamers use keys that are at least 4k bits long, no matter how many primes it takes... Files 4k-rsa-public-key.txt which contains a n, e, c triple Seems like there are a lot of primes in the factorization of n, since the factorization process is influenced directly by the size of prime factors and not the size of the number being factored itself, it should be fairly doable by alpetron.ar It took about half an hour to factor, one may engage to other activities or alternatively try if the factors are available on factordb. Anyways, once finished factoring, alpetron produces both the factors and the Euler’s totient phi which will be used to compute d d = pow(e,-1,phi) # on python3.8 # or gmpy2.invert(e,phi) m = pow(c,d,n) print(bytes.fromhex(hex(m)[2:]).decode()) And hurray, we have our flag flag{t0000_m4nyyyy_pr1m355555}]]></summary></entry></feed>