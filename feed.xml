<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://deut-erium.github.io/WriteUps/WriteUps/feed.xml" rel="self" type="application/atom+xml" /><link href="https://deut-erium.github.io/WriteUps/WriteUps/" rel="alternate" type="text/html" hreflang="en" /><updated>2022-05-28T05:25:59+05:30</updated><id>https://deut-erium.github.io/WriteUps/WriteUps/feed.xml</id><title type="html">CTF Writeups</title><subtitle>Himanshu Sheoran is a nerd typically writing about cryptography, Capture The Flag i.e CTF events, hacking, cybersecurity, SAT SMT solvers and  computer science in general.
</subtitle><author><name>deuterium</name><email>farziemailid69@gmail.com</email></author><entry><title type="html">Cyber Apocalypse HTB 2022 Crypto - Memory Acceleration</title><link href="https://deut-erium.github.io/WriteUps/WriteUps/2022/cyber_apocalypse/crypto/memory_acceleration/2022-05-21-HTB-Cyber-Apcalypse-2022-Memory-Acceleration" rel="alternate" type="text/html" title="Cyber Apocalypse HTB 2022 Crypto - Memory Acceleration" /><published>2022-05-21T00:00:00+05:30</published><updated>2022-05-21T00:00:00+05:30</updated><id>https://deut-erium.github.io/WriteUps/WriteUps/2022/cyber_apocalypse/crypto/memory_acceleration/HTB-Cyber-Apcalypse-2022-Memory-Acceleration</id><content type="html" xml:base="https://deut-erium.github.io/WriteUps/WriteUps/2022/cyber_apocalypse/crypto/memory_acceleration/2022-05-21-HTB-Cyber-Apcalypse-2022-Memory-Acceleration"><![CDATA[<!--more-->

<h2 id="challenge-description">Challenge Description</h2>

<blockquote>
  <p>Memory Acceleration
While everyone was asleep, you were pushing the capabilities of your technology to the max. Night after night, you frantically tried to repair the encrypted parts of your brain, reversing custom protocols implemented by your father, wanting to pinpoint exactly what damage had been done and constantly keeping notes because of your inability of forming new memories. On one of those nights, you had a flashback. Your father had always talked about a new technology and how it would change the galaxy. You realized that he had used it on you. This technology dealt with a proof of a work function and decentralized networks. Along with Virgil’s help, you had a “Eureka!” moment, but his approach, brute forcing, meant draining all your energy. Can you find a quicker way to validate new memory blocks?</p>
</blockquote>

<h2 id="source-files">Source Files</h2>
<blockquote>
  <p><a href="source.py">source.py</a><br />
<a href="pofwork.py">pofwork.py</a></p>
</blockquote>

<h2 id="source-analysis">Source Analysis</h2>
<p>From <code class="language-plaintext highlighter-rouge">source.py</code></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">socketserver</span>
<span class="kn">import</span> <span class="nn">signal</span>
<span class="kn">from</span> <span class="nn">pofwork</span> <span class="kn">import</span> <span class="n">phash</span>


<span class="n">DEBUG_MSG</span> <span class="o">=</span> <span class="s">"DEBUG MSG - "</span>
<span class="n">WELCOME_MSG</span> <span class="o">=</span> <span class="s">"""Virgil says:
Klaus I'm connecting the serial debugger to your memory.
Please stay still. We don't want anything wrong to happen.
Ok you should be able to see debug messages now..</span><span class="se">\n\n</span><span class="s">"""</span>


<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'memories.txt'</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">MEMORIES</span> <span class="o">=</span> <span class="p">[</span><span class="n">m</span><span class="p">.</span><span class="n">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">f</span><span class="p">.</span><span class="n">readlines</span><span class="p">()]</span>


<span class="k">class</span> <span class="nc">Handler</span><span class="p">(</span><span class="n">socketserver</span><span class="p">.</span><span class="n">BaseRequestHandler</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">signal</span><span class="p">.</span><span class="n">alarm</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">main</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">request</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">ReusableTCPServer</span><span class="p">(</span><span class="n">socketserver</span><span class="p">.</span><span class="n">ForkingMixIn</span><span class="p">,</span> <span class="n">socketserver</span><span class="p">.</span><span class="n">TCPServer</span><span class="p">):</span>
    <span class="k">pass</span>


<span class="k">def</span> <span class="nf">sendMessage</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span>
    <span class="n">s</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>


<span class="k">def</span> <span class="nf">recieveMessage</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span>
    <span class="n">sendMessage</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">msg</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">s</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">4096</span><span class="p">).</span><span class="n">decode</span><span class="p">().</span><span class="n">strip</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="n">block</span> <span class="o">=</span> <span class="s">""</span>
    <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">sendMessage</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">WELCOME_MSG</span><span class="p">)</span>

    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">block</span> <span class="o">+=</span> <span class="n">MEMORIES</span><span class="p">[</span><span class="n">counter</span><span class="p">]</span>

        <span class="n">sendMessage</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">DEBUG_MSG</span> <span class="o">+</span>
                    <span class="sa">f</span><span class="s">"You need to validate this memory block: </span><span class="si">{</span><span class="n">block</span><span class="si">}</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>

        <span class="n">first_key</span> <span class="o">=</span> <span class="n">recieveMessage</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">DEBUG_MSG</span> <span class="o">+</span> <span class="s">"Enter first key: "</span><span class="p">)</span>
        <span class="n">second_key</span> <span class="o">=</span> <span class="n">recieveMessage</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">DEBUG_MSG</span> <span class="o">+</span> <span class="s">"Enter second key: "</span><span class="p">)</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="n">first_key</span><span class="p">,</span> <span class="n">second_key</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">first_key</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">second_key</span><span class="p">)</span>
            <span class="n">proof_of_work</span> <span class="o">=</span> <span class="n">phash</span><span class="p">(</span><span class="n">block</span><span class="p">,</span> <span class="n">first_key</span><span class="p">,</span> <span class="n">second_key</span><span class="p">)</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="n">sendMessage</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">Virgil says: </span><span class="se">\n</span><span class="s">"</span>
                        <span class="s">"Be carefull Klaus!! You don't want to damage yourself.</span><span class="se">\n</span><span class="s">"</span>
                        <span class="s">"Let's start over."</span><span class="p">)</span>
            <span class="nb">exit</span><span class="p">()</span>

        <span class="k">if</span> <span class="n">proof_of_work</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">block</span> <span class="o">+=</span> <span class="sa">f</span><span class="s">" (</span><span class="si">{</span><span class="n">first_key</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">second_key</span><span class="si">}</span><span class="s">). "</span>
            <span class="n">sendMessage</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">Virgil says: </span><span class="se">\n</span><span class="s">Wow you formed a new memory!!</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
            <span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">sendMessage</span><span class="p">(</span>
                <span class="n">s</span><span class="p">,</span> <span class="sa">f</span><span class="s">"Let's try again </span><span class="si">{</span><span class="mi">4</span> <span class="o">-</span> <span class="n">counter</span><span class="si">}</span><span class="s"> times just to be sure!</span><span class="se">\n\n</span><span class="s">"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">sendMessage</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">DEBUG_MSG</span> <span class="o">+</span> <span class="sa">f</span><span class="s">"Incorect proof of work</span><span class="se">\n</span><span class="s">"</span>
                        <span class="s">"</span><span class="se">\n</span><span class="s">Virgil says: </span><span class="se">\n</span><span class="s">"</span>
                        <span class="s">"You calculated something wrong Klaus we need to start over."</span><span class="p">)</span>
            <span class="nb">exit</span><span class="p">()</span>

        <span class="k">if</span> <span class="n">counter</span> <span class="o">==</span> <span class="mi">4</span><span class="p">:</span>
            <span class="n">sendMessage</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">"It seems that everything are working fine.</span><span class="se">\n</span><span class="s">"</span>
                        <span class="s">"Wait what is that...</span><span class="se">\n</span><span class="s">"</span>
                        <span class="s">"Klaus this is important!!</span><span class="se">\n</span><span class="s">"</span>
                        <span class="s">"This can help you find your father!!</span><span class="se">\n</span><span class="s">"</span>
                        <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">MEMORIES</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
            <span class="nb">exit</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">socketserver</span><span class="p">.</span><span class="n">TCPServer</span><span class="p">.</span><span class="n">allow_reuse_address</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">server</span> <span class="o">=</span> <span class="n">ReusableTCPServer</span><span class="p">((</span><span class="s">"0.0.0.0"</span><span class="p">,</span> <span class="mi">1337</span><span class="p">),</span> <span class="n">Handler</span><span class="p">)</span>
    <span class="n">server</span><span class="p">.</span><span class="n">serve_forever</span><span class="p">()</span>
</code></pre></div></div>

<p>We have to provide two integers <code class="language-plaintext highlighter-rouge">first_key</code> and <code class="language-plaintext highlighter-rouge">second_key</code> such that <br />
<code class="language-plaintext highlighter-rouge">phash(block, first_key, second_key) == 0</code>. <code class="language-plaintext highlighter-rouge">block</code> will be presented by 
the challenge server. If we do it 4 times, we get our flag.<br />
It’s roughly like how we validate blocks with Proof-of-Work in blockchains</p>

<p>Lets take a look at <code class="language-plaintext highlighter-rouge">phash</code> from <code class="language-plaintext highlighter-rouge">pofwork.py</code></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">hashlib</span> <span class="kn">import</span> <span class="n">md5</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">long_to_bytes</span><span class="p">,</span> <span class="n">bytes_to_long</span>


<span class="n">sbox</span> <span class="o">=</span> <span class="p">[</span>
    <span class="mh">0x63</span><span class="p">,</span> <span class="mh">0x7c</span><span class="p">,</span> <span class="mh">0x77</span><span class="p">,</span> <span class="mh">0x7b</span><span class="p">,</span> <span class="mh">0xf2</span><span class="p">,</span> <span class="mh">0x6b</span><span class="p">,</span> <span class="mh">0x6f</span><span class="p">,</span> <span class="mh">0xc5</span><span class="p">,</span> <span class="mh">0x30</span><span class="p">,</span> <span class="mh">0x01</span><span class="p">,</span> <span class="mh">0x67</span><span class="p">,</span> <span class="mh">0x2b</span><span class="p">,</span> <span class="mh">0xfe</span><span class="p">,</span> <span class="mh">0xd7</span><span class="p">,</span> <span class="mh">0xab</span><span class="p">,</span> <span class="mh">0x76</span><span class="p">,</span>
    <span class="mh">0xca</span><span class="p">,</span> <span class="mh">0x82</span><span class="p">,</span> <span class="mh">0xc9</span><span class="p">,</span> <span class="mh">0x7d</span><span class="p">,</span> <span class="mh">0xfa</span><span class="p">,</span> <span class="mh">0x59</span><span class="p">,</span> <span class="mh">0x47</span><span class="p">,</span> <span class="mh">0xf0</span><span class="p">,</span> <span class="mh">0xad</span><span class="p">,</span> <span class="mh">0xd4</span><span class="p">,</span> <span class="mh">0xa2</span><span class="p">,</span> <span class="mh">0xaf</span><span class="p">,</span> <span class="mh">0x9c</span><span class="p">,</span> <span class="mh">0xa4</span><span class="p">,</span> <span class="mh">0x72</span><span class="p">,</span> <span class="mh">0xc0</span><span class="p">,</span>
    <span class="mh">0xb7</span><span class="p">,</span> <span class="mh">0xfd</span><span class="p">,</span> <span class="mh">0x93</span><span class="p">,</span> <span class="mh">0x26</span><span class="p">,</span> <span class="mh">0x36</span><span class="p">,</span> <span class="mh">0x3f</span><span class="p">,</span> <span class="mh">0xf7</span><span class="p">,</span> <span class="mh">0xcc</span><span class="p">,</span> <span class="mh">0x34</span><span class="p">,</span> <span class="mh">0xa5</span><span class="p">,</span> <span class="mh">0xe5</span><span class="p">,</span> <span class="mh">0xf1</span><span class="p">,</span> <span class="mh">0x71</span><span class="p">,</span> <span class="mh">0xd8</span><span class="p">,</span> <span class="mh">0x31</span><span class="p">,</span> <span class="mh">0x15</span><span class="p">,</span>
    <span class="mh">0x04</span><span class="p">,</span> <span class="mh">0xc7</span><span class="p">,</span> <span class="mh">0x23</span><span class="p">,</span> <span class="mh">0xc3</span><span class="p">,</span> <span class="mh">0x18</span><span class="p">,</span> <span class="mh">0x96</span><span class="p">,</span> <span class="mh">0x05</span><span class="p">,</span> <span class="mh">0x9a</span><span class="p">,</span> <span class="mh">0x07</span><span class="p">,</span> <span class="mh">0x12</span><span class="p">,</span> <span class="mh">0x80</span><span class="p">,</span> <span class="mh">0xe2</span><span class="p">,</span> <span class="mh">0xeb</span><span class="p">,</span> <span class="mh">0x27</span><span class="p">,</span> <span class="mh">0xb2</span><span class="p">,</span> <span class="mh">0x75</span><span class="p">,</span>
    <span class="mh">0x09</span><span class="p">,</span> <span class="mh">0x83</span><span class="p">,</span> <span class="mh">0x2c</span><span class="p">,</span> <span class="mh">0x1a</span><span class="p">,</span> <span class="mh">0x1b</span><span class="p">,</span> <span class="mh">0x6e</span><span class="p">,</span> <span class="mh">0x5a</span><span class="p">,</span> <span class="mh">0xa0</span><span class="p">,</span> <span class="mh">0x52</span><span class="p">,</span> <span class="mh">0x3b</span><span class="p">,</span> <span class="mh">0xd6</span><span class="p">,</span> <span class="mh">0xb3</span><span class="p">,</span> <span class="mh">0x29</span><span class="p">,</span> <span class="mh">0xe3</span><span class="p">,</span> <span class="mh">0x2f</span><span class="p">,</span> <span class="mh">0x84</span><span class="p">,</span>
    <span class="mh">0x53</span><span class="p">,</span> <span class="mh">0xd1</span><span class="p">,</span> <span class="mh">0x00</span><span class="p">,</span> <span class="mh">0xed</span><span class="p">,</span> <span class="mh">0x20</span><span class="p">,</span> <span class="mh">0xfc</span><span class="p">,</span> <span class="mh">0xb1</span><span class="p">,</span> <span class="mh">0x5b</span><span class="p">,</span> <span class="mh">0x6a</span><span class="p">,</span> <span class="mh">0xcb</span><span class="p">,</span> <span class="mh">0xbe</span><span class="p">,</span> <span class="mh">0x39</span><span class="p">,</span> <span class="mh">0x4a</span><span class="p">,</span> <span class="mh">0x4c</span><span class="p">,</span> <span class="mh">0x58</span><span class="p">,</span> <span class="mh">0xcf</span><span class="p">,</span>
    <span class="mh">0xd0</span><span class="p">,</span> <span class="mh">0xef</span><span class="p">,</span> <span class="mh">0xaa</span><span class="p">,</span> <span class="mh">0xfb</span><span class="p">,</span> <span class="mh">0x43</span><span class="p">,</span> <span class="mh">0x4d</span><span class="p">,</span> <span class="mh">0x33</span><span class="p">,</span> <span class="mh">0x85</span><span class="p">,</span> <span class="mh">0x45</span><span class="p">,</span> <span class="mh">0xf9</span><span class="p">,</span> <span class="mh">0x02</span><span class="p">,</span> <span class="mh">0x7f</span><span class="p">,</span> <span class="mh">0x50</span><span class="p">,</span> <span class="mh">0x3c</span><span class="p">,</span> <span class="mh">0x9f</span><span class="p">,</span> <span class="mh">0xa8</span><span class="p">,</span>
    <span class="mh">0x51</span><span class="p">,</span> <span class="mh">0xa3</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">,</span> <span class="mh">0x8f</span><span class="p">,</span> <span class="mh">0x92</span><span class="p">,</span> <span class="mh">0x9d</span><span class="p">,</span> <span class="mh">0x38</span><span class="p">,</span> <span class="mh">0xf5</span><span class="p">,</span> <span class="mh">0xbc</span><span class="p">,</span> <span class="mh">0xb6</span><span class="p">,</span> <span class="mh">0xda</span><span class="p">,</span> <span class="mh">0x21</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">,</span> <span class="mh">0xff</span><span class="p">,</span> <span class="mh">0xf3</span><span class="p">,</span> <span class="mh">0xd2</span><span class="p">,</span>
    <span class="mh">0xcd</span><span class="p">,</span> <span class="mh">0x0c</span><span class="p">,</span> <span class="mh">0x13</span><span class="p">,</span> <span class="mh">0xec</span><span class="p">,</span> <span class="mh">0x5f</span><span class="p">,</span> <span class="mh">0x97</span><span class="p">,</span> <span class="mh">0x44</span><span class="p">,</span> <span class="mh">0x17</span><span class="p">,</span> <span class="mh">0xc4</span><span class="p">,</span> <span class="mh">0xa7</span><span class="p">,</span> <span class="mh">0x7e</span><span class="p">,</span> <span class="mh">0x3d</span><span class="p">,</span> <span class="mh">0x64</span><span class="p">,</span> <span class="mh">0x5d</span><span class="p">,</span> <span class="mh">0x19</span><span class="p">,</span> <span class="mh">0x73</span><span class="p">,</span>
    <span class="mh">0x60</span><span class="p">,</span> <span class="mh">0x81</span><span class="p">,</span> <span class="mh">0x4f</span><span class="p">,</span> <span class="mh">0xdc</span><span class="p">,</span> <span class="mh">0x22</span><span class="p">,</span> <span class="mh">0x2a</span><span class="p">,</span> <span class="mh">0x90</span><span class="p">,</span> <span class="mh">0x88</span><span class="p">,</span> <span class="mh">0x46</span><span class="p">,</span> <span class="mh">0xee</span><span class="p">,</span> <span class="mh">0xb8</span><span class="p">,</span> <span class="mh">0x14</span><span class="p">,</span> <span class="mh">0xde</span><span class="p">,</span> <span class="mh">0x5e</span><span class="p">,</span> <span class="mh">0x0b</span><span class="p">,</span> <span class="mh">0xdb</span><span class="p">,</span>
    <span class="mh">0xe0</span><span class="p">,</span> <span class="mh">0x32</span><span class="p">,</span> <span class="mh">0x3a</span><span class="p">,</span> <span class="mh">0x0a</span><span class="p">,</span> <span class="mh">0x49</span><span class="p">,</span> <span class="mh">0x06</span><span class="p">,</span> <span class="mh">0x24</span><span class="p">,</span> <span class="mh">0x5c</span><span class="p">,</span> <span class="mh">0xc2</span><span class="p">,</span> <span class="mh">0xd3</span><span class="p">,</span> <span class="mh">0xac</span><span class="p">,</span> <span class="mh">0x62</span><span class="p">,</span> <span class="mh">0x91</span><span class="p">,</span> <span class="mh">0x95</span><span class="p">,</span> <span class="mh">0xe4</span><span class="p">,</span> <span class="mh">0x79</span><span class="p">,</span>
    <span class="mh">0xe7</span><span class="p">,</span> <span class="mh">0xc8</span><span class="p">,</span> <span class="mh">0x37</span><span class="p">,</span> <span class="mh">0x6d</span><span class="p">,</span> <span class="mh">0x8d</span><span class="p">,</span> <span class="mh">0xd5</span><span class="p">,</span> <span class="mh">0x4e</span><span class="p">,</span> <span class="mh">0xa9</span><span class="p">,</span> <span class="mh">0x6c</span><span class="p">,</span> <span class="mh">0x56</span><span class="p">,</span> <span class="mh">0xf4</span><span class="p">,</span> <span class="mh">0xea</span><span class="p">,</span> <span class="mh">0x65</span><span class="p">,</span> <span class="mh">0x7a</span><span class="p">,</span> <span class="mh">0xae</span><span class="p">,</span> <span class="mh">0x08</span><span class="p">,</span>
    <span class="mh">0xba</span><span class="p">,</span> <span class="mh">0x78</span><span class="p">,</span> <span class="mh">0x25</span><span class="p">,</span> <span class="mh">0x2e</span><span class="p">,</span> <span class="mh">0x1c</span><span class="p">,</span> <span class="mh">0xa6</span><span class="p">,</span> <span class="mh">0xb4</span><span class="p">,</span> <span class="mh">0xc6</span><span class="p">,</span> <span class="mh">0xe8</span><span class="p">,</span> <span class="mh">0xdd</span><span class="p">,</span> <span class="mh">0x74</span><span class="p">,</span> <span class="mh">0x1f</span><span class="p">,</span> <span class="mh">0x4b</span><span class="p">,</span> <span class="mh">0xbd</span><span class="p">,</span> <span class="mh">0x8b</span><span class="p">,</span> <span class="mh">0x8a</span><span class="p">,</span>
    <span class="mh">0x70</span><span class="p">,</span> <span class="mh">0x3e</span><span class="p">,</span> <span class="mh">0xb5</span><span class="p">,</span> <span class="mh">0x66</span><span class="p">,</span> <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0x03</span><span class="p">,</span> <span class="mh">0xf6</span><span class="p">,</span> <span class="mh">0x0e</span><span class="p">,</span> <span class="mh">0x61</span><span class="p">,</span> <span class="mh">0x35</span><span class="p">,</span> <span class="mh">0x57</span><span class="p">,</span> <span class="mh">0xb9</span><span class="p">,</span> <span class="mh">0x86</span><span class="p">,</span> <span class="mh">0xc1</span><span class="p">,</span> <span class="mh">0x1d</span><span class="p">,</span> <span class="mh">0x9e</span><span class="p">,</span>
    <span class="mh">0xe1</span><span class="p">,</span> <span class="mh">0xf8</span><span class="p">,</span> <span class="mh">0x98</span><span class="p">,</span> <span class="mh">0x11</span><span class="p">,</span> <span class="mh">0x69</span><span class="p">,</span> <span class="mh">0xd9</span><span class="p">,</span> <span class="mh">0x8e</span><span class="p">,</span> <span class="mh">0x94</span><span class="p">,</span> <span class="mh">0x9b</span><span class="p">,</span> <span class="mh">0x1e</span><span class="p">,</span> <span class="mh">0x87</span><span class="p">,</span> <span class="mh">0xe9</span><span class="p">,</span> <span class="mh">0xce</span><span class="p">,</span> <span class="mh">0x55</span><span class="p">,</span> <span class="mh">0x28</span><span class="p">,</span> <span class="mh">0xdf</span><span class="p">,</span>
    <span class="mh">0x8c</span><span class="p">,</span> <span class="mh">0xa1</span><span class="p">,</span> <span class="mh">0x89</span><span class="p">,</span> <span class="mh">0x0d</span><span class="p">,</span> <span class="mh">0xbf</span><span class="p">,</span> <span class="mh">0xe6</span><span class="p">,</span> <span class="mh">0x42</span><span class="p">,</span> <span class="mh">0x68</span><span class="p">,</span> <span class="mh">0x41</span><span class="p">,</span> <span class="mh">0x99</span><span class="p">,</span> <span class="mh">0x2d</span><span class="p">,</span> <span class="mh">0x0f</span><span class="p">,</span> <span class="mh">0xb0</span><span class="p">,</span> <span class="mh">0x54</span><span class="p">,</span> <span class="mh">0xbb</span><span class="p">,</span> <span class="mh">0x16</span>
<span class="p">]</span>


<span class="k">def</span> <span class="nf">rotl</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">((</span><span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="n">b</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="mi">32</span> <span class="o">-</span> <span class="n">b</span><span class="p">)))</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span>


<span class="k">def</span> <span class="nf">sub</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
    <span class="n">b</span> <span class="o">=</span> <span class="n">long_to_bytes</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">bytes</span><span class="p">([</span><span class="n">sbox</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">b</span><span class="p">])</span>


<span class="k">def</span> <span class="nf">phash</span><span class="p">(</span><span class="n">block</span><span class="p">,</span> <span class="n">key1</span><span class="p">,</span> <span class="n">key2</span><span class="p">):</span>
    <span class="n">block</span> <span class="o">=</span> <span class="n">md5</span><span class="p">(</span><span class="n">block</span><span class="p">.</span><span class="n">encode</span><span class="p">()).</span><span class="n">digest</span><span class="p">()</span>
    <span class="n">block</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">block</span>
    <span class="n">blocks</span> <span class="o">=</span> <span class="p">[</span><span class="n">bytes_to_long</span><span class="p">(</span><span class="n">block</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">4</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">block</span><span class="p">),</span> <span class="mi">4</span><span class="p">)]</span>

    <span class="n">m</span> <span class="o">=</span> <span class="mh">0xffffffff</span>
    <span class="n">rv1</span><span class="p">,</span> <span class="n">rv2</span> <span class="o">=</span> <span class="mh">0x2423380b4d045</span><span class="p">,</span> <span class="mh">0x3b30fa7ccaa83</span>
    <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">u</span> <span class="o">=</span> <span class="n">key1</span><span class="p">,</span> <span class="mh">0x39ef52e9f30b3</span><span class="p">,</span> <span class="mh">0x253ea615d0215</span><span class="p">,</span> <span class="mh">0x2cd1372d21d77</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">13</span><span class="p">):</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">x</span><span class="p">,</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">^</span> <span class="n">y</span>
        <span class="n">z</span><span class="p">,</span> <span class="n">u</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">^</span> <span class="n">z</span><span class="p">,</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="o">^</span> <span class="n">u</span>
        <span class="n">rv1</span> <span class="o">^=</span> <span class="p">(</span><span class="n">x</span> <span class="p">:</span><span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">&amp;</span> <span class="n">m</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">m</span> <span class="o">+</span> <span class="p">(</span><span class="n">y</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="n">rotl</span><span class="p">(</span><span class="n">z</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
        <span class="n">rv2</span> <span class="o">^=</span> <span class="p">(</span><span class="n">y</span> <span class="p">:</span><span class="o">=</span> <span class="p">(</span><span class="n">y</span> <span class="o">&amp;</span> <span class="n">m</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">m</span> <span class="o">+</span> <span class="p">(</span><span class="n">z</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="n">rotl</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
        <span class="n">rv1</span><span class="p">,</span> <span class="n">rv2</span> <span class="o">=</span> <span class="n">rv2</span><span class="p">,</span> <span class="n">rv1</span>
        <span class="n">rv1</span> <span class="o">=</span> <span class="n">sub</span><span class="p">(</span><span class="n">rv1</span><span class="p">)</span>
        <span class="n">rv1</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="n">rv1</span><span class="p">)</span>

    <span class="n">h</span> <span class="o">=</span> <span class="n">rv1</span> <span class="o">+</span> <span class="mh">0x6276137d7</span> <span class="o">&amp;</span> <span class="n">m</span>
    <span class="n">key2</span> <span class="o">=</span> <span class="n">sub</span><span class="p">(</span><span class="n">key2</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">d</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">key2</span><span class="p">):</span>
        <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">m</span>
        <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">m</span>
        <span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">m</span>
        <span class="n">h</span> <span class="o">^=</span> <span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span> <span class="o">-</span> <span class="n">d</span><span class="p">)</span>
        <span class="n">h</span> <span class="o">+=</span> <span class="n">h</span>
        <span class="n">h</span> <span class="o">&amp;=</span> <span class="n">m</span>

    <span class="n">h</span> <span class="o">*=</span> <span class="n">u</span> <span class="o">*</span> <span class="n">z</span>
    <span class="n">h</span> <span class="o">&amp;=</span> <span class="n">m</span>

    <span class="k">return</span> <span class="n">h</span>
</code></pre></div></div>

<p>Few things to note here -</p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">rotl</code> is 32-bit rotate left</li>
  <li><code class="language-plaintext highlighter-rouge">sbox</code> is AES sbox, so that we dont try linear/differential cryptanalysis XD</li>
  <li>Every operation in <code class="language-plaintext highlighter-rouge">phash</code> can be roughly thought on working on 32 bit <code class="language-plaintext highlighter-rouge">uint</code>s 
since each operation is preceded by <code class="language-plaintext highlighter-rouge">&amp;m (0xffffffff)</code> which makes everything 
operate mod $2^{32}$</li>
  <li>Which means <code class="language-plaintext highlighter-rouge">rv1</code>, <code class="language-plaintext highlighter-rouge">rv2</code>, <code class="language-plaintext highlighter-rouge">x</code>, <code class="language-plaintext highlighter-rouge">y</code>, <code class="language-plaintext highlighter-rouge">z</code>, <code class="language-plaintext highlighter-rouge">u</code> are all 32bit values including 
our keys, i.e `rv1 = 0x2423380b4d045 &amp; m = 0x80b4d045</li>
  <li>Insted of a block, <code class="language-plaintext highlighter-rouge">md5(block)</code> is hashed, so we have little to no control 
over the message and we have to actually expoit the keys.</li>
</ol>

<p>Finding relevant <code class="language-plaintext highlighter-rouge">key1</code> and <code class="language-plaintext highlighter-rouge">key2</code> seems difficult by bare logic, dont worry<br />
since the first block provides a subtle hint</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">"You don't have to add the z3 solver to your firmware ever again. Now you can use it forever.</code></p>
</blockquote>

<p>We can make an SMT model in z3 and let it do its wonders!<br />
But first let us demarcate the function so it’s easier to refer</p>

<h5 id="function-setup">function setup</h5>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">phash</span><span class="p">(</span><span class="n">block</span><span class="p">,</span> <span class="n">key1</span><span class="p">,</span> <span class="n">key2</span><span class="p">):</span>
    <span class="n">block</span> <span class="o">=</span> <span class="n">md5</span><span class="p">(</span><span class="n">block</span><span class="p">.</span><span class="n">encode</span><span class="p">()).</span><span class="n">digest</span><span class="p">()</span>
    <span class="n">block</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">block</span>
    <span class="n">blocks</span> <span class="o">=</span> <span class="p">[</span><span class="n">bytes_to_long</span><span class="p">(</span><span class="n">block</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">4</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">block</span><span class="p">),</span> <span class="mi">4</span><span class="p">)]</span>

    <span class="n">m</span> <span class="o">=</span> <span class="mh">0xffffffff</span>
    <span class="n">rv1</span><span class="p">,</span> <span class="n">rv2</span> <span class="o">=</span> <span class="mh">0x2423380b4d045</span><span class="p">,</span> <span class="mh">0x3b30fa7ccaa83</span>
    <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">u</span> <span class="o">=</span> <span class="n">key1</span><span class="p">,</span> <span class="mh">0x39ef52e9f30b3</span><span class="p">,</span> <span class="mh">0x253ea615d0215</span><span class="p">,</span> <span class="mh">0x2cd1372d21d77</span>
</code></pre></div></div>
<h5 id="key1-loop">key1 loop</h5>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">13</span><span class="p">):</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">x</span><span class="p">,</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">^</span> <span class="n">y</span>
        <span class="n">z</span><span class="p">,</span> <span class="n">u</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">^</span> <span class="n">z</span><span class="p">,</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="o">^</span> <span class="n">u</span>
        <span class="n">rv1</span> <span class="o">^=</span> <span class="p">(</span><span class="n">x</span> <span class="p">:</span><span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">&amp;</span> <span class="n">m</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">m</span> <span class="o">+</span> <span class="p">(</span><span class="n">y</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="n">rotl</span><span class="p">(</span><span class="n">z</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
        <span class="n">rv2</span> <span class="o">^=</span> <span class="p">(</span><span class="n">y</span> <span class="p">:</span><span class="o">=</span> <span class="p">(</span><span class="n">y</span> <span class="o">&amp;</span> <span class="n">m</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">m</span> <span class="o">+</span> <span class="p">(</span><span class="n">z</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="n">rotl</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
        <span class="n">rv1</span><span class="p">,</span> <span class="n">rv2</span> <span class="o">=</span> <span class="n">rv2</span><span class="p">,</span> <span class="n">rv1</span>
        <span class="n">rv1</span> <span class="o">=</span> <span class="n">sub</span><span class="p">(</span><span class="n">rv1</span><span class="p">)</span>
        <span class="n">rv1</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="n">rv1</span><span class="p">)</span>
</code></pre></div></div>
<h5 id="key2-substitution">key2 substitution</h5>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">h</span> <span class="o">=</span> <span class="n">rv1</span> <span class="o">+</span> <span class="mh">0x6276137d7</span> <span class="o">&amp;</span> <span class="n">m</span>
    <span class="n">key2</span> <span class="o">=</span> <span class="n">sub</span><span class="p">(</span><span class="n">key2</span><span class="p">)</span>
</code></pre></div></div>
<h5 id="key2-loop">key2 loop</h5>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">d</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">key2</span><span class="p">):</span>
        <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">m</span>
        <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span> <span class="o">&lt;&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">m</span>
        <span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">m</span>
        <span class="n">h</span> <span class="o">^=</span> <span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span> <span class="o">-</span> <span class="n">d</span><span class="p">)</span>
        <span class="n">h</span> <span class="o">+=</span> <span class="n">h</span>
        <span class="n">h</span> <span class="o">&amp;=</span> <span class="n">m</span>
</code></pre></div></div>
<h5 id="final-multiplication">final multiplication</h5>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">h</span> <span class="o">*=</span> <span class="n">u</span> <span class="o">*</span> <span class="n">z</span>
    <span class="n">h</span> <span class="o">&amp;=</span> <span class="n">m</span>

    <span class="k">return</span> <span class="n">h</span>
</code></pre></div></div>

<h2 id="enter-z3">Enter Z3</h2>
<p>Since we are dealing with 32 bits entities only, we will use theory of <br />
bitvectors. Where each variable is simply considered a collection of<br />
bits and all the operations are treated as symbolic computation upon<br />
those sets of bits. Pretty much like a hardware circuit, where each<br />
component is say a 32 bit register.</p>

<h3 id="representing-function-setup">Representing <a href="#function-setup">function setup</a></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">block</span> <span class="o">=</span> <span class="n">md5</span><span class="p">(</span><span class="n">message</span><span class="p">).</span><span class="n">digest</span><span class="p">()</span>
<span class="n">block</span> <span class="o">=</span> <span class="mi">4</span><span class="o">*</span><span class="n">block</span>
<span class="n">blocks</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">block</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">4</span><span class="p">],</span><span class="s">'big'</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">block</span><span class="p">),</span> <span class="mi">4</span><span class="p">)]</span>
<span class="c1"># we will let the blocks be the way they are in the real function
# or we could declare them as 32-bit constants, either suffices
# blocks = [BitVecVal(i,32) for i in blocks] is treated same as above
</span><span class="n">rv1</span><span class="p">,</span> <span class="n">rv2</span> <span class="o">=</span> <span class="n">BitVecVal</span><span class="p">(</span><span class="mh">0x2423380b4d045</span><span class="p">,</span><span class="mi">32</span><span class="p">),</span> <span class="n">BitVecVal</span><span class="p">(</span><span class="mh">0x3b30fa7ccaa83</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span>
<span class="c1"># note that they will automatically be truncated to 32 bits
</span><span class="n">key1</span> <span class="o">=</span> <span class="n">BitVec</span><span class="p">(</span><span class="s">'key1'</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
<span class="n">key2</span> <span class="o">=</span> <span class="n">BitVec</span><span class="p">(</span><span class="s">'key2'</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
<span class="c1"># key1 and key2 treated as 32-bit unknowns
</span><span class="n">m</span> <span class="o">=</span> <span class="mh">0xffffffff</span> <span class="c1">#can be written as -1 as well ;)
</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">u</span> <span class="o">=</span> <span class="n">key1</span><span class="p">,</span> <span class="o">*</span><span class="p">[</span><span class="n">BitVecVal</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">(</span><span class="mh">0x39ef52e9f30b3</span><span class="p">,</span> <span class="mh">0x253ea615d0215</span><span class="p">,</span> <span class="mh">0x2cd1372d21d77</span><span class="p">)]</span>
<span class="c1"># bitvecs can be used almost like python variables! I love z3 API
</span></code></pre></div></div>
<h3 id="representing-key1-loop">Representing <a href="#key1-loop">key1 loop</a></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">13</span><span class="p">):</span>
	<span class="n">x</span><span class="p">,</span><span class="n">y</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">x</span><span class="p">,</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">^</span> <span class="n">y</span>
    <span class="c1"># easy interop with xor
</span>	<span class="n">z</span><span class="p">,</span><span class="n">u</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">^</span> <span class="n">z</span><span class="p">,</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="o">^</span> <span class="n">u</span>
	<span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">,</span><span class="n">u</span> <span class="o">=</span> <span class="p">[</span><span class="n">simplify</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">,</span><span class="n">u</span><span class="p">)]</span> 
    <span class="c1"># simplify tries to evaluate the current symbolic computation of a variable
</span>    <span class="c1"># and tries to simplify as much as possible (no effect on truth, can skip)
</span>	<span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">*</span><span class="p">(</span><span class="n">m</span> <span class="o">+</span> <span class="n">LShR</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="n">RotateLeft</span><span class="p">(</span><span class="n">z</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
    <span class="c1"># expanding the walrus (:=)
</span>    <span class="c1"># note that &gt;&gt; is replaced with LShR, this is because in theory of bitvecs
</span>    <span class="c1"># there are two kinds of shift rights, arithmetic and logical. logical
</span>    <span class="c1"># shift right shifts as is whereas arithmetic shift right also retains the
</span>    <span class="c1"># original sign. Python ints are infinite, so &gt;&gt; means logical shift by
</span>    <span class="c1"># shift by default but in z3 &gt;&gt; is arithmetic while LShR is logical
</span>	<span class="n">rv1</span> <span class="o">^=</span> <span class="n">x</span>
	<span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">*</span><span class="p">(</span><span class="n">m</span> <span class="o">+</span> <span class="n">LShR</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="n">RotateLeft</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
	<span class="n">rv2</span> <span class="o">^=</span> <span class="n">y</span>
	<span class="n">rv1</span><span class="p">,</span> <span class="n">rv2</span> <span class="o">=</span> <span class="n">rv2</span><span class="p">,</span> <span class="n">rv1</span>
	<span class="n">rv1</span> <span class="o">=</span> <span class="n">sub</span><span class="p">(</span><span class="n">rv1</span><span class="p">)</span>
</code></pre></div></div>

<p>Wait, how will <code class="language-plaintext highlighter-rouge">sub</code> work?<br />
Good question, it wont the <code class="language-plaintext highlighter-rouge">sub</code> is a previously defined python function which<br />
expects python <code class="language-plaintext highlighter-rouge">int</code> to index the <code class="language-plaintext highlighter-rouge">SBOX</code> and return a value. It wont<br />
understand <code class="language-plaintext highlighter-rouge">BitVec</code> as index and so wont our model understand our function!</p>

<h3 id="theory-of-arrays">Theory of Arrays</h3>
<p>SMT solvers are so mature, we can use multiple theories to create and solve a<br />
model!<br />
With theory of arrays, we can essentially declare an array with arbitrary index<br />
and arbitrary stored value.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">SBOX</span> <span class="o">=</span> <span class="n">Array</span><span class="p">(</span><span class="s">'SBOX'</span><span class="p">,</span> <span class="n">BitVecSort</span><span class="p">(</span><span class="mi">8</span><span class="p">),</span> <span class="n">BitVecSort</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span>
<span class="k">def</span> <span class="nf">sub</span><span class="p">(</span><span class="n">bitvec32</span><span class="p">):</span>
    <span class="n">vec_bytes</span> <span class="o">=</span> <span class="p">[</span><span class="n">Extract</span><span class="p">(</span><span class="mi">8</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="o">*</span><span class="n">i</span><span class="p">,</span> <span class="n">bitvec32</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
    <span class="c1"># logical analogue of 32-bit int to 4-bytes in big-endian order
</span>    <span class="c1"># Extract(hi,lo,bitvec) takes the bits [lo,hi) and creates a new
</span>    <span class="c1"># bitvector of size hi-lo+1
</span>    <span class="k">return</span> <span class="n">Concat</span><span class="p">([</span><span class="n">SBOX</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">vec_bytes</span><span class="p">])</span>
    <span class="c1"># i is index BitVec(8) to Array SBOX and SBOX[i] is BitVec(8) stored
</span>    <span class="c1"># Concat concatanates the 4 8-bitvectors to an 32-bitvector like it
</span>    <span class="c1"># is done in after the original sub in the key1 loop
</span></code></pre></div></div>

<h3 id="representing-key2-substitution">Representing <a href="#key2-substitution">key2 substitution</a></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">h</span> <span class="o">=</span> <span class="n">simplify</span><span class="p">(</span><span class="n">rv1</span> <span class="o">+</span> <span class="mh">0x6276137d7</span><span class="p">)</span>
<span class="n">subkey2</span> <span class="o">=</span> <span class="p">[</span><span class="n">Extract</span><span class="p">(</span><span class="mi">8</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="o">*</span><span class="n">i</span><span class="p">,</span><span class="n">key2</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
<span class="c1"># splitting to 8-bits again
</span><span class="n">subkey2</span> <span class="o">=</span> <span class="p">[</span><span class="n">SBOX</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">subkey2</span><span class="p">]</span>
<span class="c1"># note that we need to mention SBOX only once in the whole logic
</span><span class="n">subkey2</span> <span class="o">=</span> <span class="p">[</span><span class="n">ZeroExt</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">subkey2</span><span class="p">]</span>
</code></pre></div></div>
<p>What is ZeroExt? Note that subkey2 after substitution is a list of 8-bit<br />
entities. Now this one wouldn’t look much severe to a programmer since all<br />
programming languages dont bother much about adding two integer values c/c++<br />
would give type warning but just add the smaller value to a bigger value<br />
without ranting. whereas python doesn’t bother at all. But if we think like<br />
a hardware, you will be bothered when presented to add a 32-bit register to<br />
a 8-bit register. Since we require this value later, we make it a 32 bit value<br />
by Extending with 24 zeros in the front (if we were not dealing with uint32<br />
we would have sign-extended these 8-bit values.</p>

<h3 id="representing-key2-loop">Representing <a href="#key2-loop">key2 loop</a></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">d</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">subkey2</span><span class="p">):</span>
	<span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span><span class="o">&lt;&lt;</span><span class="mi">1</span><span class="p">)</span>
	<span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span><span class="o">&lt;&lt;</span><span class="mi">3</span><span class="p">)</span>
	<span class="n">c</span> <span class="o">=</span> <span class="n">LShR</span><span class="p">(</span><span class="n">h</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
	<span class="c1"># note the LShR again, blindly missing an operator can cost you hours :)
</span>	<span class="n">h</span> <span class="o">^=</span> <span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">+</span><span class="n">c</span><span class="o">-</span><span class="n">d</span><span class="p">)</span>
	<span class="n">h</span> <span class="o">+=</span> <span class="n">h</span>
<span class="n">h</span> <span class="o">^=</span> <span class="n">u</span><span class="o">*</span><span class="n">z</span>
</code></pre></div></div>

<p>Now after all this bizarre symbolic computation, we are not done yet, we are<br />
not here just to model but to ask the solver to find the values of <code class="language-plaintext highlighter-rouge">key1</code> and<br />
<code class="language-plaintext highlighter-rouge">key2</code> such that this symbolic function evaluates to 0</p>

<h3 id="calling-a-solver">Calling a solver</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>solver = Solver()
solver.add(h==0) #the final h we have here should be 0
for i,v in enumerate(sbox): # the original AES sbox
    solver.add(SBOX[i]==v)
# specifing the exact substitution box
if solver.check() == sat:
    m = solver.model()
    # a desirable model
    return (m[key1].as_long(), m[key2].as_long())
# as_long converts bitvecs to python ints
</code></pre></div></div>

<h3 id="putting-it-all-together">Putting it all together</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">hack_proof_of_work</span><span class="p">(</span><span class="n">message</span><span class="p">):</span>
	<span class="n">block</span> <span class="o">=</span> <span class="n">md5</span><span class="p">(</span><span class="n">message</span><span class="p">).</span><span class="n">digest</span><span class="p">()</span>
	<span class="n">block</span> <span class="o">=</span> <span class="mi">4</span><span class="o">*</span><span class="n">block</span>
	<span class="n">blocks</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">block</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">4</span><span class="p">],</span><span class="s">'big'</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">block</span><span class="p">),</span> <span class="mi">4</span><span class="p">)]</span>
	<span class="n">rv1</span><span class="p">,</span> <span class="n">rv2</span> <span class="o">=</span> <span class="n">BitVecVal</span><span class="p">(</span><span class="mh">0x2423380b4d045</span><span class="p">,</span><span class="mi">32</span><span class="p">),</span> <span class="n">BitVecVal</span><span class="p">(</span><span class="mh">0x3b30fa7ccaa83</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span>
	<span class="n">key1</span> <span class="o">=</span> <span class="n">BitVec</span><span class="p">(</span><span class="s">'key1'</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
	<span class="n">key2</span> <span class="o">=</span> <span class="n">BitVec</span><span class="p">(</span><span class="s">'key2'</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
	<span class="n">m</span> <span class="o">=</span> <span class="mh">0xffffffff</span>
	<span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">u</span> <span class="o">=</span> <span class="n">key1</span><span class="p">,</span> <span class="o">*</span><span class="p">[</span><span class="n">BitVecVal</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">(</span><span class="mh">0x39ef52e9f30b3</span><span class="p">,</span> <span class="mh">0x253ea615d0215</span><span class="p">,</span> <span class="mh">0x2cd1372d21d77</span><span class="p">)]</span>
	<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">13</span><span class="p">):</span>
		<span class="n">x</span><span class="p">,</span><span class="n">y</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">x</span><span class="p">,</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">^</span> <span class="n">y</span>
		<span class="n">z</span><span class="p">,</span><span class="n">u</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">^</span> <span class="n">z</span><span class="p">,</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="o">^</span> <span class="n">u</span>
		<span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">,</span><span class="n">u</span> <span class="o">=</span> <span class="p">[</span><span class="n">simplify</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">,</span><span class="n">u</span><span class="p">)]</span> 
		<span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">*</span><span class="p">(</span><span class="n">m</span> <span class="o">+</span> <span class="n">LShR</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="n">RotateLeft</span><span class="p">(</span><span class="n">z</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
		<span class="n">rv1</span> <span class="o">^=</span> <span class="n">x</span>
		<span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">*</span><span class="p">(</span><span class="n">m</span> <span class="o">+</span> <span class="n">LShR</span><span class="p">(</span><span class="n">z</span><span class="p">,</span><span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="n">RotateLeft</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
		<span class="n">rv2</span> <span class="o">^=</span> <span class="n">y</span>
		<span class="n">rv1</span><span class="p">,</span> <span class="n">rv2</span> <span class="o">=</span> <span class="n">rv2</span><span class="p">,</span> <span class="n">rv1</span>
		<span class="n">rv1</span> <span class="o">=</span> <span class="n">sub</span><span class="p">(</span><span class="n">rv1</span><span class="p">)</span>

	<span class="n">SBOX</span> <span class="o">=</span> <span class="n">Array</span><span class="p">(</span><span class="s">'SBOX'</span><span class="p">,</span> <span class="n">BitVecSort</span><span class="p">(</span><span class="mi">8</span><span class="p">),</span> <span class="n">BitVecSort</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span>
	<span class="k">def</span> <span class="nf">sub</span><span class="p">(</span><span class="n">bitvec32</span><span class="p">):</span>
		<span class="n">vec_bytes</span> <span class="o">=</span> <span class="p">[</span><span class="n">Extract</span><span class="p">(</span><span class="mi">8</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="o">*</span><span class="n">i</span><span class="p">,</span> <span class="n">bitvec32</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
		<span class="k">return</span> <span class="n">Concat</span><span class="p">([</span><span class="n">SBOX</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">vec_bytes</span><span class="p">])</span>

	<span class="n">h</span> <span class="o">=</span> <span class="n">simplify</span><span class="p">(</span><span class="n">rv1</span> <span class="o">+</span> <span class="mh">0x6276137d7</span><span class="p">)</span>
	<span class="n">subkey2</span> <span class="o">=</span> <span class="p">[</span><span class="n">Extract</span><span class="p">(</span><span class="mi">8</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="o">*</span><span class="n">i</span><span class="p">,</span><span class="n">key2</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
	<span class="n">subkey2</span> <span class="o">=</span> <span class="p">[</span><span class="n">SBOX</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">subkey2</span><span class="p">]</span>
	<span class="n">subkey2</span> <span class="o">=</span> <span class="p">[</span><span class="n">ZeroExt</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">subkey2</span><span class="p">]</span>

	<span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">d</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">subkey2</span><span class="p">):</span>
		<span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span><span class="o">&lt;&lt;</span><span class="mi">1</span><span class="p">)</span>
		<span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span><span class="o">&lt;&lt;</span><span class="mi">3</span><span class="p">)</span>
		<span class="n">c</span> <span class="o">=</span> <span class="n">LShR</span><span class="p">(</span><span class="n">h</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
		<span class="n">h</span> <span class="o">^=</span> <span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">+</span><span class="n">c</span><span class="o">-</span><span class="n">d</span><span class="p">)</span>
		<span class="n">h</span> <span class="o">+=</span> <span class="n">h</span>
	<span class="n">h</span> <span class="o">^=</span> <span class="n">u</span><span class="o">*</span><span class="n">z</span>
	<span class="n">solver</span> <span class="o">=</span> <span class="n">Solver</span><span class="p">()</span>
	<span class="n">solver</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">h</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
	<span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">sbox</span><span class="p">):</span> 
		<span class="n">solver</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">SBOX</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">v</span><span class="p">)</span>
	<span class="k">if</span> <span class="n">solver</span><span class="p">.</span><span class="n">check</span><span class="p">()</span> <span class="o">==</span> <span class="n">sat</span><span class="p">:</span>
		<span class="n">m</span> <span class="o">=</span> <span class="n">solver</span><span class="p">.</span><span class="n">model</span><span class="p">()</span>
		<span class="k">return</span> <span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="n">key1</span><span class="p">].</span><span class="n">as_long</span><span class="p">(),</span> <span class="n">m</span><span class="p">[</span><span class="n">key2</span><span class="p">].</span><span class="n">as_long</span><span class="p">())</span>
</code></pre></div></div>

<p>Lets go!</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">message_one</span> <span class="o">=</span> <span class="s">"You don't have to add the z3 solver to your firmware ever </span><span class="se">\
</span><span class="s">               again. Now you can use it forever."</span>
<span class="n">key1</span><span class="p">,</span> <span class="n">key2</span> <span class="o">=</span> <span class="n">hack_proof_of_work</span><span class="p">(</span><span class="n">message_one</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="https://media.giphy.com/media/hNGPQK5eGDzTW/giphy.gif" alt="two hours later" /></p>

<p>Well, no key yet?<br />
I know, lets discuss a few problems and workarounds</p>

<h3 id="too-complicated-model">Too complicated model</h3>
<ol>
  <li>Too many multiplications. There are 13 loops and a lot of multiplications. 
And as one may know, factoring has never been easy.</li>
  <li>We dont even have a tentative time by which the solver will spew a 
satisfying model. This is the general drawback of SMT/SAT solvers.</li>
  <li>Not breaking the problem as (an actually intelligent) human</li>
</ol>

<p>So lets analyze the problem carefully part by part.</p>

<h2 id="re-analysis">Re-analysis</h2>
<ol>
  <li>The final value is <code class="language-plaintext highlighter-rouge">h(final) = h(part 2)*u*z (part 1)</code> and we need it to be 0 
final <code class="language-plaintext highlighter-rouge">h</code> will be 0 if sum of least significant <code class="language-plaintext highlighter-rouge">0</code> of <code class="language-plaintext highlighter-rouge">h</code>, <code class="language-plaintext highlighter-rouge">u</code> and <code class="language-plaintext highlighter-rouge">z</code> exceeds</li>
  <li>
    <p>as overflows are ignored in 32-bit multiplication.</p>
  </li>
  <li>What if we can get <code class="language-plaintext highlighter-rouge">h</code> of <a href="#key2-loop">key2 loop</a> to 0 by its own?</li>
</ol>

<h3 id="reversing-only-key2-loop">Reversing only <a href="#key2-loop">key2 loop</a></h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">hack_only_key2</span><span class="p">(</span><span class="n">h</span><span class="p">,</span><span class="n">nbits</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
    <span class="c1"># note its post substitution for less complexity and speed
</span>    <span class="c1"># nbits is the number of nonzero most significant bits we can tolerate
</span>    <span class="n">h</span> <span class="o">=</span> <span class="n">BitVecVal</span><span class="p">(</span><span class="n">h</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span>
    <span class="n">key2</span> <span class="o">=</span> <span class="n">BitVec</span><span class="p">(</span><span class="s">'key2'</span><span class="p">,</span><span class="mi">32</span><span class="p">)</span>
    <span class="n">subkey2</span> <span class="o">=</span> <span class="p">[</span><span class="n">Extract</span><span class="p">(</span><span class="mi">8</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="o">*</span><span class="n">i</span><span class="p">,</span><span class="n">key2</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
    <span class="n">subkey2</span> <span class="o">=</span> <span class="p">[</span><span class="n">ZeroExt</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">subkey2</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">d</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">subkey2</span><span class="p">):</span>
        <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span><span class="o">&lt;&lt;</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span><span class="o">&lt;&lt;</span><span class="mi">3</span><span class="p">)</span>
        <span class="n">c</span> <span class="o">=</span> <span class="n">LShR</span><span class="p">(</span><span class="n">h</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
        <span class="n">h</span> <span class="o">^=</span> <span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">+</span><span class="n">c</span><span class="o">-</span><span class="n">d</span><span class="p">)</span>
        <span class="n">h</span> <span class="o">+=</span> <span class="n">h</span>
    <span class="n">solver</span> <span class="o">=</span> <span class="n">Solver</span><span class="p">()</span>
    <span class="c1"># solver.add(Extract(31-nbits,0,h)==0)
</span>    <span class="n">solver</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">h</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">solver</span><span class="p">.</span><span class="n">check</span><span class="p">()</span> <span class="o">==</span> <span class="n">sat</span><span class="p">:</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">solver</span><span class="p">.</span><span class="n">model</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">m</span><span class="p">[</span><span class="n">key2</span><span class="p">].</span><span class="n">as_long</span><span class="p">()</span>

<span class="k">print</span><span class="p">(</span><span class="n">try_only_key2</span><span class="p">(</span><span class="mi">1337</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
<span class="c1"># None
</span><span class="k">print</span><span class="p">(</span><span class="n">try_only_key2</span><span class="p">(</span><span class="mi">1337</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
<span class="c1"># None
</span><span class="k">print</span><span class="p">(</span><span class="n">try_only_key2</span><span class="p">(</span><span class="mi">1337</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
<span class="c1"># None
</span><span class="k">print</span><span class="p">(</span><span class="n">try_only_key2</span><span class="p">(</span><span class="mi">1337</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
<span class="c1"># None
</span><span class="k">print</span><span class="p">(</span><span class="n">try_only_key2</span><span class="p">(</span><span class="mi">1337</span><span class="p">,</span><span class="mi">8</span><span class="p">))</span>
<span class="c1"># 1311637496
</span><span class="k">print</span><span class="p">(</span><span class="n">try_only_key2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
<span class="c1"># 75586596
</span><span class="k">print</span><span class="p">(</span><span class="n">try_only_key2</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
<span class="c1"># 276293996
</span><span class="k">print</span><span class="p">(</span><span class="n">try_only_key2</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
<span class="c1"># 283836416 
</span></code></pre></div></div>
<p>It seems to be working but only for a limited number of values, lets see how 
frequently can it work independent of <code class="language-plaintext highlighter-rouge">h</code> from first loop.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span>
<span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">randint</span>
<span class="n">num_samples</span> <span class="o">=</span> <span class="mi">4096</span>
<span class="n">validkey2</span> <span class="o">=</span> <span class="p">[</span><span class="n">try_only_key2</span><span class="p">(</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">**</span><span class="mi">32</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">num_samples</span><span class="p">))]</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Number of suitable h"</span><span class="p">,</span> <span class="n">num_samples</span><span class="o">-</span><span class="n">validkey2</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="bp">None</span><span class="p">))</span>
<span class="c1"># 5
</span><span class="n">validkey2</span> <span class="o">=</span> <span class="p">[</span><span class="n">try_only_key2</span><span class="p">(</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">**</span><span class="mi">32</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">num_samples</span><span class="p">))]</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Number of suitable h"</span><span class="p">,</span> <span class="n">num_samples</span><span class="o">-</span><span class="n">validkey2</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="bp">None</span><span class="p">))</span>
<span class="c1"># 11
</span><span class="n">validkey2</span> <span class="o">=</span> <span class="p">[</span><span class="n">try_only_key2</span><span class="p">(</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">**</span><span class="mi">32</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">num_samples</span><span class="p">))]</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Number of suitable h"</span><span class="p">,</span> <span class="n">num_samples</span><span class="o">-</span><span class="n">validkey2</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="bp">None</span><span class="p">))</span>
<span class="c1"># 72
</span></code></pre></div></div>

<p>It appears that if we entirely ignore <code class="language-plaintext highlighter-rouge">key1</code>, and let <code class="language-plaintext highlighter-rouge">h</code> be whatever it<br />
desires to be i.e. random, we can have our luck with finding <code class="language-plaintext highlighter-rouge">key2</code> with<br />
roughly 1 in 400 chance (ignoring the zeros for <code class="language-plaintext highlighter-rouge">u*z</code> entirely)</p>

<p>So we can bruteforce for <code class="language-plaintext highlighter-rouge">key1</code>, try solving for <code class="language-plaintext highlighter-rouge">key2</code> and this should<br />
take a couple of seconds and lo we are done.</p>

<h2 id="solve-script"><a href="solve.py">Solve Script</a></h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">zerocount</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">num</span><span class="o">&amp;</span><span class="mi">1</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
        <span class="n">count</span><span class="o">+=</span><span class="mi">1</span>
        <span class="n">num</span><span class="o">&gt;&gt;=</span><span class="mi">1</span>
    <span class="k">return</span> <span class="n">count</span>

<span class="k">def</span> <span class="nf">form_blocks</span><span class="p">(</span><span class="n">block</span><span class="p">):</span>
    <span class="s">"""making bruteforce faster by removing recomputation of md5"""</span>
    <span class="n">block</span> <span class="o">=</span> <span class="n">md5</span><span class="p">(</span><span class="n">block</span><span class="p">.</span><span class="n">encode</span><span class="p">()).</span><span class="n">digest</span><span class="p">()</span>
    <span class="n">block</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">block</span>
    <span class="n">blocks</span> <span class="o">=</span> <span class="p">[</span><span class="n">bytes_to_long</span><span class="p">(</span><span class="n">block</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">4</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">block</span><span class="p">),</span> <span class="mi">4</span><span class="p">)]</span>
    <span class="k">return</span> <span class="n">blocks</span>


<span class="k">def</span> <span class="nf">phashk1</span><span class="p">(</span><span class="n">blocks</span><span class="p">,</span> <span class="n">key1</span><span class="p">):</span>
    <span class="s">"""hash state till key1 part and before key2 substitution"""</span>
    <span class="n">m</span> <span class="o">=</span> <span class="mh">0xffffffff</span>
    <span class="n">rv1</span><span class="p">,</span> <span class="n">rv2</span> <span class="o">=</span> <span class="mh">0x2423380b4d045</span><span class="p">,</span> <span class="mh">0x3b30fa7ccaa83</span>
    <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">u</span> <span class="o">=</span> <span class="n">key1</span><span class="p">,</span> <span class="mh">0x39ef52e9f30b3</span><span class="p">,</span> <span class="mh">0x253ea615d0215</span><span class="p">,</span> <span class="mh">0x2cd1372d21d77</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">13</span><span class="p">):</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">x</span><span class="p">,</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">^</span> <span class="n">y</span>
        <span class="n">z</span><span class="p">,</span> <span class="n">u</span> <span class="o">=</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">^</span> <span class="n">z</span><span class="p">,</span> <span class="n">blocks</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="o">^</span> <span class="n">u</span>
        <span class="n">rv1</span> <span class="o">^=</span> <span class="p">(</span><span class="n">x</span> <span class="p">:</span><span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">&amp;</span> <span class="n">m</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">m</span> <span class="o">+</span> <span class="p">(</span><span class="n">y</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="n">rotl</span><span class="p">(</span><span class="n">z</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
        <span class="n">rv2</span> <span class="o">^=</span> <span class="p">(</span><span class="n">y</span> <span class="p">:</span><span class="o">=</span> <span class="p">(</span><span class="n">y</span> <span class="o">&amp;</span> <span class="n">m</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">m</span> <span class="o">+</span> <span class="p">(</span><span class="n">z</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="n">rotl</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
        <span class="n">rv1</span><span class="p">,</span> <span class="n">rv2</span> <span class="o">=</span> <span class="n">rv2</span><span class="p">,</span> <span class="n">rv1</span>
        <span class="n">rv1</span> <span class="o">=</span> <span class="n">sub</span><span class="p">(</span><span class="n">rv1</span><span class="p">)</span>
        <span class="n">rv1</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="n">rv1</span><span class="p">)</span>
    <span class="n">h</span> <span class="o">=</span> <span class="n">rv1</span> <span class="o">+</span> <span class="mh">0x6276137d7</span> <span class="o">&amp;</span> <span class="n">m</span>
    <span class="c1"># also return the number of zeros in u*z so our model finds it easier
</span>    <span class="k">return</span> <span class="n">h</span><span class="p">,</span><span class="n">zerocount</span><span class="p">(</span><span class="n">u</span><span class="o">*</span><span class="n">z</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">desubstitute</span><span class="p">(</span><span class="n">key2</span><span class="p">):</span>
    <span class="s">"""reverse the substitution on the found key2"""</span>
    <span class="c1"># we could have added the substitution to the model too, but since we
</span>    <span class="c1"># are bruteforcing, we appreciate a bit of extra speed
</span>    <span class="k">return</span> <span class="nb">bytes</span><span class="p">([</span><span class="n">sbox</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">int</span><span class="p">.</span><span class="n">to_bytes</span><span class="p">(</span><span class="n">key2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="s">'big'</span><span class="p">)])</span>

<span class="k">def</span> <span class="nf">bruteforce_key1</span><span class="p">(</span><span class="n">block</span><span class="p">):</span>
    <span class="n">blocks</span> <span class="o">=</span> <span class="n">form_blocks</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">key1</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">32</span><span class="p">),</span><span class="n">total</span><span class="o">=-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">h</span><span class="p">,</span> <span class="n">nbits</span> <span class="o">=</span> <span class="n">phashk1</span><span class="p">(</span><span class="n">blocks</span><span class="p">,</span> <span class="n">key1</span><span class="p">)</span>
        <span class="n">key2</span> <span class="o">=</span> <span class="n">try_only_key2</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">nbits</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">key2</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">key1</span><span class="p">,</span> <span class="n">desubstitute</span><span class="p">(</span><span class="n">key2</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="final-test">Final Test</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">message_one</span> <span class="o">=</span> <span class="s">"You don't have to add the z3 solver to your firmware ever </span><span class="se">\
</span><span class="s">               again. Now you can use it forever."</span>
<span class="n">key1</span><span class="p">,</span> <span class="n">key2</span> <span class="o">=</span> <span class="n">bruteforce_key1</span><span class="p">(</span><span class="n">message_one</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">key1</span><span class="o">=</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">key2</span><span class="o">=</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">assert</span> <span class="n">phash</span><span class="p">(</span><span class="n">message_one</span><span class="p">,</span> <span class="n">key1</span><span class="p">,</span> <span class="n">key2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
<span class="c1"># 909it [00:16, 54.92it/s]
# key1=909 key2=3711505522
</span></code></pre></div></div>

<h2 id="post-solve-wanderings">Post solve wanderings</h2>
<p>I solved the challenge manually by prompting bruteforce 4 times. I wanted to 
create a netcat script, but couldn’t as Hack The Box terminated all instances<br />
post the CTFs so I cant access the server.</p>

<p>I wonder why is there an uncanny resemblance between the hash function and 
a hash collision challenge I created last year for zh3r0 CTF v2</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">4</span><span class="p">],</span><span class="s">'big'</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">text</span><span class="p">),</span><span class="mi">4</span><span class="p">)]</span>
<span class="n">M</span> <span class="o">=</span> <span class="mh">0xffff</span>
<span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">z</span><span class="p">,</span><span class="n">u</span> <span class="o">=</span> <span class="mh">0x0124fdce</span><span class="p">,</span> <span class="mh">0x89ab57ea</span><span class="p">,</span> <span class="mh">0xba89370a</span><span class="p">,</span> <span class="mh">0xfedc45ef</span>
<span class="n">A</span><span class="p">,</span><span class="n">B</span><span class="p">,</span><span class="n">C</span><span class="p">,</span><span class="n">D</span> <span class="o">=</span> <span class="mh">0x401ab257</span><span class="p">,</span> <span class="mh">0xb7cd34e1</span><span class="p">,</span> <span class="mh">0x76b3a27c</span><span class="p">,</span> <span class="mh">0xf13c3adf</span>
<span class="n">RV1</span><span class="p">,</span><span class="n">RV2</span><span class="p">,</span><span class="n">RV3</span><span class="p">,</span><span class="n">RV4</span> <span class="o">=</span> <span class="mh">0xe12f23cd</span><span class="p">,</span> <span class="mh">0xc5ab6789</span><span class="p">,</span> <span class="mh">0xf1234567</span><span class="p">,</span> <span class="mh">0x9a8bc7ef</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">text</span><span class="p">),</span><span class="mi">4</span><span class="p">):</span>
	<span class="n">X</span><span class="p">,</span><span class="n">Y</span><span class="p">,</span><span class="n">Z</span><span class="p">,</span><span class="n">U</span> <span class="o">=</span> <span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">^</span><span class="n">x</span><span class="p">,</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">^</span><span class="n">y</span><span class="p">,</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">^</span><span class="n">z</span><span class="p">,</span><span class="n">text</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">^</span><span class="n">u</span>
	<span class="n">RV1</span> <span class="o">^=</span> <span class="p">(</span><span class="n">x</span> <span class="p">:</span><span class="o">=</span> <span class="p">(</span><span class="n">X</span><span class="o">&amp;</span><span class="mh">0xffff</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">M</span> <span class="o">-</span> <span class="p">(</span><span class="n">Y</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="n">ROTL</span><span class="p">(</span><span class="n">Z</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">^</span> <span class="n">ROTR</span><span class="p">(</span><span class="n">U</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="o">^</span> <span class="n">A</span><span class="p">)</span>
	<span class="n">RV2</span> <span class="o">^=</span> <span class="p">(</span><span class="n">y</span> <span class="p">:</span><span class="o">=</span> <span class="p">(</span><span class="n">Y</span><span class="o">&amp;</span><span class="mh">0xffff</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">M</span> <span class="o">-</span> <span class="p">(</span><span class="n">Z</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="n">ROTL</span><span class="p">(</span><span class="n">U</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="o">^</span> <span class="n">ROTR</span><span class="p">(</span><span class="n">X</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="o">^</span> <span class="n">B</span><span class="p">)</span>
	<span class="n">RV3</span> <span class="o">^=</span> <span class="p">(</span><span class="n">z</span> <span class="p">:</span><span class="o">=</span> <span class="p">(</span><span class="n">Z</span><span class="o">&amp;</span><span class="mh">0xffff</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">M</span> <span class="o">-</span> <span class="p">(</span><span class="n">U</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="n">ROTL</span><span class="p">(</span><span class="n">X</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="o">^</span> <span class="n">ROTR</span><span class="p">(</span><span class="n">Y</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span> <span class="o">^</span> <span class="n">C</span><span class="p">)</span>
	<span class="n">RV4</span> <span class="o">^=</span> <span class="p">(</span><span class="n">u</span> <span class="p">:</span><span class="o">=</span> <span class="p">(</span><span class="n">U</span><span class="o">&amp;</span><span class="mh">0xffff</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">M</span> <span class="o">-</span> <span class="p">(</span><span class="n">X</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">))</span> <span class="o">^</span> <span class="n">ROTL</span><span class="p">(</span><span class="n">Y</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span> <span class="o">^</span> <span class="n">ROTR</span><span class="p">(</span><span class="n">Z</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span> <span class="o">^</span> <span class="n">D</span><span class="p">)</span>
</code></pre></div></div>

<p>Anyways, it was a fun challenge, I had a lot of fun and hope that some 
weird soul had its fun too reading this writeup :)</p>]]></content><author><name>deuterium</name><email>farziemailid69@gmail.com</email></author><category term="HTB" /><category term="2022" /><category term="cyber_apocalypse" /><category term="cryptography" /><category term="hashcollision" /><category term="z3" /><category term="cryptanalysis" /><category term="netcat" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">SDCTF 2022 Crypto - Tasty Crypto Roll</title><link href="https://deut-erium.github.io/WriteUps/WriteUps/2022/sdctf/crypto/tasty_crypto_roll/2022-05-10-SDCTF-2022-Tasty-Crypto-Roll" rel="alternate" type="text/html" title="SDCTF 2022 Crypto - Tasty Crypto Roll" /><published>2022-05-10T00:00:00+05:30</published><updated>2022-05-10T00:00:00+05:30</updated><id>https://deut-erium.github.io/WriteUps/WriteUps/2022/sdctf/crypto/tasty_crypto_roll/SDCTF-2022-Tasty-Crypto-Roll</id><content type="html" xml:base="https://deut-erium.github.io/WriteUps/WriteUps/2022/sdctf/crypto/tasty_crypto_roll/2022-05-10-SDCTF-2022-Tasty-Crypto-Roll"><![CDATA[<!--more-->

<h1 id="tasty-crypto-roll">Tasty Crypto Roll</h1>
<h2 id="description">Description</h2>
<blockquote>
  <p>CRYPTO - Hard <br />
Tasty Crypto Roll<br />
Bob, the genius intern at our company, invented AES-improved. It is based on AES but with layers after layers of proprietary encryption techniques on top of it.</p>

  <p>The end result is an encryption scheme that achieves both confusion and diffusion. The more layers of crypto you add, the better the security, right?</p>

  <p>Encrypter<br />
<a href="encrypt.py">encrypt.py</a><br />
Encrypted file<br />
<a href="enc.bin">enc.bin</a><br />
Note<br />
The intended solution requires very little brute force and runs under 5 seconds on our machine.<br />
By k3v1n</p>

</blockquote>

<h2 id="source">Source</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">secrets</span>
<span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>

<span class="n">ENCODING</span> <span class="o">=</span> <span class="s">'utf-8'</span>

<span class="k">def</span> <span class="nf">generate_key</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">os</span><span class="p">.</span><span class="n">getpid</span><span class="p">(),</span> <span class="n">secrets</span><span class="p">.</span><span class="n">token_bytes</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">to_binary</span><span class="p">(</span><span class="n">b</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">):</span>
    <span class="k">return</span> <span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="s">'{:08b}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">b</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">from_binary</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">bytes</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">8</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="mi">8</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">message</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">):</span>
    <span class="n">cipher</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_ECB</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">cipher</span><span class="p">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>

<span class="n">key1</span><span class="p">,</span> <span class="n">key2</span> <span class="o">=</span> <span class="n">generate_key</span><span class="p">()</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Using Key:</span><span class="se">\n</span><span class="si">{</span><span class="n">key1</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">key2</span><span class="p">.</span><span class="nb">hex</span><span class="p">()</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">get_flag</span><span class="p">():</span>
    <span class="n">flag</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">'Enter the flag to encrypt: '</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">flag</span><span class="p">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">'sdctf{'</span><span class="p">)</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">flag</span><span class="p">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">'}'</span><span class="p">)</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">flag</span><span class="p">.</span><span class="n">isascii</span><span class="p">():</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">flag</span><span class="si">}</span><span class="s"> is not a valid flag for this challenge'</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">flag</span>

<span class="n">plaintext</span> <span class="o">=</span> <span class="n">get_flag</span><span class="p">()[</span><span class="mi">6</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">plaintext</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="n">ENCODING</span><span class="p">)</span>

<span class="n">codes</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0xb0</span><span class="p">,</span> <span class="mh">0x1b0</span><span class="p">)))</span>
<span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span>
<span class="n">random</span><span class="p">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">codes</span><span class="p">)</span>
<span class="n">sboxes</span> <span class="o">=</span> <span class="p">[</span><span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">codes</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="p">:(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">128</span><span class="p">)]</span>

<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">sboxes</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">128</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Bad key, try again"</span><span class="p">)</span>
    <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

<span class="n">data</span> <span class="o">=</span> <span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">sboxes</span><span class="p">[</span><span class="n">c</span><span class="p">]</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">data</span><span class="p">).</span><span class="n">encode</span><span class="p">(</span><span class="n">ENCODING</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">encrypt</span><span class="p">(</span><span class="n">key2</span><span class="p">,</span> <span class="n">to_binary</span><span class="p">(</span><span class="n">data</span><span class="p">).</span><span class="n">encode</span><span class="p">(</span><span class="n">ENCODING</span><span class="p">))</span>

<span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span>
<span class="n">key_final</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="n">randrange</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">16</span><span class="p">))</span>

<span class="n">data_bits</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">to_binary</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
<span class="n">random</span><span class="p">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">data_bits</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">from_binary</span><span class="p">(</span><span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">data_bits</span><span class="p">))</span>

<span class="n">ciphertext</span> <span class="o">=</span> <span class="n">encrypt</span><span class="p">(</span><span class="n">key_final</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Encrypted: </span><span class="si">{</span><span class="n">ciphertext</span><span class="p">.</span><span class="nb">hex</span><span class="p">()</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'enc.bin2'</span><span class="p">,</span> <span class="s">'wb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">ef</span><span class="p">:</span>
    <span class="n">ef</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="analysis">Analysis</h2>
<p>Here we can see mainly two parts</p>
<ol>
  <li>There are two keys
    <ul>
      <li><code class="language-plaintext highlighter-rouge">key1</code>: pid of current process</li>
      <li><code class="language-plaintext highlighter-rouge">key2</code>: secure random key of 16 bytes</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">key1</code> is used as seed at a lot of places and is bruteforcable (&lt; 2^15)
<code class="language-plaintext highlighter-rouge">key_final</code> and <code class="language-plaintext highlighter-rouge">sboxes</code> are derived from <code class="language-plaintext highlighter-rouge">key1</code>, shuffling is done using <code class="language-plaintext highlighter-rouge">key1</code></li>
</ol>

<h3 id="steps-to-crack">Steps to crack</h3>
<ol>
  <li>decrypt using <code class="language-plaintext highlighter-rouge">key_final</code></li>
  <li>convert the intermediate ciphertext <code class="language-plaintext highlighter-rouge">to_binary</code></li>
  <li>de-shuffle the bits</li>
  <li>generate <code class="language-plaintext highlighter-rouge">from_binary</code> intermediate ciphertext of the deshuffled bits</li>
  <li>decrypt using <code class="language-plaintext highlighter-rouge">key2</code>???</li>
</ol>

<h3 id="how-to-find-key1">How to find <code class="language-plaintext highlighter-rouge">key1</code>?</h3>
<p>Assume you have the correct <code class="language-plaintext highlighter-rouge">key1</code>, reverse for the key, validate the results <br />
using some validator/logical assumption.</p>

<p><code class="language-plaintext highlighter-rouge">codes</code> is a list of <code class="language-plaintext highlighter-rouge">2*(0x1b0-0xb0)</code> = <code class="language-plaintext highlighter-rouge">512</code> characters, utf-8 encoding of
which is 2-bytes each <br />
<code class="language-plaintext highlighter-rouge">sboxes</code> will have 4char strings, which encode to 8 bytes each on utf-8 (i.e
        after substitution)<br />
<code class="language-plaintext highlighter-rouge">data</code> is now <code class="language-plaintext highlighter-rouge">4*2 = 8</code> times each byte of the original plaintext<br />
<code class="language-plaintext highlighter-rouge">data</code> is converted <code class="language-plaintext highlighter-rouge">to_binary</code> before encryption hence each byte is converted<br />
to 8 <code class="language-plaintext highlighter-rouge">b"0"</code> or <code class="language-plaintext highlighter-rouge">b"1"</code> byte. Hence each character is substituted to some<br />
<code class="language-plaintext highlighter-rouge">8*8 = 64</code> byte string before encryption.<br />
Hence len of flag = <code class="language-plaintext highlighter-rouge">len(ciphertext)//64</code> = <code class="language-plaintext highlighter-rouge">3520//64 = 55</code> bytes</p>

<h4 id="assumption-1">Assumption 1</h4>
<p>Since length of flag is 55 characters, would it be reasonable to assume that<br />
there would be repeatitions of characters. And since each flag character is<br />
substituted to fixed 64-byte strings before encryption which is a multiple<br />
of AES block size of 16, AES also acts like simple substitution of the flag<br />
but we do not know the mapping.<br />
Hence if we reverse till step 4 above, we can simply check if there are any<br />
repeating 64-byte blocks, as incorrect shuffling of bits will result in each 
block to be distinct with almost 1 probability.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'enc.bin'</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">ciphertext</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">read</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">to_binary</span><span class="p">(</span><span class="n">b</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">):</span>
    <span class="k">return</span> <span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="s">'{:08b}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">b</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">from_binary</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">bytes</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">8</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="mi">8</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_ECB</span><span class="p">).</span><span class="n">encrypt</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">message</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_ECB</span><span class="p">).</span><span class="n">decrypt</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">unshuffle</span><span class="p">(</span><span class="n">data_list</span><span class="p">,</span> <span class="n">shuffle_order</span><span class="p">):</span>
    <span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">data_list</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">shuffle_order</span><span class="p">):</span>
        <span class="n">res</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">data_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">res</span>

<span class="k">def</span> <span class="nf">key_final_dec</span><span class="p">(</span><span class="n">key1</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">):</span>
    <span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span>
    <span class="n">key_final</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="n">randrange</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">16</span><span class="p">))</span>

    <span class="n">data</span> <span class="o">=</span> <span class="n">decrypt</span><span class="p">(</span><span class="n">key_final</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">)</span>
    <span class="n">data_bits</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">to_binary</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
    <span class="n">data_bits_order</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data_bits</span><span class="p">)))</span>
    <span class="n">random</span><span class="p">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">data_bits_order</span><span class="p">)</span>
    <span class="n">data_bits_uns</span> <span class="o">=</span> <span class="n">unshuffle</span><span class="p">(</span><span class="n">data_bits</span><span class="p">,</span> <span class="n">data_bits_order</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">from_binary</span><span class="p">(</span><span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">data_bits_uns</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">data</span>
</code></pre></div></div>

<p>Lets add a few validation too</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">key_final_enc</span><span class="p">(</span><span class="n">key1</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span>
    <span class="n">key_final</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="n">randrange</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">16</span><span class="p">))</span>
    <span class="n">data_bits</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">to_binary</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
    <span class="n">random</span><span class="p">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">data_bits</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">from_binary</span><span class="p">(</span><span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">data_bits</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">encrypt</span><span class="p">(</span><span class="n">key_final</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">test_unshuffle</span><span class="p">():</span>
    <span class="n">random_text</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="n">randbytes</span><span class="p">(</span><span class="mi">16</span><span class="o">*</span><span class="mi">1337</span><span class="p">))</span>
    <span class="n">random_text_shuffled</span> <span class="o">=</span> <span class="n">random_text</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
    <span class="n">shuffle_order</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">random_text</span><span class="p">)))</span>
    <span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">1337</span><span class="p">)</span>
    <span class="n">random</span><span class="p">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">random_text_shuffled</span><span class="p">)</span>
    <span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">1337</span><span class="p">)</span>
    <span class="n">random</span><span class="p">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">shuffle_order</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">unshuffle</span><span class="p">(</span><span class="n">random_text_shuffled</span><span class="p">,</span> <span class="n">shuffle_order</span><span class="p">)</span> <span class="o">==</span> <span class="n">random_text</span>

<span class="k">def</span> <span class="nf">test_key_final_dec</span><span class="p">():</span>
    <span class="n">random_text</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">randbytes</span><span class="p">(</span><span class="mi">16</span><span class="o">*</span><span class="mi">100</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">key_final_dec</span><span class="p">(</span><span class="mi">1337</span><span class="p">,</span> <span class="n">key_final_enc</span><span class="p">(</span><span class="mi">1337</span><span class="p">,</span> <span class="n">random_text</span><span class="p">))</span> <span class="o">==</span> <span class="n">random_text</span>

<span class="n">test_unshuffle</span><span class="p">()</span>
<span class="n">test_key_final_dec</span><span class="p">()</span>
</code></pre></div></div>
<p>Looks like all the decryption functions are correct, lets proceed with<br />
bruteforcing for <code class="language-plaintext highlighter-rouge">key1</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">key1</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">15</span><span class="p">),</span><span class="n">desc</span><span class="o">=</span><span class="s">'solving for key1'</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">key_final_dec</span><span class="p">(</span><span class="n">key1</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">)</span>
    <span class="n">substitutions</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">64</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span><span class="mi">64</span><span class="p">))</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">substitutions</span><span class="p">)</span><span class="o">!=</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">//</span><span class="mi">64</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"pid ="</span><span class="p">,</span><span class="n">key1</span><span class="p">)</span>
        <span class="k">break</span>
</code></pre></div></div>
<p>After waiting for an eternity, and exhausting the search space of possible pid’s<br />
yet not getting any <code class="language-plaintext highlighter-rouge">key1</code> got me confused. I checked my script locally for a <br />
test flag it seemed to work fine. There could only be one possibility <br />
<strong>the flag contains 55 distinct characters</strong><br />
But how would I find <code class="language-plaintext highlighter-rouge">key1</code> now?</p>

<h4 id="missed-catch">Missed Catch</h4>
<p>@Utaha#6878 pointed out, that since there are only 256 distinct values in
<code class="language-plaintext highlighter-rouge">codes</code> each repeated twice, and each character encoded to some <code class="language-plaintext highlighter-rouge">b"0"</code> or <code class="language-plaintext highlighter-rouge">b"1"</code><br />
byte strings of length 16, It must be encrypted to the same block always.<br />
Since the flag is <code class="language-plaintext highlighter-rouge">55*4 = 220</code> such 16-byte codes and each code is used twice<br />
for most of the characters, there will be repating 16-byte blocks even with <br />
distinct flag characters.</p>

<h4 id="assumption-2">Assumption 2</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">key1</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">15</span><span class="p">),</span><span class="n">desc</span><span class="o">=</span><span class="s">'solving for key1'</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">key_final_dec</span><span class="p">(</span><span class="n">key1</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">)</span>
    <span class="n">substitutions</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">16</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span><span class="mi">16</span><span class="p">))</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">substitutions</span><span class="p">)</span><span class="o">!=</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">//</span><span class="mi">16</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"pid ="</span><span class="p">,</span><span class="n">key1</span><span class="p">)</span>
        <span class="k">break</span>
</code></pre></div></div>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">pid = 83</code></p>
</blockquote>

<p>And we found our <code class="language-plaintext highlighter-rouge">key1</code>!<br />
And we can confirm that the flag is indeed 55 distinct characters.</p>

<p>Wait, if the flag is 55 distinct characters, how will we solve for the subs?<br />
We have no statistical advantage and hence bye bye Mr 
<a href="https://quipqiup.com/">quipquip</a></p>

<h3 id="how-do-we-find-mapping-for-substitution">How do we find mapping for substitution?</h3>
<p>Each <code class="language-plaintext highlighter-rouge">sbox</code> entry is composed of 4 2-byte strings, which can be one of 256<br />
possible values. Moreover, their order is fixed, which is determined by <code class="language-plaintext highlighter-rouge">key1</code>.</p>

<p>If we try to solve for all valid mappings for <code class="language-plaintext highlighter-rouge">AES(binary(sbox(char)))</code> we will
probably end up on the correct mapping and get our flag.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+---------------+---------------+------------------------+---------------+
|flag0          |    flag1      |                        |   flag55      |
+---------------+---------------+         ....           +---------------+
|  sbox         |   sbox        |                        |    sbox       |
+---+---+---+---+---+---+---+---+------------------------+---------------+
|c1 |c2 |c3 |c4 |c5 |c6 |c7 |c8 |                        |               |
|   |   |   |   |   |   |   |   |                        |               |
+---+---+---+---+---+---+---+---+         ....           +---------------+
|   AES         |    AES        |                        |               |
+---+---+-------+---------------+------------------------+---------------+
|   |   +------+                                                          
|   +--+       |                                                          
+------+-------+-------+------+                                           
|E(c1) | E(c2) | E(c3) | E(c4)|                                             
+------+-------+-------+------+   
</code></pre></div></div>

<h3 id="enter-z3">Enter Z3</h3>
<p>We can assume our flag to be a list of <code class="language-plaintext highlighter-rouge">BitVec</code> of 7 bits each<br />
And let the sboxes be a mapping from 7 bits to 64 bits each (16x4)<br />
This can be achieved by assuming sbox to be an array which is indexed<br />
by <code class="language-plaintext highlighter-rouge">BitVec(7)</code> and contains elements of <code class="language-plaintext highlighter-rouge">BitVec(64)</code><br />
And we assume AES to be some function form <code class="language-plaintext highlighter-rouge">BitVec(16)</code> to <code class="language-plaintext highlighter-rouge">BitVec(128)</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">flag</span> <span class="o">=</span> <span class="p">[</span><span class="n">BitVec</span><span class="p">(</span><span class="s">'flag_'</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">),</span><span class="mi">7</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">//</span><span class="mi">64</span><span class="p">)]</span>
<span class="n">sboxmap</span> <span class="o">=</span> <span class="n">Array</span><span class="p">(</span><span class="s">'sbox'</span><span class="p">,</span><span class="n">BitVecSort</span><span class="p">(</span><span class="mi">7</span><span class="p">),</span> <span class="n">BitVecSort</span><span class="p">(</span><span class="mi">64</span><span class="p">))</span>
<span class="n">aes_encryption</span> <span class="o">=</span> <span class="n">Function</span><span class="p">(</span><span class="s">'AES'</span><span class="p">,</span><span class="n">BitVecSort</span><span class="p">(</span><span class="mi">16</span><span class="p">),</span> <span class="n">BitVecSort</span><span class="p">(</span><span class="mi">128</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">codes</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0xb0</span><span class="p">,</span> <span class="mh">0x1b0</span><span class="p">)))</span>
<span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span>
<span class="n">random</span><span class="p">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">codes</span><span class="p">)</span>
<span class="c1"># keeping sboxes utf encoded already
</span><span class="n">sboxes</span> <span class="o">=</span> <span class="p">[</span><span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">codes</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="p">:(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">]).</span><span class="n">encode</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">128</span><span class="p">)]</span>

<span class="n">sbytes</span> <span class="o">=</span> <span class="sa">b</span><span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">sboxes</span><span class="p">)</span>
<span class="n">sboxints</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="nb">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="s">'big'</span><span class="p">),</span>
            <span class="nb">set</span><span class="p">(</span><span class="n">sbytes</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">sbytes</span><span class="p">),</span><span class="mi">2</span><span class="p">))))</span>
<span class="c1"># integer values for 2-byte codes from sbox, will be explained shortly
</span>
<span class="n">sboxes</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="s">'big'</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">sboxes</span><span class="p">]</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">key_final_dec</span><span class="p">(</span><span class="n">key1</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">)</span>
<span class="c1"># converting intermediate decryption to 128 bit ints
</span><span class="n">data_int</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span><span class="mi">16</span><span class="p">):</span>
    <span class="n">data_int</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">16</span><span class="p">],</span><span class="s">'big'</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># we know the sbox already
</span><span class="n">constraints</span> <span class="o">=</span> <span class="p">[</span><span class="n">sboxmap</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="n">sboxes</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">128</span><span class="p">)]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">//</span><span class="mi">64</span><span class="p">):</span>
    <span class="n">four_code</span> <span class="o">=</span> <span class="n">sboxmap</span><span class="p">[</span><span class="n">flag</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span>
    <span class="c1"># splitting 64 bit quantity to 16 bit individual sbox codes
</span>    <span class="n">four_code_parts</span> <span class="o">=</span> <span class="p">[</span><span class="n">Extract</span><span class="p">(</span><span class="mi">16</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">15</span><span class="p">,</span><span class="mi">16</span><span class="o">*</span><span class="n">i</span><span class="p">,</span><span class="n">four_code</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
    <span class="c1"># for each code, matching aes_encryption with the observed value
</span>    <span class="k">for</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">data_int</span><span class="p">[</span><span class="mi">4</span><span class="o">*</span><span class="n">i</span><span class="p">:</span><span class="mi">4</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="mi">4</span><span class="p">],</span> <span class="n">four_code_parts</span><span class="p">):</span>
        <span class="n">constraints</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">aes_encryption</span><span class="p">(</span><span class="n">b</span><span class="p">)</span><span class="o">==</span><span class="n">a</span><span class="p">)</span>
    <span class="c1"># last but not least, aes_encryption(i) is unique for each plaintext
</span>    <span class="c1"># how would z3 know? Distinct function encodes them appropriately to
</span>    <span class="c1"># be distinct
</span>    <span class="n">constraints</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">Distinct</span><span class="p">([</span><span class="n">aes_encryption</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">sboxints</span><span class="p">]))</span>

<span class="n">solver</span> <span class="o">=</span> <span class="n">Solver</span><span class="p">()</span>
<span class="n">solver</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">constraints</span><span class="p">)</span>
<span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">all_smt</span><span class="p">(</span><span class="n">solver</span><span class="p">,</span> <span class="n">flag</span><span class="p">):</span>
    <span class="c1"># lets check for all satisfying flags (in case there are more than one
</span>    <span class="c1"># possible mappings and we will rule out invalid ones in that scenario?
</span>    <span class="n">flag_bytes</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">([</span><span class="n">m</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="n">flag</span><span class="p">[</span><span class="n">i</span><span class="p">]).</span><span class="n">as_long</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">flag</span><span class="p">))])</span>
    <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">flag_bytes</span><span class="p">))</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">Counter</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">64</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span><span class="mi">64</span><span class="p">)))</span>
    <span class="k">print</span><span class="p">(</span><span class="n">flag_bytes</span><span class="p">)</span> 
</code></pre></div></div>

<h2 id="flag">Flag</h2>
<p>After running the script, we finally get our flag!</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">b'r0l1-uR~pWn.c6yPtO_wi7h,ECB:I5*b8d!KQvJmLxgX9DsaANMFSeU'</code></p>
</blockquote>

<p>And it turns out to be the only satisfying assignment.<br />
Turns out if there were repeated characters in the flag, we will get multiple<br />
possible satisfying values. So the admins have not been so cheeky afterall</p>

<h2 id="full-script">Full <a href="solve.py">script</a></h2>
<p>Note that it takes a couple of seconds to find the z3 model</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">random</span>
<span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
<span class="kn">from</span> <span class="nn">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span>
<span class="kn">from</span> <span class="nn">z3</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">sys</span>


<span class="k">def</span> <span class="nf">all_smt</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">initial_terms</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">block_term</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
        <span class="n">s</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">t</span> <span class="o">!=</span> <span class="n">m</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="n">t</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">fix_term</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
        <span class="n">s</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">t</span> <span class="o">==</span> <span class="n">m</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="n">t</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">all_smt_rec</span><span class="p">(</span><span class="n">terms</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">sat</span> <span class="o">==</span> <span class="n">s</span><span class="p">.</span><span class="n">check</span><span class="p">():</span>
            <span class="n">m</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">model</span><span class="p">()</span>
            <span class="k">yield</span> <span class="n">m</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">terms</span><span class="p">)):</span>
                <span class="n">s</span><span class="p">.</span><span class="n">push</span><span class="p">()</span>
                <span class="n">block_term</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">terms</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
                <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
                    <span class="n">fix_term</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">terms</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
                <span class="k">yield</span> <span class="k">from</span> <span class="n">all_smt_rec</span><span class="p">(</span><span class="n">terms</span><span class="p">[</span><span class="n">i</span><span class="p">:])</span>
                <span class="n">s</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>
    <span class="k">yield</span> <span class="k">from</span> <span class="n">all_smt_rec</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">initial_terms</span><span class="p">))</span>


<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'enc.bin'</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">ciphertext</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">read</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">to_binary</span><span class="p">(</span><span class="n">b</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">):</span>
    <span class="k">return</span> <span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="s">'{:08b}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">b</span><span class="p">])</span>


<span class="k">def</span> <span class="nf">from_binary</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">bytes</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="mi">8</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="mi">8</span><span class="p">))</span>


<span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_ECB</span><span class="p">).</span><span class="n">encrypt</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">message</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_ECB</span><span class="p">).</span><span class="n">decrypt</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">key_final_enc</span><span class="p">(</span><span class="n">key1</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span>
    <span class="n">key_final</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="n">randrange</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">16</span><span class="p">))</span>
    <span class="n">data_bits</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">to_binary</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
    <span class="n">random</span><span class="p">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">data_bits</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">from_binary</span><span class="p">(</span><span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">data_bits</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">encrypt</span><span class="p">(</span><span class="n">key_final</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">unshuffle</span><span class="p">(</span><span class="n">data_list</span><span class="p">,</span> <span class="n">shuffle_order</span><span class="p">):</span>
    <span class="n">res</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">data_list</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">shuffle_order</span><span class="p">):</span>
        <span class="n">res</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">data_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">res</span>


<span class="k">def</span> <span class="nf">test_unshuffle</span><span class="p">():</span>
    <span class="n">random_text</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="n">randbytes</span><span class="p">(</span><span class="mi">16</span> <span class="o">*</span> <span class="mi">100</span><span class="p">))</span>
    <span class="n">random_text_shuffled</span> <span class="o">=</span> <span class="n">random_text</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
    <span class="n">shuffle_order</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">random_text</span><span class="p">)))</span>
    <span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    <span class="n">random</span><span class="p">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">random_text_shuffled</span><span class="p">)</span>
    <span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    <span class="n">random</span><span class="p">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">shuffle_order</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">unshuffle</span><span class="p">(</span><span class="n">random_text_shuffled</span><span class="p">,</span> <span class="n">shuffle_order</span><span class="p">)</span> <span class="o">==</span> <span class="n">random_text</span>


<span class="n">test_unshuffle</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">key_final_dec</span><span class="p">(</span><span class="n">key1</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">):</span>
    <span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span>
    <span class="n">key_final</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="n">randrange</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">16</span><span class="p">))</span>

    <span class="n">data</span> <span class="o">=</span> <span class="n">decrypt</span><span class="p">(</span><span class="n">key_final</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">)</span>
    <span class="n">data_bits</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">to_binary</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
    <span class="n">data_bits_order</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data_bits</span><span class="p">)))</span>
    <span class="n">random</span><span class="p">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">data_bits_order</span><span class="p">)</span>
    <span class="n">data_bits_uns</span> <span class="o">=</span> <span class="n">unshuffle</span><span class="p">(</span><span class="n">data_bits</span><span class="p">,</span> <span class="n">data_bits_order</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">from_binary</span><span class="p">(</span><span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">data_bits_uns</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">data</span>


<span class="k">def</span> <span class="nf">test_key_final_dec</span><span class="p">():</span>
    <span class="n">random_text</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">randbytes</span><span class="p">(</span><span class="mi">16</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">key_final_dec</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">key_final_enc</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">random_text</span><span class="p">))</span> <span class="o">==</span> <span class="n">random_text</span>


<span class="n">test_key_final_dec</span><span class="p">()</span>

<span class="k">for</span> <span class="n">key1</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">15</span><span class="p">),</span> <span class="n">desc</span><span class="o">=</span><span class="s">'solving for key1'</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">key_final_dec</span><span class="p">(</span><span class="n">key1</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">)</span>
    <span class="n">substitutions</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="mi">16</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="mi">16</span><span class="p">))</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">substitutions</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">//</span> <span class="mi">16</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"pid ="</span><span class="p">,</span> <span class="n">key1</span><span class="p">)</span>
        <span class="k">break</span>

<span class="n">codes</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mh">0xb0</span><span class="p">,</span> <span class="mh">0x1b0</span><span class="p">)))</span>
<span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span>
<span class="n">random</span><span class="p">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">codes</span><span class="p">)</span>
<span class="n">sboxes</span> <span class="o">=</span> <span class="p">[</span><span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">codes</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span><span class="p">:(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mi">4</span><span class="p">]).</span><span class="n">encode</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">128</span><span class="p">)]</span>
<span class="n">sbytes</span> <span class="o">=</span> <span class="sa">b</span><span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">sboxes</span><span class="p">)</span>
<span class="n">sboxints</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="nb">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="s">'big'</span><span class="p">),</span> <span class="nb">set</span><span class="p">(</span>
    <span class="n">sbytes</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">sbytes</span><span class="p">),</span> <span class="mi">2</span><span class="p">))))</span>
<span class="n">sboxes</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="s">'big'</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">sboxes</span><span class="p">]</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">key_final_dec</span><span class="p">(</span><span class="n">key1</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">)</span>
<span class="n">data_int</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="mi">16</span><span class="p">):</span>
    <span class="n">data_int</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="mi">16</span><span class="p">],</span> <span class="s">'big'</span><span class="p">))</span>

<span class="n">flag</span> <span class="o">=</span> <span class="p">[</span><span class="n">BitVec</span><span class="p">(</span><span class="s">'flag_'</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">),</span> <span class="mi">7</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">//</span> <span class="mi">64</span><span class="p">)]</span>
<span class="n">sboxmap</span> <span class="o">=</span> <span class="n">Array</span><span class="p">(</span><span class="s">'sbox'</span><span class="p">,</span> <span class="n">BitVecSort</span><span class="p">(</span><span class="mi">7</span><span class="p">),</span> <span class="n">BitVecSort</span><span class="p">(</span><span class="mi">64</span><span class="p">))</span>
<span class="n">aes_encryption</span> <span class="o">=</span> <span class="n">Function</span><span class="p">(</span><span class="s">'AES'</span><span class="p">,</span> <span class="n">BitVecSort</span><span class="p">(</span><span class="mi">16</span><span class="p">),</span> <span class="n">BitVecSort</span><span class="p">(</span><span class="mi">128</span><span class="p">))</span>

<span class="n">constraints</span> <span class="o">=</span> <span class="p">[</span><span class="n">sboxmap</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">sboxes</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">128</span><span class="p">)]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">//</span> <span class="mi">64</span><span class="p">):</span>
    <span class="n">four_code</span> <span class="o">=</span> <span class="n">sboxmap</span><span class="p">[</span><span class="n">flag</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span>
    <span class="n">four_code_parts</span> <span class="o">=</span> <span class="p">[</span><span class="n">Extract</span><span class="p">(</span><span class="mi">16</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">16</span> <span class="o">*</span> <span class="n">i</span><span class="p">,</span> <span class="n">four_code</span><span class="p">)</span>
                       <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
    <span class="k">for</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">data_int</span><span class="p">[</span><span class="mi">4</span> <span class="o">*</span> <span class="n">i</span><span class="p">:</span><span class="mi">4</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">4</span><span class="p">],</span> <span class="n">four_code_parts</span><span class="p">):</span>
        <span class="n">constraints</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">aes_encryption</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="o">==</span> <span class="n">a</span><span class="p">)</span>
    <span class="n">constraints</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">Distinct</span><span class="p">([</span><span class="n">aes_encryption</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">sboxints</span><span class="p">]))</span>
<span class="n">solver</span> <span class="o">=</span> <span class="n">Solver</span><span class="p">()</span>
<span class="n">solver</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">constraints</span><span class="p">)</span>
<span class="c1"># if solver.check() == sat:
# m = solver.model()
</span><span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">all_smt</span><span class="p">(</span><span class="n">solver</span><span class="p">,</span> <span class="n">flag</span><span class="p">):</span>
    <span class="n">flag_bytes</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">([</span><span class="n">m</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="n">flag</span><span class="p">[</span><span class="n">i</span><span class="p">]).</span><span class="n">as_long</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">flag</span><span class="p">))])</span>
    <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">flag_bytes</span><span class="p">))</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span>
        <span class="n">Counter</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="mi">64</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="mi">64</span><span class="p">)))</span>
    <span class="k">print</span><span class="p">(</span><span class="n">flag_bytes</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"failed to solve"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="alternate-solution-by-teammate-utaha6878">Alternate Solution by teammate (Utaha#6878)</h3>

<p>All due regards to him for solving the challenge while I was stuck over finding<br />
<code class="language-plaintext highlighter-rouge">key1</code> XD</p>

<p>All parts will be almost same except the substitution solving part, which he<br />
did by manual bruteforcing i.e. recursively enumerating all mappings and
backtracking on contradictions</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mp</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
<span class="n">codes</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">([[</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">256</span><span class="p">)],</span> <span class="n">start</span><span class="o">=</span><span class="p">[])</span> 
<span class="c1"># notice that the range is changed from [0xb0, 0x1b0) to [0, 256). 
# It's just for relabeling.
</span><span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="n">key1</span><span class="p">)</span>
<span class="n">random</span><span class="p">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">codes</span><span class="p">)</span>
<span class="n">sboxes</span> <span class="o">=</span> <span class="p">[</span><span class="n">codes</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">4</span><span class="p">:(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">128</span><span class="p">)]</span>

<span class="k">def</span> <span class="nf">match</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
	<span class="s">"""
	equate two objects elementwise ignoring if the entry is -1
	"""</span>
    <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">or</span> <span class="n">y</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
            <span class="k">continue</span>
        <span class="k">if</span> <span class="n">x</span> <span class="o">!=</span> <span class="n">y</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
    <span class="k">return</span> <span class="bp">True</span>

<span class="n">answers</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">getFlag</span><span class="p">(</span><span class="n">cip</span><span class="p">,</span> <span class="n">sboxes</span><span class="p">,</span> <span class="n">mp</span><span class="p">):</span> 
<span class="c1"># get the flag based on current mapping, unknown char will be shown as '?'
</span>    <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">cip</span><span class="p">:</span>
        <span class="n">afterMap</span> <span class="o">=</span> <span class="p">[</span><span class="n">mp</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">c</span><span class="p">]</span>
        <span class="n">found</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">s</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">sboxes</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">s</span> <span class="o">==</span> <span class="n">afterMap</span><span class="p">:</span>
                <span class="n">res</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="n">found</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="k">break</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">found</span><span class="p">:</span>
            <span class="n">res</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="s">'?'</span><span class="p">))</span>
    <span class="k">return</span> <span class="nb">bytes</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">brute</span><span class="p">(</span><span class="n">cip</span><span class="p">,</span> <span class="n">sboxes</span><span class="p">,</span> <span class="n">mp</span><span class="p">):</span>
    <span class="s">"""
    cip and sboxes remain unchanged throughout the recursive call, 
    but I feel bad using global varaibles.
    """</span>
    <span class="k">if</span> <span class="n">DEBUG</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">getFlag</span><span class="p">(</span><span class="n">cip</span><span class="p">,</span> <span class="n">sboxes</span><span class="p">,</span> <span class="n">mp</span><span class="p">))</span>

    <span class="c1"># check is finished
</span>    <span class="n">isFinished</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">cip</span><span class="p">:</span>
        <span class="k">if</span> <span class="nb">all</span><span class="p">(</span><span class="n">x</span> <span class="ow">in</span> <span class="n">mp</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">c</span><span class="p">):</span>
            <span class="k">pass</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">isFinished</span> <span class="o">=</span> <span class="bp">False</span>

    <span class="k">if</span> <span class="n">isFinished</span><span class="p">:</span>
        <span class="n">answers</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">getFlag</span><span class="p">(</span><span class="n">cip</span><span class="p">,</span> <span class="n">sboxes</span><span class="p">,</span> <span class="n">mp</span><span class="p">))</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Found an answer!!!!!!!"</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="c1"># try matching
</span>    <span class="n">isContradiction</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="n">mp</span> <span class="o">=</span> <span class="n">mp</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>

    <span class="c1"># Find the one with least possible matches.
</span>    <span class="n">min_pos</span> <span class="o">=</span> <span class="mi">256</span>
    <span class="n">index</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>

    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">cip</span><span class="p">):</span>
        <span class="n">afterMap</span> <span class="o">=</span> <span class="p">[</span><span class="n">mp</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">c</span><span class="p">]</span>
        <span class="k">if</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">afterMap</span><span class="p">:</span>
            <span class="k">continue</span>

        <span class="n">matches</span> <span class="o">=</span> <span class="p">[</span><span class="n">s</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">sboxes</span> <span class="k">if</span> <span class="n">match</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">afterMap</span><span class="p">)]</span>

        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">matches</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">isContradiction</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="k">break</span>

        <span class="k">if</span> <span class="n">min_pos</span> <span class="o">&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">matches</span><span class="p">):</span>
            <span class="n">index</span> <span class="o">=</span> <span class="n">idx</span>
            <span class="n">min_pos</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">matches</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">isContradiction</span><span class="p">:</span>
        <span class="k">return</span>

    <span class="c1"># now bruteforce all possibilities
</span>    <span class="k">assert</span> <span class="n">index</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span>
    <span class="n">afterMap</span> <span class="o">=</span> <span class="p">[</span><span class="n">mp</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">cip</span><span class="p">[</span><span class="n">index</span><span class="p">]]</span>
    <span class="n">matches</span> <span class="o">=</span> <span class="p">[</span><span class="n">s</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">sboxes</span> <span class="k">if</span> <span class="n">match</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">afterMap</span><span class="p">)]</span>
    <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">matches</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">cip</span><span class="p">[</span><span class="n">index</span><span class="p">],</span> <span class="n">m</span><span class="p">):</span>
            <span class="n">mp</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="n">y</span>
        <span class="n">brute</span><span class="p">(</span><span class="n">cip</span><span class="p">,</span> <span class="n">sboxes</span><span class="p">,</span> <span class="n">mp</span><span class="p">)</span>

<span class="c1"># This is based on the repetition
</span><span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">132</span><span class="p">,</span> <span class="mi">197</span><span class="p">]:</span>
    <span class="n">mp</span> <span class="o">=</span> <span class="p">{</span><span class="mi">35</span><span class="p">:</span> <span class="mi">224</span><span class="p">,</span> <span class="mi">109</span><span class="p">:</span> <span class="mi">144</span><span class="p">,</span> <span class="mi">4</span><span class="p">:</span> <span class="n">_</span><span class="p">}</span>
    <span class="n">brute</span><span class="p">(</span><span class="n">cip</span><span class="p">,</span> <span class="n">sboxes</span><span class="p">,</span> <span class="n">mp</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">"Answers:"</span><span class="p">)</span>
<span class="n">answers</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">answers</span><span class="p">))</span>
<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">answers</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">b</span><span class="s">"sdctf{"</span> <span class="o">+</span> <span class="n">x</span> <span class="o">+</span> <span class="sa">b</span><span class="s">"}"</span><span class="p">)</span>

<span class="c1"># The fourth one is the actual answer
</span></code></pre></div></div>

<blockquote>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ciphertext repetition:
[4, 5, 4, 6]
[34, 35, 36, 35]
[109, 60, 110, 109]
Sbox repetition:
[132, 93, 132, 211]
[197, 32, 197, 248]
[144, 86, 67, 144]
[165, 224, 27, 224]
Found an answer!!!!!!!
Found an answer!!!!!!!
Found an answer!!!!!!!
Found an answer!!!!!!!
Found an answer!!!!!!!
Found an answer!!!!!!!
Found an answer!!!!!!!
Found an answer!!!!!!!
Answers:
b'sdctf{r0l1-LR~pWn.c6yPtO_wi7h,ECB:I5*b8d!KQvJmLxgX95saANMFSeU}'
b'sdctf{r0l1-uR~pWn.c6yPtO_wi7h,ECB:I5*b8d!cQvJmLxgX9DsaANMFSeU}'
b'sdctf{r0l1-uR~pWn.c6yPtO_wi7h,ECB:I5*b8d!KQvJmLxgX9DsaANMFSeU}'
b'sdctf{r0l1-uR~pWn.c6yPtO_wi7h,ECB:I5*b8d!cQvJmLxgX95saANMFSeU}'
b'sdctf{r0l1-LR~pWn.c6yPtO_wi7h,ECB:I5*b8d!KQvJmLxgX9DsaANMFSeU}'
b'sdctf{r0l1-LR~pWn.c6yPtO_wi7h,ECB:I5*b8d!cQvJmLxgX9DsaANMFSeU}'
b'sdctf{r0l1-uR~pWn.c6yPtO_wi7h,ECB:I5*b8d!KQvJmLxgX95saANMFSeU}'
b'sdctf{r0l1-LR~pWn.c6yPtO_wi7h,ECB:I5*b8d!cQvJmLxgX95saANMFSeU}'
</code></pre></div>  </div>
</blockquote>

<p>full script in <a href="./solve2.py">solve2.py</a></p>]]></content><author><name>deuterium</name><email>farziemailid69@gmail.com</email></author><category term="SDCTF" /><category term="2022" /><category term="cryptography" /><category term="AES" /><category term="z3" /><category term="substitution" /><category term="permutation" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">rgbCTF 2020 Crypto - Adequate Encryption Standard</title><link href="https://deut-erium.github.io/WriteUps/WriteUps/2020/rgbctf/crypto/Adequate%20Encryption%20Standard/2020-07-13-rgbctf-2020-Adequate-Encryption_standard" rel="alternate" type="text/html" title="rgbCTF 2020 Crypto - Adequate Encryption Standard" /><published>2020-07-13T00:00:00+05:30</published><updated>2020-07-13T00:00:00+05:30</updated><id>https://deut-erium.github.io/WriteUps/WriteUps/2020/rgbctf/crypto/Adequate%20Encryption%20Standard/rgbctf-2020-Adequate-Encryption_standard</id><content type="html" xml:base="https://deut-erium.github.io/WriteUps/WriteUps/2020/rgbctf/crypto/Adequate%20Encryption%20Standard/2020-07-13-rgbctf-2020-Adequate-Encryption_standard"><![CDATA[<h1 id="aedquate-encryption-standard">Aedquate Encryption Standard</h1>

<h2 id="description">Description</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>I wrote my own AES! Can you break it?

hQWYogqLXUO+rePyWkNlBlaAX47/2dCeLFMLrmPKcYRLYZgFuqRC7EtwX4DRtG31XY4az+yOvJJ/pwWR0/J9gg==


~qpwoeirut#5057
</code></pre></div></div>

<h2 id="files">Files</h2>
<ul>
  <li><a href="adequate_encryption_standard.py">adequate_encryption_standard.py</a></li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">base64</span> <span class="kn">import</span> <span class="n">b64encode</span>

<span class="n">BLOCK_SIZE</span> <span class="o">=</span> <span class="mi">8</span>
<span class="n">ROUNDS</span> <span class="o">=</span> <span class="mi">8</span>

<span class="n">sbox</span> <span class="o">=</span> <span class="p">[</span><span class="mi">111</span><span class="p">,</span> <span class="mi">161</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">136</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">69</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">145</span><span class="p">,</span> <span class="mi">237</span><span class="p">,</span> <span class="mi">169</span><span class="p">,</span> <span class="mi">115</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">138</span><span class="p">,</span> <span class="mi">183</span><span class="p">,</span> <span class="mi">232</span><span class="p">,</span> <span class="mi">95</span><span class="p">,</span> <span class="mi">244</span><span class="p">,</span> <span class="mi">163</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">229</span><span class="p">,</span> <span class="mi">224</span><span class="p">,</span> <span class="mi">104</span><span class="p">,</span> <span class="mi">231</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span> <span class="mi">121</span><span class="p">,</span> <span class="mi">152</span><span class="p">,</span> <span class="mi">97</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">74</span><span class="p">,</span> <span class="mi">96</span><span class="p">,</span> <span class="mi">247</span><span class="p">,</span> <span class="mi">144</span><span class="p">,</span> <span class="mi">194</span><span class="p">,</span> <span class="mi">86</span><span class="p">,</span> <span class="mi">186</span><span class="p">,</span> <span class="mi">234</span><span class="p">,</span> <span class="mi">99</span><span class="p">,</span> <span class="mi">122</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">215</span><span class="p">,</span> <span class="mi">168</span><span class="p">,</span> <span class="mi">173</span><span class="p">,</span> <span class="mi">188</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span> <span class="mi">243</span><span class="p">,</span> <span class="mi">219</span><span class="p">,</span> <span class="mi">203</span><span class="p">,</span> <span class="mi">141</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">171</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">116</span><span class="p">,</span> <span class="mi">178</span><span class="p">,</span> <span class="mi">233</span><span class="p">,</span> <span class="mi">210</span><span class="p">,</span> <span class="mi">184</span><span class="p">,</span> <span class="mi">253</span><span class="p">,</span> <span class="mi">151</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">206</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="mi">133</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">147</span><span class="p">,</span> <span class="mi">137</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">187</span><span class="p">,</span> <span class="mi">129</span><span class="p">,</span> <span class="mi">225</span><span class="p">,</span> <span class="mi">209</span><span class="p">,</span> <span class="mi">191</span><span class="p">,</span> <span class="mi">92</span><span class="p">,</span> <span class="mi">238</span><span class="p">,</span> <span class="mi">127</span><span class="p">,</span> <span class="mi">241</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">160</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">170</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">157</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">205</span><span class="p">,</span> <span class="mi">196</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">146</span><span class="p">,</span> <span class="mi">142</span><span class="p">,</span> <span class="mi">150</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">118</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">216</span><span class="p">,</span> <span class="mi">220</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="mi">112</span><span class="p">,</span> <span class="mi">222</span><span class="p">,</span> <span class="mi">226</span><span class="p">,</span> <span class="mi">126</span><span class="p">,</span> <span class="mi">197</span><span class="p">,</span> <span class="mi">180</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">182</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">148</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">201</span><span class="p">,</span> <span class="mi">236</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">62</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">193</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">164</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">252</span><span class="p">,</span> <span class="mi">166</span><span class="p">,</span> <span class="mi">221</span><span class="p">,</span> <span class="mi">208</span><span class="p">,</span> <span class="mi">176</span><span class="p">,</span> <span class="mi">235</span><span class="p">,</span> <span class="mi">149</span><span class="p">,</span> <span class="mi">109</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">103</span><span class="p">,</span> <span class="mi">223</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">140</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">218</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">153</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">228</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">240</span><span class="p">,</span> <span class="mi">248</span><span class="p">,</span> <span class="mi">246</span><span class="p">,</span> <span class="mi">110</span><span class="p">,</span> <span class="mi">156</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">227</span><span class="p">,</span> <span class="mi">207</span><span class="p">,</span> <span class="mi">254</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">174</span><span class="p">,</span> <span class="mi">79</span><span class="p">,</span> <span class="mi">128</span><span class="p">,</span> <span class="mi">155</span><span class="p">,</span> <span class="mi">251</span><span class="p">,</span> <span class="mi">242</span><span class="p">,</span> <span class="mi">177</span><span class="p">,</span> <span class="mi">135</span><span class="p">,</span> <span class="mi">230</span><span class="p">,</span> <span class="mi">154</span><span class="p">,</span> <span class="mi">179</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">189</span><span class="p">,</span> <span class="mi">143</span><span class="p">,</span> <span class="mi">130</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">107</span><span class="p">,</span> <span class="mi">211</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">105</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">134</span><span class="p">,</span> <span class="mi">124</span><span class="p">,</span> <span class="mi">125</span><span class="p">,</span> <span class="mi">245</span><span class="p">,</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">204</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">131</span><span class="p">,</span> <span class="mi">117</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">114</span><span class="p">,</span> <span class="mi">213</span><span class="p">,</span> <span class="mi">212</span><span class="p">,</span> <span class="mi">102</span><span class="p">,</span> <span class="mi">195</span><span class="p">,</span> <span class="mi">101</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">217</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">198</span><span class="p">,</span> <span class="mi">249</span><span class="p">,</span> <span class="mi">192</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">94</span><span class="p">,</span> <span class="mi">181</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">185</span><span class="p">,</span> <span class="mi">172</span><span class="p">,</span> <span class="mi">165</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">202</span><span class="p">,</span> <span class="mi">106</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">175</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">162</span><span class="p">,</span> <span class="mi">158</span><span class="p">,</span> <span class="mi">119</span><span class="p">,</span> <span class="mi">139</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">108</span><span class="p">,</span> <span class="mi">190</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">159</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">113</span><span class="p">,</span> <span class="mi">214</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="mi">199</span><span class="p">,</span> <span class="mi">167</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">239</span><span class="p">,</span> <span class="mi">84</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">132</span><span class="p">,</span> <span class="mi">98</span><span class="p">]</span>
<span class="n">pbox</span> <span class="o">=</span> <span class="p">[</span><span class="mi">39</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">62</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">25</span><span class="p">]</span>


<span class="k">def</span> <span class="nf">pad</span><span class="p">(</span><span class="n">block</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">block</span> <span class="o">+</span> <span class="nb">chr</span><span class="p">(</span><span class="n">BLOCK_SIZE</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">block</span><span class="p">)).</span><span class="n">encode</span><span class="p">()</span> <span class="o">*</span> <span class="p">(</span><span class="n">BLOCK_SIZE</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">block</span><span class="p">))</span>


<span class="k">def</span> <span class="nf">to_blocks</span><span class="p">(</span><span class="n">in_bytes</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">:</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">in_bytes</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="n">BLOCK_SIZE</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">in_bytes</span><span class="p">),</span> <span class="n">BLOCK_SIZE</span><span class="p">)]</span>


<span class="k">def</span> <span class="nf">enc_sub</span><span class="p">(</span><span class="n">in_bytes</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="k">return</span> <span class="nb">bytes</span><span class="p">([</span><span class="n">sbox</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">in_bytes</span><span class="p">])</span>


<span class="k">def</span> <span class="nf">enc_perm</span><span class="p">(</span><span class="n">in_bytes</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="n">num</span> <span class="o">=</span> <span class="nb">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">in_bytes</span><span class="p">,</span> <span class="s">'big'</span><span class="p">)</span>
    <span class="n">binary</span> <span class="o">=</span> <span class="nb">bin</span><span class="p">(</span><span class="n">num</span><span class="p">)[</span><span class="mi">2</span><span class="p">:].</span><span class="n">rjust</span><span class="p">(</span><span class="n">BLOCK_SIZE</span> <span class="o">*</span> <span class="mi">8</span><span class="p">,</span> <span class="s">'0'</span><span class="p">)</span>
    <span class="n">permuted</span> <span class="o">=</span> <span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="n">binary</span><span class="p">[</span><span class="n">pbox</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">BLOCK_SIZE</span> <span class="o">*</span> <span class="mi">8</span><span class="p">)])</span>
    <span class="n">out</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">([</span><span class="nb">int</span><span class="p">(</span><span class="n">permuted</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="mi">8</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">BLOCK_SIZE</span> <span class="o">*</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">)])</span>
    <span class="k">return</span> <span class="n">out</span>


<span class="k">def</span> <span class="nf">expand_key</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">key_len</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="n">expanded</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">()</span>
    <span class="n">cur</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">byte</span> <span class="ow">in</span> <span class="n">key</span><span class="p">:</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="p">(</span><span class="n">cur</span> <span class="o">+</span> <span class="n">byte</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">((</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">expanded</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">cur</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="p">[</span><span class="n">key</span><span class="p">[</span><span class="n">i</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">key</span><span class="p">)]</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">key_len</span><span class="p">)]:</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">cur</span><span class="p">,</span> <span class="n">num</span><span class="p">,</span> <span class="mi">256</span><span class="p">)</span>
        <span class="n">expanded</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">cur</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">bytes</span><span class="p">(</span><span class="n">expanded</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">plain</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="n">blocks</span> <span class="o">=</span> <span class="n">to_blocks</span><span class="p">(</span><span class="n">plain</span><span class="p">)</span>
    <span class="n">out</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">()</span>
    <span class="n">key</span> <span class="o">=</span> <span class="n">expand_key</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">blocks</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">block</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">blocks</span><span class="p">):</span>
        <span class="n">block</span> <span class="o">=</span> <span class="n">pad</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
        <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">block</span><span class="p">)</span> <span class="o">==</span> <span class="n">BLOCK_SIZE</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">ROUNDS</span><span class="p">):</span>
            <span class="n">block</span> <span class="o">=</span> <span class="n">enc_sub</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
            <span class="n">block</span> <span class="o">=</span> <span class="n">enc_perm</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
            <span class="n">block</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">block</span><span class="p">)):</span>
                <span class="n">block</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^=</span> <span class="n">key</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
        <span class="n">out</span><span class="p">.</span><span class="n">extend</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">bytes</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"flag"</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">flag_file</span><span class="p">:</span>
        <span class="n">flag</span> <span class="o">=</span> <span class="n">flag_file</span><span class="p">.</span><span class="n">read</span><span class="p">()</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"key"</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">key_file</span><span class="p">:</span>
        <span class="n">key</span> <span class="o">=</span> <span class="n">key_file</span><span class="p">.</span><span class="n">read</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="n">b64encode</span><span class="p">(</span><span class="n">encrypt</span><span class="p">(</span><span class="n">flag</span><span class="p">,</span> <span class="n">key</span><span class="p">)).</span><span class="n">decode</span><span class="p">())</span>
</code></pre></div></div>

<p>This seems like a custom AES implementation. Note that we are not provided a decryption routine, so lets simply write one.<br />
Implementing one is not too complicated, one just need to reverse the <code class="language-plaintext highlighter-rouge">encrypt</code> function step by step.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">cipher</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span><span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="n">blocks</span> <span class="o">=</span> <span class="n">to_blocks</span><span class="p">(</span><span class="n">cipher</span><span class="p">)</span>
    <span class="n">out</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">()</span>
    <span class="n">key</span> <span class="o">=</span> <span class="n">expand_key</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">blocks</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">block</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">blocks</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">ROUNDS</span><span class="p">):</span>
            <span class="n">block</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">block</span><span class="p">)):</span>
                <span class="n">block</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^=</span> <span class="n">key</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
            <span class="n">block</span> <span class="o">=</span> <span class="n">dec_perm</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
            <span class="n">block</span> <span class="o">=</span> <span class="n">dec_sub</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
        <span class="n">out</span><span class="p">.</span><span class="n">extend</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">bytes</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</code></pre></div></div>
<p>Its essentially the encrypt function in reverse, in <code class="language-plaintext highlighter-rouge">encrypt</code>, key is xored at last in the for loop, we do it first.<br />
Then we do reverse of permutation <code class="language-plaintext highlighter-rouge">dec_perm</code> and reverse of substitution <code class="language-plaintext highlighter-rouge">dec_sub</code> in the following functions.</p>

<p>For reversing <code class="language-plaintext highlighter-rouge">enc_sub</code>, we just need to find the index of corresponding byte in the <code class="language-plaintext highlighter-rouge">sbox</code></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">enc_sub</span><span class="p">(</span><span class="n">in_bytes</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="k">return</span> <span class="nb">bytes</span><span class="p">([</span><span class="n">sbox</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">in_bytes</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">dec_sub</span><span class="p">(</span><span class="n">in_bytes</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="k">return</span> <span class="nb">bytes</span><span class="p">([</span><span class="n">sbox</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">in_bytes</span> <span class="p">])</span>
</code></pre></div></div>

<p>To reverse the permutation,</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">enc_perm</span><span class="p">(</span><span class="n">in_bytes</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="n">num</span> <span class="o">=</span> <span class="nb">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">in_bytes</span><span class="p">,</span> <span class="s">'big'</span><span class="p">)</span>
    <span class="n">binary</span> <span class="o">=</span> <span class="nb">bin</span><span class="p">(</span><span class="n">num</span><span class="p">)[</span><span class="mi">2</span><span class="p">:].</span><span class="n">rjust</span><span class="p">(</span><span class="n">BLOCK_SIZE</span> <span class="o">*</span> <span class="mi">8</span><span class="p">,</span> <span class="s">'0'</span><span class="p">)</span>
    <span class="n">permuted</span> <span class="o">=</span> <span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="n">binary</span><span class="p">[</span><span class="n">pbox</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">BLOCK_SIZE</span> <span class="o">*</span> <span class="mi">8</span><span class="p">)])</span>
    <span class="n">out</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">([</span><span class="nb">int</span><span class="p">(</span><span class="n">permuted</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="mi">8</span><span class="p">],</span> <span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">BLOCK_SIZE</span> <span class="o">*</span> <span class="mi">8</span><span class="p">,</span>
 <span class="mi">8</span><span class="p">)])</span>
    <span class="k">return</span> <span class="n">out</span>

<span class="k">def</span> <span class="nf">dec_perm</span><span class="p">(</span><span class="n">in_bytes</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="n">out</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
    <span class="n">permuted</span> <span class="o">=</span> <span class="nb">bin</span><span class="p">(</span><span class="nb">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">in_bytes</span><span class="p">,</span> <span class="s">'big'</span><span class="p">))[</span><span class="mi">2</span><span class="p">:].</span><span class="n">zfill</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span> <span class="c1">#just converting to binary
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">64</span><span class="p">):</span>
        <span class="n">out</span><span class="p">[</span><span class="n">pbox</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">permuted</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="c1"># should be ones and zeros but using ord as bytearrays are directly convertible to int
</span>    <span class="n">out_bytes</span> <span class="o">=</span> <span class="nb">int</span><span class="p">.</span><span class="n">to_bytes</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span><span class="mi">8</span><span class="p">,</span><span class="n">byteorder</span><span class="o">=</span><span class="s">'big'</span><span class="p">)</span> <span class="c1">#converting to bytes again
</span>    <span class="k">return</span> <span class="n">out_bytes</span>
</code></pre></div></div>

<p>Once we have decryption function set up, we can start exploring the challenge :)</p>

<p>The devil at work here is the <code class="language-plaintext highlighter-rouge">expand_key</code> function. One could easily verify that without using much brain  :)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">20</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">expand_key</span><span class="p">(</span><span class="nb">bytes</span><span class="p">([</span><span class="n">i</span><span class="p">]),</span><span class="mi">8</span><span class="p">))</span>
<span class="c1"># 8 since we know the flag is 8*BLOCK_LENGTH bytes
#b'\x00\x01\x01\x01\x01\x01\x01\x01\x01'
#b'\x01\x01\x01\x01\x01\x01\x01\x01\x01'
#b'\x02\x10\x00\x00\x00\x00\x00\x00\x00'
#b'\x03\xd9\xd1\xe1A\x81\x01\x01\x01'
#b'\x04\x00\x00\x00\x00\x00\x00\x00\x00'
#b'\x05\xf9\xf1a\xc1\x81\x01\x01\x01'
#b'\x06\x00\x00\x00\x00\x00\x00\x00\x00'
#b'\x07QaA\x81\x01\x01\x01\x01'
#b'\x08\x00\x00\x00\x00\x00\x00\x00\x00'
#b'\t\xd1\xa1A\x81\x01\x01\x01\x01'
#b'\n\x00\x00\x00\x00\x00\x00\x00\x00'
#b'\x0b\xe9\xb1!\xc1\x81\x01\x01\x01'
#b'\x0c\x00\x00\x00\x00\x00\x00\x00\x00'
#b'\r\t\x11\xa1A\x81\x01\x01\x01'
#b'\x0e\x00\x00\x00\x00\x00\x00\x00\x00'
#b'\x0f!\xc1\x81\x01\x01\x01\x01\x01'
#b'\x10\x00\x00\x00\x00\x00\x00\x00\x00'
#b'\x11!A\x81\x01\x01\x01\x01\x01'
#b'\x12\x00\x00\x00\x00\x00\x00\x00\x00'
#b'\x13y\x91aA\x81\x01\x01\x01'
</span></code></pre></div></div>
<p>Without even looking at the key_expansion, one could say the keys it expands to are quite bad and possibly quite repetitive.<br />
Voila, lets try randomly decrypting with a key.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">flag_enc</span> <span class="o">=</span> <span class="n">b64decode</span><span class="p">(</span><span class="sa">b</span><span class="s">'hQWYogqLXUO+rePyWkNlBlaAX47/2dCeLFMLrmPKcYRLYZgFuqRC7EtwX4DRtG31XY4az+yOvJJ/pwWR0/J9gg=='</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">decyrpt</span><span class="p">(</span><span class="n">flag_enc</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">decyrpt</span><span class="p">(</span><span class="n">flag_enc</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x01</span><span class="s">'</span><span class="p">))</span>
<span class="c1">#b'\xe2\xaa/\xb8}\xb2\xe1\x9d\xbe\xf0\xad\x1c\xe4)\xa77c3_is_4LW4YS_th3_4nsw3r(but_with_0ptimiz4ti0ns)}'
#b'\x15\xa84N\xff\x83\x00{\xbe\xf0\xad\x1c\xe4)\xa77c3_is_4LW4YS_th3_4nsw3r(but_with_0ptimiz4ti0ns)}'
</span></code></pre></div></div>
<p>One could aready read a lot of the flag! We only lack the first two blocks of the flag.<br />
Why can we read the rest of the flag by decrypting with some non-sense key?<br />
Since in <code class="language-plaintext highlighter-rouge">encrypt</code> function each block is xored with the key byte at the corresponding position, we luckily end up encrypting it with byte <code class="language-plaintext highlighter-rouge">b'\x01'</code> for the last 6 bytes.<br />
And xoring with <code class="language-plaintext highlighter-rouge">b'\x01'</code> would be the same byte again hehe.<br />
But wouldnt it be lost amidst all the permutation and substitution??<br />
No, since we are exactly reversing the permutation and substitution since the xor part dies out!</p>

<p>Why do we have so many 0’s and 1’s in the expanded key?<br />
It is evident from this part</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="p">[</span><span class="n">key</span><span class="p">[</span><span class="n">i</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">key</span><span class="p">)]</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">key_len</span><span class="p">)]:</span>
    <span class="n">cur</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">cur</span><span class="p">,</span> <span class="n">num</span><span class="p">,</span> <span class="mi">256</span><span class="p">)</span>
    <span class="n">expanded</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">cur</span><span class="p">)</span>
</code></pre></div></div>
<p>As <code class="language-plaintext highlighter-rouge">cur</code> is repeteadly raised to the power <code class="language-plaintext highlighter-rouge">num</code>, once <code class="language-plaintext highlighter-rouge">cur</code> hits 0 or 1, it will stay 0 or 1 out of its misery.<br />
So all we need to figure out is the first two bytes, which should be quite easy!</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">65536</span><span class="p">):</span>
    <span class="n">key</span> <span class="o">=</span> <span class="n">long_to_bytes</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="p">:</span><span class="o">=</span> <span class="n">decrypt</span><span class="p">(</span><span class="n">flag_enc</span><span class="p">,</span> <span class="n">key</span><span class="p">)).</span><span class="n">startswith</span><span class="p">(</span><span class="sa">b</span><span class="s">'rgbCTF'</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">key</span><span class="p">)</span>
</code></pre></div></div>
<p>Ugly solution in <a href="solve.py">solve.py</a></p>

<p>And boom! we have our flag</p>
<h3 id="rgbctfbrut3_f0rc3_is_4lw4ys_th3_4nsw3rbut_with_0ptimiz4ti0ns">rgbCTF{brut3_f0rc3_is_4LW4YS_th3_4nsw3r(but_with_0ptimiz4ti0ns)}</h3>]]></content><author><name>deuterium</name><email>farziemailid69@gmail.com</email></author><category term="rgbCTF" /><category term="2020" /><category term="cryptography" /><category term="AES" /><category term="substitution" /><category term="permutation" /><category term="bruteforce" /><summary type="html"><![CDATA[Aedquate Encryption Standard Description I wrote my own AES! Can you break it? hQWYogqLXUO+rePyWkNlBlaAX47/2dCeLFMLrmPKcYRLYZgFuqRC7EtwX4DRtG31XY4az+yOvJJ/pwWR0/J9gg== ~qpwoeirut#5057 Files adequate_encryption_standard.py from base64 import b64encode BLOCK_SIZE = 8 ROUNDS = 8 sbox = [111, 161, 71, 136, 68, 69, 31, 0, 145, 237, 169, 115, 16, 20, 22, 82, 138, 183, 232, 95, 244, 163, 64, 229, 224, 104, 231, 61, 121, 152, 97, 50, 74, 96, 247, 144, 194, 86, 186, 234, 99, 122, 46, 18, 215, 168, 173, 188, 41, 243, 219, 203, 141, 21, 171, 57, 116, 178, 233, 210, 184, 253, 151, 48, 206, 250, 133, 44, 59, 147, 137, 66, 52, 75, 187, 129, 225, 209, 191, 92, 238, 127, 241, 25, 160, 9, 170, 13, 157, 45, 205, 196, 28, 146, 142, 150, 17, 39, 24, 80, 118, 6, 32, 93, 11, 216, 220, 100, 85, 112, 222, 226, 126, 197, 180, 34, 182, 37, 148, 70, 78, 201, 236, 81, 62, 42, 193, 67, 8, 164, 43, 252, 166, 221, 208, 176, 235, 149, 109, 63, 103, 223, 65, 56, 140, 255, 218, 54, 153, 2, 228, 1, 240, 248, 246, 110, 156, 60, 227, 207, 254, 51, 174, 79, 128, 155, 251, 242, 177, 135, 230, 154, 179, 15, 189, 143, 130, 27, 107, 211, 30, 105, 19, 134, 124, 125, 245, 76, 204, 12, 26, 38, 40, 131, 117, 87, 114, 213, 212, 102, 195, 101, 55, 10, 47, 120, 200, 217, 88, 83, 36, 198, 249, 192, 23, 94, 181, 73, 185, 172, 165, 58, 53, 202, 106, 5, 7, 175, 89, 72, 90, 14, 162, 158, 119, 139, 77, 108, 190, 91, 29, 49, 159, 33, 113, 214, 4, 123, 199, 167, 35, 239, 84, 3, 132, 98] pbox = [39, 20, 18, 62, 4, 60, 19, 43, 33, 6, 51, 61, 40, 35, 47, 16, 23, 58, 31, 53, 28, 55, 54, 30, 17, 42, 34, 45, 49, 13, 46, 0, 26, 2, 8, 3, 11, 48, 63, 36, 37, 7, 32, 5, 27, 59, 29, 44, 14, 56, 21, 22, 12, 52, 57, 41, 10, 1, 24, 38, 50, 15, 9, 25] def pad(block): return block + chr(BLOCK_SIZE - len(block)).encode() * (BLOCK_SIZE - len(block)) def to_blocks(in_bytes: bytes) -&gt; list: return [in_bytes[i:i + BLOCK_SIZE] for i in range(0, len(in_bytes), BLOCK_SIZE)] def enc_sub(in_bytes: bytes) -&gt; bytes: return bytes([sbox[b] for b in in_bytes]) def enc_perm(in_bytes: bytes) -&gt; bytes: num = int.from_bytes(in_bytes, 'big') binary = bin(num)[2:].rjust(BLOCK_SIZE * 8, '0') permuted = ''.join([binary[pbox[i]] for i in range(BLOCK_SIZE * 8)]) out = bytes([int(permuted[i:i + 8], 2) for i in range(0, BLOCK_SIZE * 8, 8)]) return out def expand_key(key: bytes, key_len: int) -&gt; bytes: expanded = bytearray() cur = 0 for byte in key: cur = (cur + byte) &amp; ((1 &lt;&lt; 8) - 1) expanded.append(cur) for num in [key[i % len(key)] * 2 for i in range(key_len)]: cur = pow(cur, num, 256) expanded.append(cur) return bytes(expanded) def encrypt(plain: bytes, key: bytes) -&gt; bytes: blocks = to_blocks(plain) out = bytearray() key = expand_key(key, len(blocks)) for idx, block in enumerate(blocks): block = pad(block) assert len(block) == BLOCK_SIZE for _ in range(ROUNDS): block = enc_sub(block) block = enc_perm(block) block = bytearray(block) for i in range(len(block)): block[i] ^= key[idx] out.extend(block) return bytes(out) if __name__ == '__main__': with open("flag", 'rb') as flag_file: flag = flag_file.read() with open("key", 'rb') as key_file: key = key_file.read() print(b64encode(encrypt(flag, key)).decode()) This seems like a custom AES implementation. Note that we are not provided a decryption routine, so lets simply write one. Implementing one is not too complicated, one just need to reverse the encrypt function step by step. def decrypt(cipher: bytes, key:bytes) -&gt; bytes: blocks = to_blocks(cipher) out = bytearray() key = expand_key(key, len(blocks)) for idx, block in enumerate(blocks): for _ in range(ROUNDS): block = bytearray(block) for i in range(len(block)): block[i] ^= key[idx] block = dec_perm(block) block = dec_sub(block) out.extend(block) return bytes(out) Its essentially the encrypt function in reverse, in encrypt, key is xored at last in the for loop, we do it first. Then we do reverse of permutation dec_perm and reverse of substitution dec_sub in the following functions. For reversing enc_sub, we just need to find the index of corresponding byte in the sbox def enc_sub(in_bytes: bytes) -&gt; bytes: return bytes([sbox[b] for b in in_bytes]) def dec_sub(in_bytes: bytes) -&gt; bytes: return bytes([sbox.index(b) for b in in_bytes ]) To reverse the permutation, def enc_perm(in_bytes: bytes) -&gt; bytes: num = int.from_bytes(in_bytes, 'big') binary = bin(num)[2:].rjust(BLOCK_SIZE * 8, '0') permuted = ''.join([binary[pbox[i]] for i in range(BLOCK_SIZE * 8)]) out = bytes([int(permuted[i:i + 8], 2) for i in range(0, BLOCK_SIZE * 8, 8)]) return out def dec_perm(in_bytes: bytes) -&gt; bytes: out = bytearray(64) permuted = bin(int.from_bytes(in_bytes, 'big'))[2:].zfill(64) #just converting to binary for i in range(64): out[pbox[i]] = ord(permuted[i]) # should be ones and zeros but using ord as bytearrays are directly convertible to int out_bytes = int.to_bytes(int(out,2),8,byteorder='big') #converting to bytes again return out_bytes Once we have decryption function set up, we can start exploring the challenge :) The devil at work here is the expand_key function. One could easily verify that without using much brain :) for i in range(20): print(expand_key(bytes([i]),8)) # 8 since we know the flag is 8*BLOCK_LENGTH bytes #b'\x00\x01\x01\x01\x01\x01\x01\x01\x01' #b'\x01\x01\x01\x01\x01\x01\x01\x01\x01' #b'\x02\x10\x00\x00\x00\x00\x00\x00\x00' #b'\x03\xd9\xd1\xe1A\x81\x01\x01\x01' #b'\x04\x00\x00\x00\x00\x00\x00\x00\x00' #b'\x05\xf9\xf1a\xc1\x81\x01\x01\x01' #b'\x06\x00\x00\x00\x00\x00\x00\x00\x00' #b'\x07QaA\x81\x01\x01\x01\x01' #b'\x08\x00\x00\x00\x00\x00\x00\x00\x00' #b'\t\xd1\xa1A\x81\x01\x01\x01\x01' #b'\n\x00\x00\x00\x00\x00\x00\x00\x00' #b'\x0b\xe9\xb1!\xc1\x81\x01\x01\x01' #b'\x0c\x00\x00\x00\x00\x00\x00\x00\x00' #b'\r\t\x11\xa1A\x81\x01\x01\x01' #b'\x0e\x00\x00\x00\x00\x00\x00\x00\x00' #b'\x0f!\xc1\x81\x01\x01\x01\x01\x01' #b'\x10\x00\x00\x00\x00\x00\x00\x00\x00' #b'\x11!A\x81\x01\x01\x01\x01\x01' #b'\x12\x00\x00\x00\x00\x00\x00\x00\x00' #b'\x13y\x91aA\x81\x01\x01\x01' Without even looking at the key_expansion, one could say the keys it expands to are quite bad and possibly quite repetitive. Voila, lets try randomly decrypting with a key. flag_enc = b64decode(b'hQWYogqLXUO+rePyWkNlBlaAX47/2dCeLFMLrmPKcYRLYZgFuqRC7EtwX4DRtG31XY4az+yOvJJ/pwWR0/J9gg==') print(decyrpt(flag_enc, b'\x00')) print(decyrpt(flag_enc, b'\x01')) #b'\xe2\xaa/\xb8}\xb2\xe1\x9d\xbe\xf0\xad\x1c\xe4)\xa77c3_is_4LW4YS_th3_4nsw3r(but_with_0ptimiz4ti0ns)}' #b'\x15\xa84N\xff\x83\x00{\xbe\xf0\xad\x1c\xe4)\xa77c3_is_4LW4YS_th3_4nsw3r(but_with_0ptimiz4ti0ns)}' One could aready read a lot of the flag! We only lack the first two blocks of the flag. Why can we read the rest of the flag by decrypting with some non-sense key? Since in encrypt function each block is xored with the key byte at the corresponding position, we luckily end up encrypting it with byte b'\x01' for the last 6 bytes. And xoring with b'\x01' would be the same byte again hehe. But wouldnt it be lost amidst all the permutation and substitution?? No, since we are exactly reversing the permutation and substitution since the xor part dies out! Why do we have so many 0’s and 1’s in the expanded key? It is evident from this part for num in [key[i % len(key)] * 2 for i in range(key_len)]: cur = pow(cur, num, 256) expanded.append(cur) As cur is repeteadly raised to the power num, once cur hits 0 or 1, it will stay 0 or 1 out of its misery. So all we need to figure out is the first two bytes, which should be quite easy! for i in range(65536): key = long_to_bytes(i) if (a := decrypt(flag_enc, key)).startswith(b'rgbCTF'): print(a,key) Ugly solution in solve.py And boom! we have our flag rgbCTF{brut3_f0rc3_is_4LW4YS_th3_4nsw3r(but_with_0ptimiz4ti0ns)}]]></summary></entry><entry><title type="html">rgbCTF 2020 Crypto - N-AES</title><link href="https://deut-erium.github.io/WriteUps/WriteUps/2020/rgbctf/crypto/N-AES/2020-07-13-rgbCTF-2020-N-AES" rel="alternate" type="text/html" title="rgbCTF 2020 Crypto - N-AES" /><published>2020-07-13T00:00:00+05:30</published><updated>2020-07-13T00:00:00+05:30</updated><id>https://deut-erium.github.io/WriteUps/WriteUps/2020/rgbctf/crypto/N-AES/rgbCTF-2020-N-AES</id><content type="html" xml:base="https://deut-erium.github.io/WriteUps/WriteUps/2020/rgbctf/crypto/N-AES/2020-07-13-rgbCTF-2020-N-AES"><![CDATA[<h1 id="n-aes">N-AES</h1>

<h2 id="description">Description</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>What if I encrypt something with AES multiple times? nc challenge.rgbsec.xyz 34567


~qpwoeirut#5057
</code></pre></div></div>

<h2 id="files">Files</h2>
<ul>
  <li><a href="n_aes.py">n_aes.py</a></li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">binascii</span>
<span class="kn">from</span> <span class="nn">base64</span> <span class="kn">import</span> <span class="n">b64encode</span><span class="p">,</span> <span class="n">b64decode</span>
<span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.Padding</span> <span class="kn">import</span> <span class="n">pad</span><span class="p">,</span> <span class="n">unpad</span>
<span class="kn">from</span> <span class="nn">os</span> <span class="kn">import</span> <span class="n">urandom</span>
<span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">seed</span><span class="p">,</span> <span class="n">randint</span>

<span class="n">BLOCK_SIZE</span> <span class="o">=</span> <span class="mi">16</span>


<span class="k">def</span> <span class="nf">rand_block</span><span class="p">(</span><span class="n">key_seed</span><span class="o">=</span><span class="n">urandom</span><span class="p">(</span><span class="mi">1</span><span class="p">)):</span>
    <span class="n">seed</span><span class="p">(</span><span class="n">key_seed</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">bytes</span><span class="p">([</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">BLOCK_SIZE</span><span class="p">)])</span>


<span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">plaintext</span><span class="p">,</span> <span class="n">seed_bytes</span><span class="p">):</span>
    <span class="n">ciphertext</span> <span class="o">=</span> <span class="n">pad</span><span class="p">(</span><span class="n">b64decode</span><span class="p">(</span><span class="n">plaintext</span><span class="p">),</span> <span class="n">BLOCK_SIZE</span><span class="p">)</span>
    <span class="n">seed_bytes</span> <span class="o">=</span> <span class="n">b64decode</span><span class="p">(</span><span class="n">seed_bytes</span><span class="p">)</span>
    <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">seed_bytes</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">8</span>
    <span class="k">for</span> <span class="n">seed</span> <span class="ow">in</span> <span class="n">seed_bytes</span><span class="p">:</span>
        <span class="n">ciphertext</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">rand_block</span><span class="p">(</span><span class="n">seed</span><span class="p">),</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_ECB</span><span class="p">).</span><span class="n">encrypt</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">b64encode</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">,</span> <span class="n">seed_bytes</span><span class="p">):</span>
    <span class="n">plaintext</span> <span class="o">=</span> <span class="n">b64decode</span><span class="p">(</span><span class="n">ciphertext</span><span class="s">"rgbCTF 2020 Crypto - N-AES"</span>    <span class="n">seed_bytes</span> <span class="o">=</span> <span class="n">b64decode</span><span class="p">(</span><span class="n">seed_bytes</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">byte</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="n">seed_bytes</span><span class="p">):</span>
        <span class="n">plaintext</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">rand_block</span><span class="p">(</span><span class="n">byte</span><span class="p">),</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_ECB</span><span class="p">).</span><span class="n">decrypt</span><span class="p">(</span><span class="n">plaintext</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">b64encode</span><span class="p">(</span><span class="n">unpad</span><span class="p">(</span><span class="n">plaintext</span><span class="p">,</span> <span class="n">BLOCK_SIZE</span><span class="p">))</span>


<span class="k">def</span> <span class="nf">gen_chall</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">pad</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">BLOCK_SIZE</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">128</span><span class="p">):</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">rand_block</span><span class="p">(),</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_ECB</span><span class="p">).</span><span class="n">encrypt</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">b64encode</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">challenge</span> <span class="o">=</span> <span class="n">b64encode</span><span class="p">(</span><span class="n">urandom</span><span class="p">(</span><span class="mi">64</span><span class="p">))</span>
    <span class="k">print</span><span class="p">(</span><span class="n">gen_chall</span><span class="p">(</span><span class="n">challenge</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"[1] Encrypt"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"[2] Decrypt"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"[3] Solve challenge"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"[4] Give up"</span><span class="p">)</span>

        <span class="n">command</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"&gt; "</span><span class="p">)</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">command</span> <span class="o">==</span> <span class="s">'1'</span><span class="p">:</span>
                <span class="n">text</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter text to encrypt, in base64: "</span><span class="p">)</span>
                <span class="n">seed_bytes</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter key, in base64: "</span><span class="p">)</span>
                <span class="k">print</span><span class="p">(</span><span class="n">encrypt</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">seed_bytes</span><span class="p">))</span>
            <span class="k">elif</span> <span class="n">command</span> <span class="o">==</span> <span class="s">'2'</span><span class="p">:</span>
                <span class="n">text</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter text to decrypt, in base64: "</span><span class="p">)</span>
                <span class="n">seed_bytes</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter key, in base64: "</span><span class="p">)</span>
                <span class="k">print</span><span class="p">(</span><span class="n">decrypt</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">seed_bytes</span><span class="p">))</span>
            <span class="k">elif</span> <span class="n">command</span> <span class="o">==</span> <span class="s">'3'</span><span class="p">:</span>
                <span class="n">answer</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter the decrypted challenge, in base64: "</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">b64decode</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span> <span class="o">==</span> <span class="n">challenge</span><span class="p">:</span>
                    <span class="k">print</span><span class="p">(</span><span class="s">"Correct!"</span><span class="p">)</span>
                    <span class="k">print</span><span class="p">(</span><span class="s">"Here's your flag:"</span><span class="p">)</span>
                    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"flag"</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                        <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">read</span><span class="p">())</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">print</span><span class="p">(</span><span class="s">"Incorrect!"</span><span class="p">)</span>
                <span class="k">break</span>
            <span class="k">elif</span> <span class="n">command</span> <span class="o">==</span> <span class="s">'4'</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="s">"Invalid command!"</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">binascii</span><span class="p">.</span><span class="n">Error</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"Base64 error!"</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"Error!"</span><span class="p">)</span>

    <span class="k">print</span><span class="p">(</span><span class="s">"Bye!"</span><span class="p">)</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</code></pre></div></div>

<p>On netcatting, we get get a base64 encoded encryption of a base64 encoded random string of 64 bytes.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">challenge</span> <span class="o">=</span> <span class="n">b64encode</span><span class="p">(</span><span class="n">urandom</span><span class="p">(</span><span class="mi">64</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">gen_chall</span><span class="p">(</span><span class="n">challenge</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
</code></pre></div></div>

<p>Taking a look at <code class="language-plaintext highlighter-rouge">gen_chall</code></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">gen_chall</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">pad</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">BLOCK_SIZE</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">128</span><span class="p">):</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">rand_block</span><span class="p">(),</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_ECB</span><span class="p">).</span><span class="n">encrypt</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">b64encode</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</code></pre></div></div>
<p>And</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">rand_block</span><span class="p">(</span><span class="n">key_seed</span><span class="o">=</span><span class="n">urandom</span><span class="p">(</span><span class="mi">1</span><span class="p">)):</span>
    <span class="n">seed</span><span class="p">(</span><span class="n">key_seed</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">bytes</span><span class="p">([</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">BLOCK_SIZE</span><span class="p">)])</span>
</code></pre></div></div>
<p>This seems quite tricky, since <code class="language-plaintext highlighter-rouge">rand_block</code> will be presenting some random key and <code class="language-plaintext highlighter-rouge">gen_chall</code> is encrypting with some random key 128 times! right?<br />
<strong>WRONG</strong>, There are some few caveats which we might exploit ;)</p>
<ul>
  <li>Since no <code class="language-plaintext highlighter-rouge">key_seed</code> is specified in the <code class="language-plaintext highlighter-rouge">gen_chall</code> call to <code class="language-plaintext highlighter-rouge">rand_block</code>, it should be taking <code class="language-plaintext highlighter-rouge">key_seed</code> to be <code class="language-plaintext highlighter-rouge">urandom(1)</code> which is simply one byte :)</li>
  <li>More importantly, once it gets called, <code class="language-plaintext highlighter-rouge">key_seed</code> is fixed! So all the random blocks would essentially be the same! One may test it out.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">os</span> <span class="kn">import</span> <span class="n">urandom</span>
<span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">seed</span><span class="p">,</span> <span class="n">randint</span>

<span class="n">BLOCK_SIZE</span> <span class="o">=</span> <span class="mi">16</span>


<span class="k">def</span> <span class="nf">rand_block</span><span class="p">(</span><span class="n">key_seed</span><span class="o">=</span><span class="n">urandom</span><span class="p">(</span><span class="mi">1</span><span class="p">)):</span>
    <span class="n">seed</span><span class="p">(</span><span class="n">key_seed</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">bytes</span><span class="p">([</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">BLOCK_SIZE</span><span class="p">)])</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">rand_block</span><span class="p">())</span>

<span class="c1">#b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w'
#b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w'
#b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w'
#b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w'
#b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w'
#b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w'
#b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w'
#b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w'
#b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w'
#b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w'
</span></code></pre></div></div>

<p>So all that needs to be done is find out that random byte with which seed was initialised, and we will know the key, just decrypt our way out of the flag.</p>

<h2 id="solution">Solution</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="n">remote</span>
<span class="kn">from</span> <span class="nn">base64</span> <span class="kn">import</span> <span class="n">b64encode</span><span class="p">,</span> <span class="n">b64decode</span>
<span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.Padding</span> <span class="kn">import</span> <span class="n">pad</span><span class="p">,</span> <span class="n">unpad</span>
<span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">seed</span><span class="p">,</span> <span class="n">randint</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span> <span class="o">=</span> <span class="s">"challenge.rgbsec.xyz"</span><span class="p">,</span> <span class="mi">34567</span>
<span class="n">REM</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>

<span class="n">CHALL</span> <span class="o">=</span> <span class="n">b64decode</span><span class="p">(</span><span class="n">REM</span><span class="p">.</span><span class="n">recvline</span><span class="p">().</span><span class="n">strip</span><span class="p">())</span>
<span class="k">def</span> <span class="nf">rand_block</span><span class="p">(</span><span class="n">byte</span><span class="p">):</span>
    <span class="s">"""random block for given seed byte"""</span>
    <span class="n">seed</span><span class="p">(</span><span class="n">byte</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">bytes</span><span class="p">([</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span> <span class="p">])</span>

<span class="n">REM</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">'</span><span class="se">\n</span><span class="s">&gt;'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">dec_serv</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">,</span> <span class="n">seed_bytes</span><span class="p">):</span>
    <span class="s">"""Requests decryption from the server"""</span>
    <span class="n">REM</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">'2'</span><span class="p">)</span>
    <span class="n">REM</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">b64encode</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">))</span>
    <span class="n">REM</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">b64encode</span><span class="p">(</span><span class="n">seed_bytes</span><span class="p">))</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">REM</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">'</span><span class="se">\n</span><span class="s">&gt;'</span><span class="p">)</span>
    <span class="k">if</span> <span class="sa">b</span><span class="s">'Error'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
        <span class="n">decd</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="sa">b</span><span class="s">'b</span><span class="se">\'</span><span class="s">([a-zA-Z0-9\+/]+)</span><span class="se">\'</span><span class="s">'</span><span class="p">,</span><span class="n">data</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">b64decode</span><span class="p">(</span><span class="n">decd</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
    <span class="n">decryption</span> <span class="o">=</span> <span class="n">dec_serv</span><span class="p">(</span><span class="n">CHALL</span><span class="p">,</span> <span class="nb">bytes</span><span class="p">([</span><span class="n">i</span><span class="p">]</span><span class="o">*</span><span class="mi">128</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">decryption</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">decryption</span><span class="p">)</span>
        <span class="k">break</span>

<span class="n">REM</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">'3'</span><span class="p">)</span>
<span class="n">REM</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">b64encode</span><span class="p">(</span><span class="n">decrypt</span><span class="p">(</span><span class="n">CHALL</span><span class="p">)))</span>
<span class="k">print</span><span class="p">(</span><span class="n">REM</span><span class="p">.</span><span class="n">recvregex</span><span class="p">(</span><span class="sa">b</span><span class="s">'rgbCTF{.*}'</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="wait-that-wont-work"><strong>WAIT! THAT WONT WORK!!</strong></h3>
<p>Tbh, I expected that to work but it didnt! Why?<br />
Because server uses this decryption routine</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">,</span> <span class="n">seed_bytes</span><span class="p">):</span>
    <span class="n">plaintext</span> <span class="o">=</span> <span class="n">b64decode</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">)</span>
    <span class="n">seed_bytes</span> <span class="o">=</span> <span class="n">b64decode</span><span class="p">(</span><span class="n">seed_bytes</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">byte</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="n">seed_bytes</span><span class="p">):</span>
        <span class="n">plaintext</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">rand_block</span><span class="p">(</span><span class="n">byte</span><span class="p">),</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_ECB</span><span class="p">).</span><span class="n">decrypt</span><span class="p">(</span><span class="n">plaintext</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">b64encode</span><span class="p">(</span><span class="n">unpad</span><span class="p">(</span><span class="n">plaintext</span><span class="p">,</span> <span class="n">BLOCK_SIZE</span><span class="p">))</span>
</code></pre></div></div>
<p>Still cant spot it out?<br />
All the devil is in <code class="language-plaintext highlighter-rouge">rand_block(byte)</code>. How? Because when byte objects are iterated upon, all the individual bytes are returned as int.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="sa">b</span><span class="s">'a'</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="nb">type</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>

<span class="c1">#97 &lt;class 'int'&gt;
</span></code></pre></div></div>
<p>Hmm, very interesting. But how does that make a difference?<br />
Because <code class="language-plaintext highlighter-rouge">rand_block(i)</code> and <code class="language-plaintext highlighter-rouge">rand_block(byte([i])</code> are completly different for an int <code class="language-plaintext highlighter-rouge">i</code>! Why?<br />
Because internally <code class="language-plaintext highlighter-rouge">seed(key_seed)</code> is used to initialize, and <code class="language-plaintext highlighter-rouge">seed(byte([i]))</code> and <code class="language-plaintext highlighter-rouge">seed(i)</code> are different! WTF!!</p>

<p>This implies the server would <del>not</del> never be able to decrypt using its own decryption routine!</p>

<p>To fix this, all we need to do is to write our own!<br />
We know the decryption is correct just by looking at correct padding, since len(b64encode(64 random bytes)) = 64*4/3 = 85 and we have a ciphertext of len 96.</p>
<blockquote>
  <p>1 in AES initialization suggests <code class="language-plaintext highlighter-rouge">AES.MODE_ECB</code></p>
  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">ct</span><span class="p">):</span>
    <span class="n">ct_orig</span> <span class="o">=</span> <span class="n">ct</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
        <span class="n">ct</span> <span class="o">=</span> <span class="n">ct_orig</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">128</span><span class="p">):</span>
            <span class="n">ct</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">rand_block</span><span class="p">(</span><span class="nb">bytes</span><span class="p">([</span><span class="n">i</span><span class="p">])),</span><span class="mi">1</span><span class="p">).</span><span class="n">decrypt</span><span class="p">(</span><span class="n">ct</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">unpad</span><span class="p">(</span><span class="n">ct</span><span class="p">,</span><span class="mi">16</span><span class="p">)</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="k">continue</span>
</code></pre></div>  </div>
</blockquote>

<p>Putting the final script in <a href="solve.py">solve.py</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="n">remote</span>
<span class="kn">from</span> <span class="nn">base64</span> <span class="kn">import</span> <span class="n">b64encode</span><span class="p">,</span> <span class="n">b64decode</span>
<span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.Padding</span> <span class="kn">import</span> <span class="n">pad</span><span class="p">,</span> <span class="n">unpad</span>
<span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">seed</span><span class="p">,</span> <span class="n">randint</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span> <span class="o">=</span> <span class="s">"challenge.rgbsec.xyz"</span><span class="p">,</span> <span class="mi">34567</span>
<span class="n">REM</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>

<span class="n">CHALL</span> <span class="o">=</span> <span class="n">b64decode</span><span class="p">(</span><span class="n">REM</span><span class="p">.</span><span class="n">recvline</span><span class="p">().</span><span class="n">strip</span><span class="p">())</span>
<span class="k">def</span> <span class="nf">rand_block</span><span class="p">(</span><span class="n">byte</span><span class="p">):</span>
    <span class="s">"""random block for given seed byte"""</span>
    <span class="n">seed</span><span class="p">(</span><span class="n">byte</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">bytes</span><span class="p">([</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span> <span class="p">])</span>

<span class="n">REM</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">'</span><span class="se">\n</span><span class="s">&gt;'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">ct</span><span class="p">):</span>
    <span class="n">ct_orig</span> <span class="o">=</span> <span class="n">ct</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">256</span><span class="p">):</span>
        <span class="n">ct</span> <span class="o">=</span> <span class="n">ct_orig</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">128</span><span class="p">):</span>
            <span class="n">ct</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">rand_block</span><span class="p">(</span><span class="nb">bytes</span><span class="p">([</span><span class="n">i</span><span class="p">])),</span><span class="mi">1</span><span class="p">).</span><span class="n">decrypt</span><span class="p">(</span><span class="n">ct</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">unpad</span><span class="p">(</span><span class="n">ct</span><span class="p">,</span><span class="mi">16</span><span class="p">)</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="k">continue</span>

<span class="n">REM</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">'3'</span><span class="p">)</span>
<span class="n">REM</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">b64encode</span><span class="p">(</span><span class="n">decrypt</span><span class="p">(</span><span class="n">CHALL</span><span class="p">)))</span>
<span class="k">print</span><span class="p">(</span><span class="n">REM</span><span class="p">.</span><span class="n">recvregex</span><span class="p">(</span><span class="sa">b</span><span class="s">'rgbCTF{.*}'</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="rgbctfi_d0nt_7hink_7his_d03s_wh47_y0u_7hink_i7_d03s">rgbCTF{i_d0nt_7hink_7his_d03s_wh47_y0u_7hink_i7_d03s}</h3>]]></content><author><name>deuterium</name><email>farziemailid69@gmail.com</email></author><category term="rgbCTF" /><category term="2020" /><category term="cryptography" /><category term="AES" /><category term="netcat" /><category term="python_bytes" /><summary type="html"><![CDATA[N-AES Description What if I encrypt something with AES multiple times? nc challenge.rgbsec.xyz 34567 ~qpwoeirut#5057 Files n_aes.py import binascii from base64 import b64encode, b64decode from Crypto.Cipher import AES from Crypto.Util.Padding import pad, unpad from os import urandom from random import seed, randint BLOCK_SIZE = 16 def rand_block(key_seed=urandom(1)): seed(key_seed) return bytes([randint(0, 255) for _ in range(BLOCK_SIZE)]) def encrypt(plaintext, seed_bytes): ciphertext = pad(b64decode(plaintext), BLOCK_SIZE) seed_bytes = b64decode(seed_bytes) assert len(seed_bytes) &gt;= 8 for seed in seed_bytes: ciphertext = AES.new(rand_block(seed), AES.MODE_ECB).encrypt(ciphertext) return b64encode(ciphertext) def decrypt(ciphertext, seed_bytes): plaintext = b64decode(ciphertext"rgbCTF 2020 Crypto - N-AES" seed_bytes = b64decode(seed_bytes) for byte in reversed(seed_bytes): plaintext = AES.new(rand_block(byte), AES.MODE_ECB).decrypt(plaintext) return b64encode(unpad(plaintext, BLOCK_SIZE)) def gen_chall(text): text = pad(text, BLOCK_SIZE) for i in range(128): text = AES.new(rand_block(), AES.MODE_ECB).encrypt(text) return b64encode(text) def main(): challenge = b64encode(urandom(64)) print(gen_chall(challenge).decode()) while True: print("[1] Encrypt") print("[2] Decrypt") print("[3] Solve challenge") print("[4] Give up") command = input("&gt; ") try: if command == '1': text = input("Enter text to encrypt, in base64: ") seed_bytes = input("Enter key, in base64: ") print(encrypt(text, seed_bytes)) elif command == '2': text = input("Enter text to decrypt, in base64: ") seed_bytes = input("Enter key, in base64: ") print(decrypt(text, seed_bytes)) elif command == '3': answer = input("Enter the decrypted challenge, in base64: ") if b64decode(answer) == challenge: print("Correct!") print("Here's your flag:") with open("flag", 'r') as f: print(f.read()) else: print("Incorrect!") break elif command == '4': break else: print("Invalid command!") except binascii.Error: print("Base64 error!") except Exception: print("Error!") print("Bye!") if __name__ == '__main__': main() On netcatting, we get get a base64 encoded encryption of a base64 encoded random string of 64 bytes. challenge = b64encode(urandom(64)) print(gen_chall(challenge).decode()) Taking a look at gen_chall def gen_chall(text): text = pad(text, BLOCK_SIZE) for i in range(128): text = AES.new(rand_block(), AES.MODE_ECB).encrypt(text) return b64encode(text) And def rand_block(key_seed=urandom(1)): seed(key_seed) return bytes([randint(0, 255) for _ in range(BLOCK_SIZE)]) This seems quite tricky, since rand_block will be presenting some random key and gen_chall is encrypting with some random key 128 times! right? WRONG, There are some few caveats which we might exploit ;) Since no key_seed is specified in the gen_chall call to rand_block, it should be taking key_seed to be urandom(1) which is simply one byte :) More importantly, once it gets called, key_seed is fixed! So all the random blocks would essentially be the same! One may test it out. from os import urandom from random import seed, randint BLOCK_SIZE = 16 def rand_block(key_seed=urandom(1)): seed(key_seed) return bytes([randint(0, 255) for _ in range(BLOCK_SIZE)]) for i in range(10): print(rand_block()) #b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w' #b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w' #b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w' #b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w' #b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w' #b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w' #b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w' #b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w' #b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w' #b'h\xf5\x81o*\xce\x97\x90^9O\x96T9~w' So all that needs to be done is find out that random byte with which seed was initialised, and we will know the key, just decrypt our way out of the flag. Solution from pwn import remote from base64 import b64encode, b64decode from Crypto.Cipher import AES from Crypto.Util.Padding import pad, unpad from random import seed, randint import re HOST, PORT = "challenge.rgbsec.xyz", 34567 REM = remote(HOST, PORT) CHALL = b64decode(REM.recvline().strip()) def rand_block(byte): """random block for given seed byte""" seed(byte) return bytes([randint(0,255) for _ in range(16) ]) REM.recvuntil(b'\n&gt;') def dec_serv(ciphertext, seed_bytes): """Requests decryption from the server""" REM.sendline(b'2') REM.sendline(b64encode(ciphertext)) REM.sendline(b64encode(seed_bytes)) data = REM.recvuntil(b'\n&gt;') if b'Error' not in data: decd = re.search(b'b\'([a-zA-Z0-9\+/]+)\'',data)[1] return b64decode(decd) for i in range(256): decryption = dec_serv(CHALL, bytes([i]*128)) if decryption: print(decryption) break REM.sendline(b'3') REM.sendline(b64encode(decrypt(CHALL))) print(REM.recvregex(b'rgbCTF{.*}').decode()) WAIT! THAT WONT WORK!! Tbh, I expected that to work but it didnt! Why? Because server uses this decryption routine def decrypt(ciphertext, seed_bytes): plaintext = b64decode(ciphertext) seed_bytes = b64decode(seed_bytes) for byte in reversed(seed_bytes): plaintext = AES.new(rand_block(byte), AES.MODE_ECB).decrypt(plaintext) return b64encode(unpad(plaintext, BLOCK_SIZE)) Still cant spot it out? All the devil is in rand_block(byte). How? Because when byte objects are iterated upon, all the individual bytes are returned as int. for i in b'a': print(i,type(i)) #97 &lt;class 'int'&gt; Hmm, very interesting. But how does that make a difference? Because rand_block(i) and rand_block(byte([i]) are completly different for an int i! Why? Because internally seed(key_seed) is used to initialize, and seed(byte([i])) and seed(i) are different! WTF!! This implies the server would not never be able to decrypt using its own decryption routine! To fix this, all we need to do is to write our own! We know the decryption is correct just by looking at correct padding, since len(b64encode(64 random bytes)) = 64*4/3 = 85 and we have a ciphertext of len 96. 1 in AES initialization suggests AES.MODE_ECB def decrypt(ct): ct_orig = ct for i in range(256): ct = ct_orig for _ in range(128): ct = AES.new(rand_block(bytes([i])),1).decrypt(ct) try: return unpad(ct,16) except: continue Putting the final script in solve.py from pwn import remote from base64 import b64encode, b64decode from Crypto.Cipher import AES from Crypto.Util.Padding import pad, unpad from random import seed, randint import re HOST, PORT = "challenge.rgbsec.xyz", 34567 REM = remote(HOST, PORT) CHALL = b64decode(REM.recvline().strip()) def rand_block(byte): """random block for given seed byte""" seed(byte) return bytes([randint(0,255) for _ in range(16) ]) REM.recvuntil(b'\n&gt;') def decrypt(ct): ct_orig = ct for i in range(256): ct = ct_orig for _ in range(128): ct = AES.new(rand_block(bytes([i])),1).decrypt(ct) try: return unpad(ct,16) except: continue REM.sendline(b'3') REM.sendline(b64encode(decrypt(CHALL))) print(REM.recvregex(b'rgbCTF{.*}').decode()) rgbCTF{i_d0nt_7hink_7his_d03s_wh47_y0u_7hink_i7_d03s}]]></summary></entry><entry><title type="html">0CTF/TCTF 2020 Crypto - babyring</title><link href="https://deut-erium.github.io/WriteUps/WriteUps/2020/tctf/crypto/babyring/2020-06-30-TCTF-2020-Quals-babyring" rel="alternate" type="text/html" title="0CTF/TCTF 2020 Crypto - babyring" /><published>2020-06-30T00:00:00+05:30</published><updated>2020-06-30T00:00:00+05:30</updated><id>https://deut-erium.github.io/WriteUps/WriteUps/2020/tctf/crypto/babyring/TCTF-2020-Quals-babyring</id><content type="html" xml:base="https://deut-erium.github.io/WriteUps/WriteUps/2020/tctf/crypto/babyring/2020-06-30-TCTF-2020-Quals-babyring"><![CDATA[<h1 id="babyring">Babyring</h1>

<h2 id="description">Description</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc pwnable.org 10001
</code></pre></div></div>
<h2 id="files">Files</h2>
<ul>
  <li><a href="ring_1f0f741fcfdfc52519d7b09b78c97b43.tar.gz">ring.tar.gz</a>
    <ul>
      <li><a href="release/task.py">release/task.py</a></li>
    </ul>
  </li>
</ul>

<p>task.py reads (trimming most part)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/python2
</span><span class="kn">import</span> <span class="nn">os</span><span class="p">,</span><span class="n">random</span><span class="p">,</span><span class="n">sys</span><span class="p">,</span><span class="n">string</span>
<span class="kn">from</span> <span class="nn">hashlib</span> <span class="kn">import</span> <span class="n">sha256</span>
<span class="kn">from</span> <span class="nn">struct</span> <span class="kn">import</span> <span class="n">pack</span><span class="p">,</span> <span class="n">unpack</span>
<span class="kn">import</span> <span class="nn">SocketServer</span>
<span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">ARC4</span>

<span class="kn">from</span> <span class="nn">flag</span> <span class="kn">import</span> <span class="n">flag</span>

<span class="n">K</span> <span class="o">=</span> <span class="mi">64</span>

<span class="k">def</span> <span class="nf">gen</span><span class="p">():</span>
    <span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">getStrongPrime</span>
    <span class="n">e</span> <span class="o">=</span> <span class="mi">65537</span>
    <span class="n">Ns</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">K</span><span class="p">):</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">getStrongPrime</span><span class="p">(</span><span class="mi">2048</span><span class="p">)</span>
        <span class="n">q</span> <span class="o">=</span> <span class="n">getStrongPrime</span><span class="p">(</span><span class="mi">2048</span><span class="p">)</span>
        <span class="n">Ns</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="n">q</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">e</span><span class="p">,</span><span class="n">Ns</span>

<span class="n">e</span><span class="p">,</span><span class="n">Ns</span> <span class="o">=</span> <span class="mi">65537</span><span class="p">,</span><span class="c1">#list trimmed[...]
</span><span class="k">class</span> <span class="nc">Task</span><span class="p">(</span><span class="n">SocketServer</span><span class="p">.</span><span class="n">BaseRequestHandler</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">proof_of_work</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">proof</span> <span class="o">=</span> <span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="n">string</span><span class="p">.</span><span class="n">ascii_letters</span><span class="o">+</span><span class="n">string</span><span class="p">.</span><span class="n">digits</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">20</span><span class="p">)])</span>
        <span class="n">digest</span> <span class="o">=</span> <span class="n">sha256</span><span class="p">(</span><span class="n">proof</span><span class="p">).</span><span class="n">hexdigest</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="s">"sha256(XXXX+%s) == %s</span><span class="se">\n</span><span class="s">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">proof</span><span class="p">[</span><span class="mi">4</span><span class="p">:],</span><span class="n">digest</span><span class="p">))</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="s">'Give me XXXX:'</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">strip</span><span class="p">()</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">4</span> <span class="ow">or</span> <span class="n">sha256</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="n">proof</span><span class="p">[</span><span class="mi">4</span><span class="p">:]).</span><span class="n">hexdigest</span><span class="p">()</span> <span class="o">!=</span> <span class="n">digest</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="bp">True</span>

    <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">proof_of_work</span><span class="p">():</span>
            <span class="k">return</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">settimeout</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">sendall</span><span class="p">(</span><span class="s">"message: "</span><span class="p">)</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="mh">0x40</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
            <span class="n">ys</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">K</span><span class="p">):</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">sendall</span><span class="p">(</span><span class="s">"x%d: "</span> <span class="o">%</span> <span class="n">i</span><span class="p">)</span>
                <span class="n">x</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="mh">0x40</span><span class="p">).</span><span class="n">strip</span><span class="p">())</span>
                <span class="n">ys</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">e</span><span class="p">,</span><span class="n">Ns</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">sendall</span><span class="p">(</span><span class="s">"v: "</span><span class="p">)</span>
            <span class="n">v</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">recv</span><span class="p">(</span><span class="mh">0x40</span><span class="p">).</span><span class="n">strip</span><span class="p">())</span>

            <span class="n">key</span> <span class="o">=</span> <span class="n">sha256</span><span class="p">(</span><span class="n">msg</span><span class="p">).</span><span class="n">digest</span><span class="p">()[:</span><span class="mi">16</span><span class="p">]</span>
            <span class="n">E</span> <span class="o">=</span> <span class="n">ARC4</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">v</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">K</span><span class="p">):</span>
                <span class="n">pt</span> <span class="o">=</span> <span class="p">(</span><span class="n">ys</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">^</span><span class="n">cur</span><span class="p">)</span><span class="o">%</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">64</span><span class="p">)</span>
                <span class="n">ct</span> <span class="o">=</span> <span class="n">unpack</span><span class="p">(</span><span class="s">'Q'</span><span class="p">,</span> <span class="n">E</span><span class="p">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">pack</span><span class="p">(</span><span class="s">'Q'</span><span class="p">,</span><span class="n">pt</span><span class="p">)))[</span><span class="mi">0</span><span class="p">]</span>
                <span class="n">cur</span> <span class="o">=</span> <span class="n">ct</span>

            <span class="k">if</span> <span class="n">cur</span> <span class="o">==</span> <span class="n">v</span><span class="p">:</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">sendall</span><span class="p">(</span><span class="s">"%s</span><span class="se">\n</span><span class="s">"</span> <span class="o">%</span> <span class="n">flag</span><span class="p">)</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">sendall</span><span class="p">(</span><span class="s">"fin</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>


<span class="k">class</span> <span class="nc">ThreadedServer</span><span class="p">(</span><span class="n">SocketServer</span><span class="p">.</span><span class="n">ThreadingMixIn</span><span class="p">,</span> <span class="n">SocketServer</span><span class="p">.</span><span class="n">TCPServer</span><span class="p">):</span>
    <span class="k">pass</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span> <span class="o">=</span> <span class="s">'0.0.0.0'</span><span class="p">,</span> <span class="mi">10001</span>
    <span class="n">server</span> <span class="o">=</span> <span class="n">ThreadedServer</span><span class="p">((</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">),</span> <span class="n">Task</span><span class="p">)</span>
    <span class="n">server</span><span class="p">.</span><span class="n">allow_reuse_address</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">server</span><span class="p">.</span><span class="n">serve_forever</span><span class="p">()</span>
</code></pre></div></div>
<p>The first part is obviously proof of work, in which we have to find 4 bytes <code class="language-plaintext highlighter-rouge">XXXX</code> such that
<code class="language-plaintext highlighter-rouge">sha256(XXXX + 16-char-val) = sha256_hash</code> for provided <code class="language-plaintext highlighter-rouge">16-char-val</code> postfix and <code class="language-plaintext highlighter-rouge">sha256_hash</code><br />
Which is easy to solve</p>
<blockquote>
  <p>using permutations may not always work (in case of repeated characters), earlier I used combinations_with_replacement which had some weird issues which I could not debug
```python
from hashlib import sha256
import string
from itertools import permutations as take
CHARSET_SHA = string.printable[:62].encode() #0-9a-zA-Z as in challenge</p>
</blockquote>

<p>def pow_sha(postfix, hash_val):
    for prefix in take(CHARSET_SHA, 4):
        prefix_bytes = bytes(prefix)
        shaa = sha256(prefix_bytes+postfix).hexdigest()
        if shaa == SHA_256_HASH:
            return prefix_bytes</p>

<p>HOST, PORT = “pwnable.org”, 10001
REM = remote(HOST, PORT)
SHA_CHALL = REM.recvuntil(b’XXXX:’)
#print(SHA_CHALL.decode())
SHA_256_HASH = re.search(b”[0-9a-f]{64}”,SHA_CHALL).group(0).decode()
POSTFIX_STR = re.search(b”[0-9a-zA-Z]{16}”,SHA_CHALL).group(0)
PREFIX_CHALL = pow_sha(POSTFIX_STR, SHA_256_HASH)
REM.send(PREFIX_CHALL)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
Now comes the main part of the challenge, in which we have to provide 64 `xi` values a message `msg` and a value `v`  
The `msg` is sha256 hashed and first 16 bytes are taken to form the `key` for `ARC4`  
The value `v` is XORed with last 64 bits of `pow(x[i], e, Ns[i])` and then `ARC4` encrypted. The goal is to produce the final value equal to the input `v`.  

Since `ARC4` is simply a stream cipher, and encryption is just XORing the plaintext with a keystream, our final value `cur` is essentially `v^ys[0]^...ys[63]^xors[0]^xors[1]...^xors[63]`, where `ys[0..63]` are the last 64 bits of the respective `y[0..63]`  and `xors[0]^xors[1]...^xors[63]` part is essentially dependent on `key` and an invariant for a given `key`, lets call it `invariant(key)` (bye bye `ARC4`).  
All we need to do is to find `x[0..63]` such that `ys[0]^ys[1]...^ys[63] == invariant(key)` and we will have `cur==v` for all `v` as a consequence.

```python
from Crypto.Cipher import ARC4
from hashlib import sha256
from struct import pack, unpack

def encrypt_64(v,key,y):
    E = ARC4.new(key)
    cur = v
    for i in range(64):
        pt = (cur^y[i])%(1&lt;&lt;64)
        ct = unpack('Q',E.encrypt(pack('Q',pt)))[0]
        cur = ct
    return cur

def invariant(key):
    key_val = sha256(key).digest()[:16]
    return encrypt_64(0,key_val,[0 for i in range(64)])

print(invariant(b'aaa'))
# 911494890333775973
</code></pre></div></div>
<p>One could simply put <code class="language-plaintext highlighter-rouge">x[i]</code> as some value such that <code class="language-plaintext highlighter-rouge">ys[i] == invariant</code> and all other <code class="language-plaintext highlighter-rouge">xs == 0</code> but only if one could solve ANY of the RSA by factoring 4096 bit <code class="language-plaintext highlighter-rouge">Ns</code>, which is obviously not feasible!</p>

<p>Not knowing much linear algebra, I found this <a href="https://cs.stackexchange.com/questions/53331/minimal-basis-for-set-of-binary-vectors-using-xor/53337#53337">stackexchange post</a> and <a href="https://math.stackexchange.com/questions/2054271/gaussian-elimination-gf2">this</a> showing all that needs to be done is to have a set of 64 64-bit vectors, and we can represent any 64 bit value using xor of a subset of the vectors. Taking the corresponding <code class="language-plaintext highlighter-rouge">ys</code> for <code class="language-plaintext highlighter-rouge">xs = 2</code> for all <code class="language-plaintext highlighter-rouge">i</code>, and solving the subset for given invariant, we will only set <code class="language-plaintext highlighter-rouge">x[i] = 2</code> in the <code class="language-plaintext highlighter-rouge">i</code> in subset else <code class="language-plaintext highlighter-rouge">x[i]=0</code> (to have no effect).</p>

<p>Sagemath ftw! <a href="https://cocalc.com/app">CoCalc</a> for the poor</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Ns not shown here
</span><span class="n">last_64</span> <span class="o">=</span> <span class="p">[</span><span class="nb">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">e</span><span class="p">,</span><span class="n">i</span><span class="p">)</span><span class="o">%</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">64</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">Ns</span><span class="p">]</span>
<span class="n">invariant</span> <span class="o">=</span> <span class="mi">911494890333775973</span> <span class="c1">#for msg = b'aaa'
</span><span class="n">I</span> <span class="o">=</span> <span class="n">GF</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">64</span><span class="p">)</span>
<span class="n">last_64_mat</span> <span class="o">=</span> <span class="p">[</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">bin</span><span class="p">(</span><span class="n">i</span><span class="p">)[</span><span class="mi">2</span><span class="p">:].</span><span class="n">zfill</span><span class="p">(</span><span class="mi">64</span><span class="p">)))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">last_64</span>  <span class="p">]</span>
<span class="n">mat</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">(</span><span class="n">I</span><span class="p">,</span><span class="n">last_64_mat</span><span class="p">)</span>
<span class="n">invariant_vec</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">bin</span><span class="p">(</span><span class="n">invariant</span><span class="p">)[</span><span class="mi">2</span><span class="p">:].</span><span class="n">zfill</span><span class="p">(</span><span class="mi">64</span><span class="p">)))</span>
<span class="n">invariant_vec</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">(</span><span class="n">I</span><span class="p">,</span><span class="n">invariant_vec</span><span class="p">)</span>
<span class="n">op</span> <span class="o">=</span> <span class="n">mat</span><span class="p">.</span><span class="n">solve_left</span><span class="p">(</span><span class="n">invariant_vec</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">op</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</code></pre></div></div>
<p>Awesome! we have
<code class="language-plaintext highlighter-rouge">(0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1)</code> as our output vector, we just have to return <code class="language-plaintext highlighter-rouge">xi</code> as <code class="language-plaintext highlighter-rouge">2*op</code> and we are done ;)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">xs</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">xs</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">xs</span><span class="p">]</span>
<span class="n">REM</span><span class="p">.</span><span class="n">recv</span><span class="p">()</span>
<span class="n">REM</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s">'aaa'</span><span class="p">)</span> <span class="c1">#message
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">64</span><span class="p">):</span>
    <span class="n">REM</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">xs</span><span class="p">[</span><span class="n">i</span><span class="p">]).</span><span class="n">encode</span><span class="p">())</span> <span class="c1">#xi's
</span>    <span class="n">REM</span><span class="p">.</span><span class="n">recv</span><span class="p">()</span>

<span class="n">REM</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s">'0'</span><span class="p">)</span> <span class="c1">#v any v would do the job ;)
</span><span class="n">REM</span><span class="p">.</span><span class="n">recv</span><span class="p">()</span>
<span class="c1">#flag{babbbcbdbebfbgbhbibjbkblbmbnbobpbqbrbsbtbubvbwbxby}
</span></code></pre></div></div>
<p>Unorganized code in files <a href="solve.py">solve.py</a>, <a href="part2.py">part2.py</a> and <a href="test.py">test.py</a></p>

<h3 id="flagbabbbcbdbebfbgbhbibjbkblbmbnbobpbqbrbsbtbubvbwbxby">flag{babbbcbdbebfbgbhbibjbkblbmbnbobpbqbrbsbtbubvbwbxby}</h3>]]></content><author><name>deuterium</name><email>farziemailid69@gmail.com</email></author><category term="0CTF" /><category term="2020" /><category term="cryptography" /><category term="sagemath" /><category term="rc4" /><category term="PoW" /><category term="gaussian_elimination" /><category term="GF2" /><summary type="html"><![CDATA[Babyring Description nc pwnable.org 10001 Files ring.tar.gz release/task.py task.py reads (trimming most part) #!/usr/bin/python2 import os,random,sys,string from hashlib import sha256 from struct import pack, unpack import SocketServer from Crypto.Cipher import ARC4 from flag import flag K = 64 def gen(): from Crypto.Util.number import getStrongPrime e = 65537 Ns = [] for i in range(K): p = getStrongPrime(2048) q = getStrongPrime(2048) Ns.append(p*q) return e,Ns e,Ns = 65537,#list trimmed[...] class Task(SocketServer.BaseRequestHandler): def proof_of_work(self): proof = ''.join([random.choice(string.ascii_letters+string.digits) for _ in xrange(20)]) digest = sha256(proof).hexdigest() self.request.send("sha256(XXXX+%s) == %s\n" % (proof[4:],digest)) self.request.send('Give me XXXX:') x = self.request.recv(10) x = x.strip() if len(x) != 4 or sha256(x+proof[4:]).hexdigest() != digest: return False return True def handle(self): if not self.proof_of_work(): return self.request.settimeout(3) try: self.request.sendall("message: ") msg = self.request.recv(0x40).strip() ys = [] for i in range(K): self.request.sendall("x%d: " % i) x = int(self.request.recv(0x40).strip()) ys.append(pow(x,e,Ns[i])) self.request.sendall("v: ") v = int(self.request.recv(0x40).strip()) key = sha256(msg).digest()[:16] E = ARC4.new(key) cur = v for i in range(K): pt = (ys[i]^cur)%(1&lt;&lt;64) ct = unpack('Q', E.encrypt(pack('Q',pt)))[0] cur = ct if cur == v: self.request.sendall("%s\n" % flag) self.request.sendall("fin\n") finally: self.request.close() class ThreadedServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer): pass if __name__ == "__main__": HOST, PORT = '0.0.0.0', 10001 server = ThreadedServer((HOST, PORT), Task) server.allow_reuse_address = True server.serve_forever() The first part is obviously proof of work, in which we have to find 4 bytes XXXX such that sha256(XXXX + 16-char-val) = sha256_hash for provided 16-char-val postfix and sha256_hash Which is easy to solve using permutations may not always work (in case of repeated characters), earlier I used combinations_with_replacement which had some weird issues which I could not debug ```python from hashlib import sha256 import string from itertools import permutations as take CHARSET_SHA = string.printable[:62].encode() #0-9a-zA-Z as in challenge def pow_sha(postfix, hash_val): for prefix in take(CHARSET_SHA, 4): prefix_bytes = bytes(prefix) shaa = sha256(prefix_bytes+postfix).hexdigest() if shaa == SHA_256_HASH: return prefix_bytes HOST, PORT = “pwnable.org”, 10001 REM = remote(HOST, PORT) SHA_CHALL = REM.recvuntil(b’XXXX:’) #print(SHA_CHALL.decode()) SHA_256_HASH = re.search(b”[0-9a-f]{64}”,SHA_CHALL).group(0).decode() POSTFIX_STR = re.search(b”[0-9a-zA-Z]{16}”,SHA_CHALL).group(0) PREFIX_CHALL = pow_sha(POSTFIX_STR, SHA_256_HASH) REM.send(PREFIX_CHALL) Now comes the main part of the challenge, in which we have to provide 64 `xi` values a message `msg` and a value `v` The `msg` is sha256 hashed and first 16 bytes are taken to form the `key` for `ARC4` The value `v` is XORed with last 64 bits of `pow(x[i], e, Ns[i])` and then `ARC4` encrypted. The goal is to produce the final value equal to the input `v`. Since `ARC4` is simply a stream cipher, and encryption is just XORing the plaintext with a keystream, our final value `cur` is essentially `v^ys[0]^...ys[63]^xors[0]^xors[1]...^xors[63]`, where `ys[0..63]` are the last 64 bits of the respective `y[0..63]` and `xors[0]^xors[1]...^xors[63]` part is essentially dependent on `key` and an invariant for a given `key`, lets call it `invariant(key)` (bye bye `ARC4`). All we need to do is to find `x[0..63]` such that `ys[0]^ys[1]...^ys[63] == invariant(key)` and we will have `cur==v` for all `v` as a consequence. ```python from Crypto.Cipher import ARC4 from hashlib import sha256 from struct import pack, unpack def encrypt_64(v,key,y): E = ARC4.new(key) cur = v for i in range(64): pt = (cur^y[i])%(1&lt;&lt;64) ct = unpack('Q',E.encrypt(pack('Q',pt)))[0] cur = ct return cur def invariant(key): key_val = sha256(key).digest()[:16] return encrypt_64(0,key_val,[0 for i in range(64)]) print(invariant(b'aaa')) # 911494890333775973 One could simply put x[i] as some value such that ys[i] == invariant and all other xs == 0 but only if one could solve ANY of the RSA by factoring 4096 bit Ns, which is obviously not feasible! Not knowing much linear algebra, I found this stackexchange post and this showing all that needs to be done is to have a set of 64 64-bit vectors, and we can represent any 64 bit value using xor of a subset of the vectors. Taking the corresponding ys for xs = 2 for all i, and solving the subset for given invariant, we will only set x[i] = 2 in the i in subset else x[i]=0 (to have no effect). Sagemath ftw! CoCalc for the poor #Ns not shown here last_64 = [pow(2,e,i)%(1&lt;&lt;64) for i in Ns] invariant = 911494890333775973 #for msg = b'aaa' I = GF(2**64) last_64_mat = [ list(map(int, bin(i)[2:].zfill(64))) for i in last_64 ] mat = matrix(I,last_64_mat) invariant_vec = list(map(int, bin(invariant)[2:].zfill(64))) invariant_vec = matrix(I,invariant_vec) op = mat.solve_left(invariant_vec) print(op[0]) Awesome! we have (0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1) as our output vector, we just have to return xi as 2*op and we are done ;) xs = (0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1) xs = [2*i for i in xs] REM.recv() REM.send(b'aaa') #message for i in range(64): REM.send(str(xs[i]).encode()) #xi's REM.recv() REM.send(b'0') #v any v would do the job ;) REM.recv() #flag{babbbcbdbebfbgbhbibjbkblbmbnbobpbqbrbsbtbubvbwbxby} Unorganized code in files solve.py, part2.py and test.py flag{babbbcbdbebfbgbhbibjbkblbmbnbobpbqbrbsbtbubvbwbxby}]]></summary></entry><entry><title type="html">Redpwn 2020 Crypto - 12 Shades of Redpwn</title><link href="https://deut-erium.github.io/WriteUps/WriteUps/2020/redpwn/crypto/12-shades-of-redpwn/2020-06-27-redpwn-2020-12-shades-of-redpwn" rel="alternate" type="text/html" title="Redpwn 2020 Crypto - 12 Shades of Redpwn" /><published>2020-06-27T00:00:00+05:30</published><updated>2020-06-27T00:00:00+05:30</updated><id>https://deut-erium.github.io/WriteUps/WriteUps/2020/redpwn/crypto/12-shades-of-redpwn/redpwn-2020-12-shades-of-redpwn</id><content type="html" xml:base="https://deut-erium.github.io/WriteUps/WriteUps/2020/redpwn/crypto/12-shades-of-redpwn/2020-06-27-redpwn-2020-12-shades-of-redpwn"><![CDATA[<h1 id="12-shades-of-redpwn">12-shades-of-redpwn</h1>

<h2 id="description">Description</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Everyone's favorite guess god Tux just sent me a flag that he somehow encrypted with a color wheel!

I don't even know where to start, the wheel looks more like a clock than a cipher... can you help me crack the code?
</code></pre></div></div>

<h2 id="files">Files</h2>

<ul>
  <li><a href="color-wheel.jpg">color-wheel.jpg</a></li>
</ul>

<p><img src="color-wheel.jpg" alt="" /></p>

<ul>
  <li><a href="ciphertext.jpg">ciphertext.jpg</a> “Text” XD</li>
</ul>

<p><img src="ciphertext.jpg" alt="" /></p>

<p>Lets think like a clock, and start numbering colors from <code class="language-plaintext highlighter-rouge">0-11</code></p>

<p><img src="color-wheel2.gif" alt="" /></p>

<p>And if we map the corresponding numbers, we get</p>

<p><img src="ciphertext-extracted.jpg" alt="" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>86 90 81 87 a3 49 99 43 97 97 41 92 49 7b 41 97 7b 44 92 7b 44 96 98 a5
</code></pre></div></div>

<p>Now, we know that the flag begins with the prefix <code class="language-plaintext highlighter-rouge">flag{</code>, which helps us easily guess what it is, since <code class="language-plaintext highlighter-rouge">'f'</code> and <code class="language-plaintext highlighter-rouge">'l'</code> differ by <code class="language-plaintext highlighter-rouge">4</code>, here the ciphertext also differs by <code class="language-plaintext highlighter-rouge">4</code> i.e <code class="language-plaintext highlighter-rouge">90-86</code>. Also, <code class="language-plaintext highlighter-rouge">'l'</code> and <code class="language-plaintext highlighter-rouge">'a'</code> differ by 11, which confirms, that it is base 12 encoding.</p>

<p>Voila, here we go</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">EXTRACTED</span> <span class="o">=</span> <span class="s">'86 90 81 87 a3 49 99 43 97 97 41 92 49 7b 41 97 7b 44 92 7b 44 96 98 a5'</span>

<span class="n">flag</span> <span class="o">=</span> <span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="nb">chr</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="mi">12</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">EXTRACTED</span><span class="p">.</span><span class="n">split</span><span class="p">()])</span>
<span class="k">print</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="flag--flag9u3ss1n9_1s_4n_4rt">flag = flag{9u3ss1n9_1s_4n_4rt}</h3>]]></content><author><name>deuterium</name><email>farziemailid69@gmail.com</email></author><category term="2020" /><category term="redpwn" /><category term="cryptography" /><category term="known_plaintext" /><category term="guess" /><category term="base12" /><summary type="html"><![CDATA[12-shades-of-redpwn Description Everyone's favorite guess god Tux just sent me a flag that he somehow encrypted with a color wheel! I don't even know where to start, the wheel looks more like a clock than a cipher... can you help me crack the code? Files color-wheel.jpg ciphertext.jpg “Text” XD Lets think like a clock, and start numbering colors from 0-11 And if we map the corresponding numbers, we get 86 90 81 87 a3 49 99 43 97 97 41 92 49 7b 41 97 7b 44 92 7b 44 96 98 a5 Now, we know that the flag begins with the prefix flag{, which helps us easily guess what it is, since 'f' and 'l' differ by 4, here the ciphertext also differs by 4 i.e 90-86. Also, 'l' and 'a' differ by 11, which confirms, that it is base 12 encoding. Voila, here we go EXTRACTED = '86 90 81 87 a3 49 99 43 97 97 41 92 49 7b 41 97 7b 44 92 7b 44 96 98 a5' flag = ''.join([chr(int(i,12)) for i in EXTRACTED.split()]) print(flag) flag = flag{9u3ss1n9_1s_4n_4rt}]]></summary></entry><entry><title type="html">Redpwn 2020 Crypto - 4k-rsa</title><link href="https://deut-erium.github.io/WriteUps/WriteUps/2020/redpwn/crypto/4k-rsa/2020-06-27-redpwn-2020-4k-rsa" rel="alternate" type="text/html" title="Redpwn 2020 Crypto - 4k-rsa" /><published>2020-06-27T00:00:00+05:30</published><updated>2020-06-27T00:00:00+05:30</updated><id>https://deut-erium.github.io/WriteUps/WriteUps/2020/redpwn/crypto/4k-rsa/redpwn-2020-4k-rsa</id><content type="html" xml:base="https://deut-erium.github.io/WriteUps/WriteUps/2020/redpwn/crypto/4k-rsa/2020-06-27-redpwn-2020-4k-rsa"><![CDATA[<h1 id="4k-rsa">4k-rsa</h1>

<h2 id="description">Description</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Only n00bz use 2048-bit RSA. True gamers use keys that are at least 4k bits long, no matter how many primes it takes...
</code></pre></div></div>

<h2 id="files">Files</h2>
<p><a href="4k-rsa-public-key.txt">4k-rsa-public-key.txt</a> which contains a <code class="language-plaintext highlighter-rouge">n, e, c</code> triple</p>

<p>Seems like there are a lot of primes in the factorization of <code class="language-plaintext highlighter-rouge">n</code>, since the factorization process is influenced directly by the size of prime factors and not the size of the number being factored itself, it should be fairly doable by <a href="alpetron.ar/ECM.HTM">alpetron.ar</a></p>

<p><img src="alpetron.PNG" alt="" /></p>

<p>It took about half an hour to factor, one may engage to other activities or alternatively try if the factors are available on <a href="http://factordb.com/">factordb</a>.<br />
Anyways, once finished factoring, alpetron produces both the <a href="factors">factors</a> and the Euler’s totient <code class="language-plaintext highlighter-rouge">phi</code> which will be used to compute <code class="language-plaintext highlighter-rouge">d</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>d = pow(e,-1,phi) # on python3.8
# or gmpy2.invert(e,phi) 
m = pow(c,d,n)
print(bytes.fromhex(hex(m)[2:]).decode())
</code></pre></div></div>
<p>And hurray, we have our flag</p>

<h3 id="flagt0000_m4nyyyy_pr1m355555">flag{t0000_m4nyyyy_pr1m355555}</h3>]]></content><author><name>deuterium</name><email>farziemailid69@gmail.com</email></author><category term="redpwn" /><category term="2020" /><category term="cryptography" /><category term="alpertron" /><category term="ECM" /><category term="RSA" /><summary type="html"><![CDATA[4k-rsa Description Only n00bz use 2048-bit RSA. True gamers use keys that are at least 4k bits long, no matter how many primes it takes... Files 4k-rsa-public-key.txt which contains a n, e, c triple Seems like there are a lot of primes in the factorization of n, since the factorization process is influenced directly by the size of prime factors and not the size of the number being factored itself, it should be fairly doable by alpetron.ar It took about half an hour to factor, one may engage to other activities or alternatively try if the factors are available on factordb. Anyways, once finished factoring, alpetron produces both the factors and the Euler’s totient phi which will be used to compute d d = pow(e,-1,phi) # on python3.8 # or gmpy2.invert(e,phi) m = pow(c,d,n) print(bytes.fromhex(hex(m)[2:]).decode()) And hurray, we have our flag flag{t0000_m4nyyyy_pr1m355555}]]></summary></entry><entry><title type="html">Redpwn 2020 Crypto - Alien Transmissions v2</title><link href="https://deut-erium.github.io/WriteUps/WriteUps/2020/redpwn/crypto/alien-transmissions-v2/2020-06-27-redpwn-2020-alien-transmissions-v2" rel="alternate" type="text/html" title="Redpwn 2020 Crypto - Alien Transmissions v2" /><published>2020-06-27T00:00:00+05:30</published><updated>2020-06-27T00:00:00+05:30</updated><id>https://deut-erium.github.io/WriteUps/WriteUps/2020/redpwn/crypto/alien-transmissions-v2/redpwn-2020-alien-transmissions-v2</id><content type="html" xml:base="https://deut-erium.github.io/WriteUps/WriteUps/2020/redpwn/crypto/alien-transmissions-v2/2020-06-27-redpwn-2020-alien-transmissions-v2"><![CDATA[<h1 id="alien-transmissions-v2">Alien-transmissions-v2</h1>

<h2 id="description">Description</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The aliens are at it again! We've discovered that their communications are in base 512 and have transcribed them in base 10. However, it seems like they used XOR encryption twice with two different keys! We do have some information:
  *  This alien language consists of words delimitated by the character represented as 481
  *  The two keys appear to be of length 21 and 19
  *  The value of each character in these keys does not exceed 255

Find these two keys for me; concatenate their ASCII encodings and wrap it in the flag format.
</code></pre></div></div>

<h2 id="files">Files</h2>
<ul>
  <li><a href="encrypted.txt">encrypted.txt</a>  (HUGE number of characters)</li>
</ul>

<h2 id="observations">Observations</h2>
<ul>
  <li>Hint 1, the delimitated character in plaintext is represented as 481. How does it help? Because in any language delimiter of words (space in our case) is the most frequent character (although we cant be sure about the aliens, what if they have really long words??), we can assume that the plaintext character 481 is the most frequent.</li>
  <li>Hint 2 states that it is XORed twice, once with the key of length 21 and again by length of key 19. If one ponders more, the two keys would act as a combined key of length of LCM of the two lengths 19 and 21, which is 21x19 = 399. And given the huge number of words (1100151), we can recover the key atleast pretty accurately.</li>
</ul>

<h2 id="combined-xor-key-recovery">Combined XOR key recovery</h2>
<p>The plaintexts at a difference of keylength are always encrypted by the same key letter, so splitting the ciphertext in keylength number of chunks, we can get a whole chunk, which has been encrypted by the same key byte. And since the character frequency of each chunk would resemble the character frequency distribution of the whole text owing to the huge size of ciphertext.</p>

<p>Just find the character with maximum frequency in each chunk, that would be 481 XOR key, XOR it with 481, to get the corresponding compound key character</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'encrypted.txt'</span><span class="p">,</span><span class="s">'r'</span><span class="p">)</span> <span class="k">as</span> <span class="n">encrypted</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">encrypted</span><span class="p">.</span><span class="n">readlines</span><span class="p">()))</span>

<span class="n">key</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">()</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">21</span><span class="o">*</span><span class="mi">19</span><span class="p">):</span>
    <span class="n">data_slice</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">::</span><span class="mi">21</span><span class="o">*</span><span class="mi">19</span><span class="p">]</span>
    <span class="n">key_char_val</span> <span class="o">=</span> <span class="mi">481</span> <span class="o">^</span> <span class="nb">max</span><span class="p">(</span><span class="n">data_slice</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">data_slice</span><span class="p">.</span><span class="n">count</span><span class="p">)</span>
    <span class="n">key</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">key_char_val</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</code></pre></div></div>
<p>It takes a couple of seconds to find the compound key</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">key</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="sa">b</span><span class="s">'7G</span><span class="se">\x1a\x00</span><span class="s">x</span><span class="se">\x00</span><span class="s">l</span><span class="se">\x17</span><span class="s">X];9</span><span class="se">\x00</span><span class="s">Gj</span><span class="se">\x00</span><span class="s">7Y</span><span class="se">\x01</span><span class="s">3</span><span class="se">\x12\x00\x00</span><span class="s">-</span><span class="se">\x06\x14</span><span class="s">Vo</span><span class="se">\x1a\x0c</span><span class="s">lnSn</span><span class="se">\x06</span><span class="s">]Ej7@</span><span class="se">\x04</span><span class="s">U7</span><span class="se">\x06</span><span class="s">AP</span><span class="se">\x17</span><span class="s">[;+Y</span><span class="se">\x06\x00\x12</span><span class="s">YC</span><span class="se">\x00</span><span class="s">++</span><span class="se">\x00\x07</span><span class="s">3S[PB]CjnA7G7W</span><span class="se">\x04</span><span class="s">-A</span><span class="se">\x1c</span><span class="s">l7</span><span class="se">\x01</span><span class="s">_</span><span class="se">\x05</span><span class="s">X]</span><span class="se">\x16</span><span class="s">l</span><span class="se">\x16\x00\x00\x00\x00\x02</span><span class="s">j9E</span><span class="se">\x1a\x06</span><span class="s">+j[W</span><span class="se">\\\x08\x0c</span><span class="s">lC</span><span class="se">\x06</span><span class="s">xA7E]l+</span><span class="se">\x0e\x02</span><span class="s">-</span><span class="se">\x00</span><span class="s">G&lt;XZ</span><span class="se">\x08</span><span class="s">9Y</span><span class="se">\x06</span><span class="s">-GO</span><span class="se">\x04</span><span class="s">j+</span><span class="se">\x1c</span><span class="s">[l9</span><span class="se">\x04</span><span class="s">AVD1</span><span class="se">\x0c</span><span class="s">k]S7G</span><span class="se">\x1a\x02\x12</span><span class="s">j+</span><span class="se">\x1c</span><span class="s">[ljURB[</span><span class="se">\x10\x00</span><span class="s">Y</span><span class="se">\x01</span><span class="s">3</span><span class="se">\x12\x00\x02</span><span class="s">GlS]l+]</span><span class="se">\x00</span><span class="s">&lt;V_</span><span class="se">\x16</span><span class="s">jEj7@</span><span class="se">\x04</span><span class="s">W]l</span><span class="se">\x06</span><span class="s">[</span><span class="se">\x14</span><span class="s">jjG</span><span class="se">\x0b\x03</span><span class="s">1</span><span class="se">\x02</span><span class="s">nC</span><span class="se">\x00</span><span class="s">++</span><span class="se">\x00\x05</span><span class="s">Y9</span><span class="se">\x1c</span><span class="s">[Al</span><span class="se">\x12\x06</span><span class="s">&lt;D</span><span class="se">\x06</span><span class="s">W</span><span class="se">\x00</span><span class="s">W</span><span class="se">\x04</span><span class="s">-A</span><span class="se">\x1c</span><span class="s">n]k</span><span class="se">\x18\x0e</span><span class="s">[lG</span><span class="se">\x00</span><span class="s">D</span><span class="se">\x05</span><span class="s">1</span><span class="se">\x10</span><span class="s">7</span><span class="se">\x02</span><span class="s">j9E</span><span class="se">\x1a\x04</span><span class="s">A</span><span class="se">\x00\x1c\\</span><span class="s">_9]</span><span class="se">\x00\x11\x03</span><span class="s">IQ</span><span class="se">\x00</span><span class="s">E]l+</span><span class="se">\x0e\x00</span><span class="s">Gj</span><span class="se">\x00</span><span class="s">7[kYU</span><span class="se">\x0b\x03\x1c</span><span class="s">Wx</span><span class="se">\x04</span><span class="s">j+</span><span class="se">\x1c</span><span class="s">[nSn</span><span class="se">\x06</span><span class="s">]G</span><span class="se">\x00</span><span class="s">]</span><span class="se">\x07\x0f</span><span class="s">V</span><span class="se">\x06</span><span class="s">W-</span><span class="se">\x02\x12</span><span class="s">j+</span><span class="se">\x1c</span><span class="s">Y</span><span class="se">\x06\x00\x12</span><span class="s">YAjAl</span><span class="se">\x0b\x04\x02\x02</span><span class="s">7</span><span class="se">\x02</span><span class="s">GlS]nA7G7UnG</span><span class="se">\x06\x17</span><span class="s">o</span><span class="se">\x06</span><span class="s">P3W]l</span><span class="se">\x06</span><span class="s">[</span><span class="se">\x16\x00\x00\x00\x00\x00\x00</span><span class="s">S</span><span class="se">\x02\x11\x05\x1a</span><span class="s">;7</span><span class="se">\x05</span><span class="s">Y9</span><span class="se">\x1c</span><span class="s">[C</span><span class="se">\x06</span><span class="s">xA7G7</span><span class="se">\x06</span><span class="s">l</span><span class="se">\x05\x01\x1c</span><span class="s">Q+n]k</span><span class="se">\x18\x0e</span><span class="s">Y</span><span class="se">\x06</span><span class="s">-GO</span><span class="se">\x06\x00</span><span class="s">A[Po</span><span class="se">\x08</span><span class="s">U-</span><span class="se">\x04</span><span class="s">A</span><span class="se">\x00\x1c\\</span><span class="s">]S'</span><span class="p">)</span>
</code></pre></div></div>

<p>Now, we have the XOR of key1 and key2, we need to recover key1 and key2 from it. We have all possible bytes, of key1 XORed with key2 and vice-versa.</p>

<p>First thought, <a href="https://github.com/Z3Prover/z3">Z3</a> go brrrrrr….</p>

<p>Although Z3 produces a feasible solution(model), a quick <a href="https://stackoverflow.com/questions/11867611/z3py-checking-all-solutions-for-equation">stackOverflow</a> post gave me the implementation of finding n models.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">z3</span> <span class="kn">import</span> <span class="o">*</span>
<span class="k">def</span> <span class="nf">get_models</span><span class="p">(</span><span class="n">F</span><span class="p">,</span> <span class="n">M</span><span class="p">):</span>
    <span class="s">"""
    Returns a list of M models (if possible) from the list of constraints F
    """</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">Solver</span><span class="p">()</span>
    <span class="n">s</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">F</span><span class="p">)</span>
    <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">M</span> <span class="ow">and</span> <span class="n">s</span><span class="p">.</span><span class="n">check</span><span class="p">()</span> <span class="o">==</span> <span class="n">sat</span><span class="p">:</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">model</span><span class="p">()</span>
        <span class="n">result</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
        <span class="c1"># Create a new constraint the blocks the current model
</span>        <span class="n">block</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">m</span><span class="p">:</span>
            <span class="c1"># d is a declaration
</span>            <span class="k">if</span> <span class="n">d</span><span class="p">.</span><span class="n">arity</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">raise</span> <span class="n">Z3Exception</span><span class="p">(</span><span class="s">"uninterpreted functions are not supported"</span><span class="p">)</span>
            <span class="c1"># create a constant from declaration
</span>            <span class="n">c</span> <span class="o">=</span> <span class="n">d</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">is_array</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="ow">or</span> <span class="n">c</span><span class="p">.</span><span class="n">sort</span><span class="p">().</span><span class="n">kind</span><span class="p">()</span> <span class="o">==</span> <span class="n">Z3_UNINTERPRETED_SORT</span><span class="p">:</span>
                <span class="k">raise</span> <span class="n">Z3Exception</span><span class="p">(</span><span class="s">"arrays and uninterpreted sorts are not supported"</span><span class="p">)</span>
            <span class="n">block</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">c</span> <span class="o">!=</span> <span class="n">m</span><span class="p">[</span><span class="n">d</span><span class="p">])</span>
        <span class="n">s</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Or</span><span class="p">(</span><span class="n">block</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">result</span>
</code></pre></div></div>

<p>All we need to do is to form constraints and checking if the generated model produces ASCII printable strings.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">key1</span> <span class="o">=</span> <span class="p">[</span><span class="n">z3</span><span class="p">.</span><span class="n">BitVec</span><span class="p">(</span><span class="s">"k1{}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">i</span><span class="p">),</span><span class="mi">8</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">21</span><span class="p">)]</span>
<span class="n">key2</span> <span class="o">=</span> <span class="p">[</span><span class="n">z3</span><span class="p">.</span><span class="n">BitVec</span><span class="p">(</span><span class="s">"k2{}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">i</span><span class="p">),</span><span class="mi">8</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">19</span><span class="p">)]</span>
<span class="n">F</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">19</span><span class="o">*</span><span class="mi">21</span><span class="p">):</span>
    <span class="n">F</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">key1</span><span class="p">[</span><span class="n">i</span><span class="o">%</span><span class="mi">21</span><span class="p">]</span><span class="o">^</span><span class="n">key2</span><span class="p">[</span><span class="n">i</span><span class="o">%</span><span class="mi">19</span><span class="p">]</span><span class="o">==</span><span class="n">key</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>

<span class="c1"># Valid flag characters
</span><span class="n">VALID_CHARS</span> <span class="o">=</span> <span class="n">string</span><span class="p">.</span><span class="n">printable</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">62</span><span class="p">]</span><span class="o">+</span><span class="s">"_,.'?!@$&lt;&gt;*:-]*</span><span class="se">\\</span><span class="s">"</span>
<span class="k">for</span> <span class="n">model</span> <span class="ow">in</span> <span class="n">get_models</span><span class="p">(</span><span class="n">F</span><span class="p">,</span><span class="mi">256</span><span class="p">):</span>
    <span class="c1"># 256 models to get all possible relative strings
</span>    <span class="n">KEY1</span> <span class="o">=</span> <span class="s">""</span><span class="p">.</span><span class="n">join</span><span class="p">(</span> <span class="nb">chr</span><span class="p">(</span><span class="n">model</span><span class="p">[</span><span class="n">key1</span><span class="p">[</span><span class="n">i</span><span class="p">]].</span><span class="n">as_long</span><span class="p">())</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">21</span><span class="p">))</span>
    <span class="n">KEY2</span> <span class="o">=</span> <span class="s">""</span><span class="p">.</span><span class="n">join</span><span class="p">(</span> <span class="nb">chr</span><span class="p">(</span><span class="n">model</span><span class="p">[</span><span class="n">key2</span><span class="p">[</span><span class="n">i</span><span class="p">]].</span><span class="n">as_long</span><span class="p">())</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">19</span><span class="p">))</span>
    <span class="n">flag</span> <span class="o">=</span> <span class="n">KEY1</span><span class="o">+</span><span class="n">KEY2</span>
    <span class="k">if</span> <span class="nb">all</span><span class="p">(</span><span class="n">i</span> <span class="ow">in</span> <span class="n">VALID_CHARS</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">flag</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span>
</code></pre></div></div>
<p>Turns out there was only one model with all characters printable and which is our flag</p>

<h3 id="flagh3r35_th3_f1r5t_h4lf_th3_53c0nd_15_th15">flag{h3r3’5_th3_f1r5t_h4lf_th3_53c0nd_15_th15}</h3>]]></content><author><name>deuterium</name><email>farziemailid69@gmail.com</email></author><category term="redpwn" /><category term="2020" /><category term="cryptography" /><category term="xor" /><category term="z3" /><summary type="html"><![CDATA[Alien-transmissions-v2 Description The aliens are at it again! We've discovered that their communications are in base 512 and have transcribed them in base 10. However, it seems like they used XOR encryption twice with two different keys! We do have some information: * This alien language consists of words delimitated by the character represented as 481 * The two keys appear to be of length 21 and 19 * The value of each character in these keys does not exceed 255 Find these two keys for me; concatenate their ASCII encodings and wrap it in the flag format. Files encrypted.txt (HUGE number of characters) Observations Hint 1, the delimitated character in plaintext is represented as 481. How does it help? Because in any language delimiter of words (space in our case) is the most frequent character (although we cant be sure about the aliens, what if they have really long words??), we can assume that the plaintext character 481 is the most frequent. Hint 2 states that it is XORed twice, once with the key of length 21 and again by length of key 19. If one ponders more, the two keys would act as a combined key of length of LCM of the two lengths 19 and 21, which is 21x19 = 399. And given the huge number of words (1100151), we can recover the key atleast pretty accurately. Combined XOR key recovery The plaintexts at a difference of keylength are always encrypted by the same key letter, so splitting the ciphertext in keylength number of chunks, we can get a whole chunk, which has been encrypted by the same key byte. And since the character frequency of each chunk would resemble the character frequency distribution of the whole text owing to the huge size of ciphertext. Just find the character with maximum frequency in each chunk, that would be 481 XOR key, XOR it with 481, to get the corresponding compound key character with open('encrypted.txt','r') as encrypted: data = list(map(int, encrypted.readlines())) key = bytearray() for i in range(21*19): data_slice = data[i::21*19] key_char_val = 481 ^ max(data_slice, key=data_slice.count) key.append(key_char_val) print(key) It takes a couple of seconds to find the compound key key = bytearray(b'7G\x1a\x00x\x00l\x17X];9\x00Gj\x007Y\x013\x12\x00\x00-\x06\x14Vo\x1a\x0clnSn\x06]Ej7@\x04U7\x06AP\x17[;+Y\x06\x00\x12YC\x00++\x00\x073S[PB]CjnA7G7W\x04-A\x1cl7\x01_\x05X]\x16l\x16\x00\x00\x00\x00\x02j9E\x1a\x06+j[W\\\x08\x0clC\x06xA7E]l+\x0e\x02-\x00G&lt;XZ\x089Y\x06-GO\x04j+\x1c[l9\x04AVD1\x0ck]S7G\x1a\x02\x12j+\x1c[ljURB[\x10\x00Y\x013\x12\x00\x02GlS]l+]\x00&lt;V_\x16jEj7@\x04W]l\x06[\x14jjG\x0b\x031\x02nC\x00++\x00\x05Y9\x1c[Al\x12\x06&lt;D\x06W\x00W\x04-A\x1cn]k\x18\x0e[lG\x00D\x051\x107\x02j9E\x1a\x04A\x00\x1c\\_9]\x00\x11\x03IQ\x00E]l+\x0e\x00Gj\x007[kYU\x0b\x03\x1cWx\x04j+\x1c[nSn\x06]G\x00]\x07\x0fV\x06W-\x02\x12j+\x1cY\x06\x00\x12YAjAl\x0b\x04\x02\x027\x02GlS]nA7G7UnG\x06\x17o\x06P3W]l\x06[\x16\x00\x00\x00\x00\x00\x00S\x02\x11\x05\x1a;7\x05Y9\x1c[C\x06xA7G7\x06l\x05\x01\x1cQ+n]k\x18\x0eY\x06-GO\x06\x00A[Po\x08U-\x04A\x00\x1c\\]S') Now, we have the XOR of key1 and key2, we need to recover key1 and key2 from it. We have all possible bytes, of key1 XORed with key2 and vice-versa. First thought, Z3 go brrrrrr…. Although Z3 produces a feasible solution(model), a quick stackOverflow post gave me the implementation of finding n models. from z3 import * def get_models(F, M): """ Returns a list of M models (if possible) from the list of constraints F """ result = [] s = Solver() s.add(F) while len(result) &lt; M and s.check() == sat: m = s.model() result.append(m) # Create a new constraint the blocks the current model block = [] for d in m: # d is a declaration if d.arity() &gt; 0: raise Z3Exception("uninterpreted functions are not supported") # create a constant from declaration c = d() if is_array(c) or c.sort().kind() == Z3_UNINTERPRETED_SORT: raise Z3Exception("arrays and uninterpreted sorts are not supported") block.append(c != m[d]) s.add(Or(block)) return result All we need to do is to form constraints and checking if the generated model produces ASCII printable strings. key1 = [z3.BitVec("k1{}".format(i),8) for i in range(21)] key2 = [z3.BitVec("k2{}".format(i),8) for i in range(19)] F = [] for i in range(19*21): F.append(key1[i%21]^key2[i%19]==key[i]) # Valid flag characters VALID_CHARS = string.printable[0:62]+"_,.'?!@$&lt;&gt;*:-]*\\" for model in get_models(F,256): # 256 models to get all possible relative strings KEY1 = "".join( chr(model[key1[i]].as_long()) for i in range(21)) KEY2 = "".join( chr(model[key2[i]].as_long()) for i in range(19)) flag = KEY1+KEY2 if all(i in VALID_CHARS for i in flag): print(flag) Turns out there was only one model with all characters printable and which is our flag flag{h3r3’5_th3_f1r5t_h4lf_th3_53c0nd_15_th15}]]></summary></entry><entry><title type="html">Redpwn 2020 Crypto - base646464</title><link href="https://deut-erium.github.io/WriteUps/WriteUps/2020/redpwn/crypto/base646464/2020-06-27-redpwn-2020-base646464" rel="alternate" type="text/html" title="Redpwn 2020 Crypto - base646464" /><published>2020-06-27T00:00:00+05:30</published><updated>2020-06-27T00:00:00+05:30</updated><id>https://deut-erium.github.io/WriteUps/WriteUps/2020/redpwn/crypto/base646464/redpwn-2020-base646464</id><content type="html" xml:base="https://deut-erium.github.io/WriteUps/WriteUps/2020/redpwn/crypto/base646464/2020-06-27-redpwn-2020-base646464"><![CDATA[<h1 id="base646464">base646464</h1>

<h2 id="description">Description</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Encoding something multiple times makes it exponentially more secure!
</code></pre></div></div>

<h2 id="files">Files</h2>
<ul>
  <li><a href="cipher.txt">cipher.txt</a></li>
  <li><a href="generate.js">generate.js</a></li>
</ul>

<p>Lets take a look at generate.js, which reads</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">btoa</span> <span class="o">=</span> <span class="nx">str</span> <span class="o">=&gt;</span> <span class="nx">Buffer</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">str</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="dl">'</span><span class="s1">base64</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">fs</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">flag</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="dl">"</span><span class="s2">flag.txt</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">utf8</span><span class="dl">"</span><span class="p">).</span><span class="nx">trim</span><span class="p">();</span>

<span class="kd">let</span> <span class="nx">ret</span> <span class="o">=</span> <span class="nx">flag</span><span class="p">;</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">25</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="nx">ret</span> <span class="o">=</span> <span class="nx">btoa</span><span class="p">(</span><span class="nx">ret</span><span class="p">);</span>

<span class="nx">fs</span><span class="p">.</span><span class="nx">writeFileSync</span><span class="p">(</span><span class="dl">"</span><span class="s2">cipher.txt</span><span class="dl">"</span><span class="p">,</span> <span class="nx">ret</span><span class="p">);</span>
</code></pre></div></div>

<p>The function <code class="language-plaintext highlighter-rouge">btoa</code> is basically string to its base64 encoding.<br />
The flag is encoded repetitively 25 times in a for loop.<br />
We just need to base64 decode it 25 times and we will get the flag.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">base64</span> <span class="kn">import</span> <span class="n">b64decode</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'cipher.txt'</span><span class="p">,</span><span class="s">'r'</span><span class="p">)</span> <span class="k">as</span> <span class="n">cipher_file</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">cipher_file</span><span class="p">.</span><span class="n">read</span><span class="p">()</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">25</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">b64decode</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</code></pre></div></div>
<p>A cool sarcasm on bad crypto challenges in CTFs :)</p>
<h3 id="flagl00ks_l1ke_a_l0t_of_64s">flag{l00ks_l1ke_a_l0t_of_64s}</h3>]]></content><author><name>deuterium</name><email>farziemailid69@gmail.com</email></author><category term="redpwn" /><category term="2020" /><category term="cryptography" /><category term="javascript" /><category term="base64" /><summary type="html"><![CDATA[base646464 Description Encoding something multiple times makes it exponentially more secure! Files cipher.txt generate.js Lets take a look at generate.js, which reads const btoa = str =&gt; Buffer.from(str).toString('base64'); const fs = require("fs"); const flag = fs.readFileSync("flag.txt", "utf8").trim(); let ret = flag; for(let i = 0; i &lt; 25; i++) ret = btoa(ret); fs.writeFileSync("cipher.txt", ret); The function btoa is basically string to its base64 encoding. The flag is encoded repetitively 25 times in a for loop. We just need to base64 decode it 25 times and we will get the flag. from base64 import b64decode with open('cipher.txt','r') as cipher_file: data = cipher_file.read() for i in range(25): data = b64decode(data) print(data) A cool sarcasm on bad crypto challenges in CTFs :) flag{l00ks_l1ke_a_l0t_of_64s}]]></summary></entry><entry><title type="html">Redpwn 2020 Crypto - Itsy Bitsy</title><link href="https://deut-erium.github.io/WriteUps/WriteUps/2020/redpwn/crypto/itsy-bitsy/2020-06-27-redpwn-2020-Itsy-Bitsy" rel="alternate" type="text/html" title="Redpwn 2020 Crypto - Itsy Bitsy" /><published>2020-06-27T00:00:00+05:30</published><updated>2020-06-27T00:00:00+05:30</updated><id>https://deut-erium.github.io/WriteUps/WriteUps/2020/redpwn/crypto/itsy-bitsy/redpwn-2020-Itsy-Bitsy</id><content type="html" xml:base="https://deut-erium.github.io/WriteUps/WriteUps/2020/redpwn/crypto/itsy-bitsy/2020-06-27-redpwn-2020-Itsy-Bitsy"><![CDATA[<h1 id="itsy-bitsy">itsy-bitsy</h1>

<h2 id="description">Description</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The itsy-bitsy spider climbed up the water spout...

nc 2020.redpwnc.tf 31284
</code></pre></div></div>
<h2 id="files">Files</h2>
<ul>
  <li><a href="itsy-bitsy.py">itsy-bitsy.py</a></li>
</ul>

<p>Lets quickly take a look at now the connection works</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nc 2020.redpwnc.tf 31284
Enter an integer i such that i <span class="o">&gt;</span> 0: 1
Enter an integer j such that j <span class="o">&gt;</span> i <span class="o">&gt;</span> 0: 2
Ciphertext: 0010001001011101111000001100000010000011000111100100111100011000100001001001100111110011100100000001101101010101001100001100010010000001111000000010100001001100100001000000010101000101010101011010011011100110100000010001110000101000011011001001010110010101000000100001011110000100010100010010110100000

</code></pre></div></div>
<p>Let us quickly go through the required functions of the source</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
</span>
<span class="kn">from</span> <span class="nn">Crypto.Random.random</span> <span class="kn">import</span> <span class="n">randint</span>

<span class="k">def</span> <span class="nf">str_to_bits</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="n">bit_str</span> <span class="o">=</span> <span class="s">''</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
        <span class="n">i</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
        <span class="n">bit_str</span> <span class="o">+=</span> <span class="nb">bin</span><span class="p">(</span><span class="n">i</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span>
    <span class="k">return</span> <span class="n">bit_str</span>

<span class="k">def</span> <span class="nf">recv_input</span><span class="p">():</span>
    <span class="n">i</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">'Enter an integer i such that i &gt; 0: '</span><span class="p">)</span>
    <span class="n">j</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">'Enter an integer j such that j &gt; i &gt; 0: '</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">i</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="n">j</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">i</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nb">Exception</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">'Error! You must adhere to the restrictions!'</span><span class="p">)</span>
        <span class="nb">exit</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span>

<span class="k">def</span> <span class="nf">generate_random_bits</span><span class="p">(</span><span class="n">lower_bound</span><span class="p">,</span> <span class="n">upper_bound</span><span class="p">,</span> <span class="n">number_of_bits</span><span class="p">):</span>
    <span class="n">bit_str</span> <span class="o">=</span> <span class="s">''</span>
    <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">bit_str</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">number_of_bits</span><span class="p">:</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">randint</span><span class="p">(</span><span class="n">lower_bound</span><span class="p">,</span> <span class="n">upper_bound</span><span class="p">)</span>
        <span class="n">bit_str</span> <span class="o">+=</span> <span class="nb">bin</span><span class="p">(</span><span class="n">r</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span>
    <span class="k">return</span> <span class="n">bit_str</span><span class="p">[:</span><span class="n">number_of_bits</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">bit_str_xor</span><span class="p">(</span><span class="n">bit_str_1</span><span class="p">,</span> <span class="n">bit_str_2</span><span class="p">):</span>
    <span class="n">xor_res</span> <span class="o">=</span> <span class="s">''</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">bit_str_1</span><span class="p">)):</span>
        <span class="n">bit_1</span> <span class="o">=</span> <span class="n">bit_str_1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">bit_2</span> <span class="o">=</span> <span class="n">bit_str_2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">xor_res</span> <span class="o">+=</span> <span class="nb">str</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">bit_1</span><span class="p">)</span> <span class="o">^</span> <span class="nb">int</span><span class="p">(</span><span class="n">bit_2</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">xor_res</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'flag.txt'</span><span class="p">,</span><span class="s">'r'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">flag</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">read</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">flag</span><span class="p">:</span>
        <span class="n">i</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
        <span class="k">assert</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">6</span><span class="p">,</span><span class="mi">2</span><span class="o">**</span><span class="mi">7</span><span class="p">)</span>
    <span class="n">flag_bits</span> <span class="o">=</span> <span class="n">str_to_bits</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span>
    <span class="n">i</span><span class="p">,</span><span class="n">j</span> <span class="o">=</span> <span class="n">recv_input</span><span class="p">()</span>
    <span class="n">lb</span> <span class="o">=</span> <span class="mi">2</span><span class="o">**</span><span class="n">i</span>
    <span class="n">ub</span> <span class="o">=</span> <span class="mi">2</span><span class="o">**</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">flag_bits</span><span class="p">)</span>
    <span class="n">random_bits</span> <span class="o">=</span> <span class="n">generate_random_bits</span><span class="p">(</span><span class="n">lb</span><span class="p">,</span><span class="n">ub</span><span class="p">,</span><span class="n">n</span><span class="p">)</span>
    <span class="n">encrypted_bits</span> <span class="o">=</span> <span class="n">bit_str_xor</span><span class="p">(</span><span class="n">flag_bits</span><span class="p">,</span><span class="n">random_bits</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Ciphertext: </span><span class="si">{</span><span class="n">encrypted_bits</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">generate_random_bits</span><span class="p">(</span><span class="n">lower_bound</span><span class="p">,</span> <span class="n">upper_bound</span><span class="p">,</span> <span class="n">number_of_bits</span><span class="p">):</span>
    <span class="n">bit_str</span> <span class="o">=</span> <span class="s">''</span>
    <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">bit_str</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">number_of_bits</span><span class="p">:</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">randint</span><span class="p">(</span><span class="n">lower_bound</span><span class="p">,</span> <span class="n">upper_bound</span><span class="p">)</span>
        <span class="n">bit_str</span> <span class="o">+=</span> <span class="nb">bin</span><span class="p">(</span><span class="n">r</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span>
    <span class="k">return</span> <span class="n">bit_str</span><span class="p">[:</span><span class="n">number_of_bits</span><span class="p">]</span>
</code></pre></div></div>
<p>It will generate a random bitstring of length <code class="language-plaintext highlighter-rouge">number_of_bits</code> from <code class="language-plaintext highlighter-rouge">lower_bound</code> to <code class="language-plaintext highlighter-rouge">upper_bound</code> and if the <code class="language-plaintext highlighter-rouge">lower_bound</code> itself is greater than the requirement, it will truncate it.</p>

<p>We are asked for input for <code class="language-plaintext highlighter-rouge">i</code> and <code class="language-plaintext highlighter-rouge">j</code> which are converted to lower and upper bounds as <code class="language-plaintext highlighter-rouge">2**i</code> to <code class="language-plaintext highlighter-rouge">2**j - 1</code>.<br />
The generated bitstream is xored (bit-wise) with the flag and returned</p>

<h2 id="observation">Observation</h2>
<p>If one sets <code class="language-plaintext highlighter-rouge">i</code> and <code class="language-plaintext highlighter-rouge">j</code> to <code class="language-plaintext highlighter-rouge">i</code> and <code class="language-plaintext highlighter-rouge">i+1</code>, the bounds are <code class="language-plaintext highlighter-rouge">2**i</code> and <code class="language-plaintext highlighter-rouge">2**(i+1) - 1</code>, which are both <code class="language-plaintext highlighter-rouge">i</code> bits in length.<br />
The pecularity being the first bit would always be <code class="language-plaintext highlighter-rouge">1</code> because of <code class="language-plaintext highlighter-rouge">2**i</code> and all the bits at positions multiples of <code class="language-plaintext highlighter-rouge">i</code> would be <code class="language-plaintext highlighter-rouge">1</code></p>

<h4 id="example">Example</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">generate_random_bits</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">**</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">80</span><span class="p">)</span>
<span class="s">'10101111111010111010111110111010101010101111101111111010101010111111111011111011'</span>
</code></pre></div></div>
<p>Notice the 0th, 2nd, 4th index and so on is always <code class="language-plaintext highlighter-rouge">1</code>
My unoptimized script <a href="solve.py">solve.py</a> which just concerns about knowing the bit at position <code class="language-plaintext highlighter-rouge">i</code> by sending the index <code class="language-plaintext highlighter-rouge">i-1</code> and <code class="language-plaintext highlighter-rouge">i</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="n">remote</span>

<span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span> <span class="o">=</span> <span class="s">"2020.redpwnc.tf"</span><span class="p">,</span> <span class="mi">31284</span>

<span class="k">def</span> <span class="nf">get_ct</span><span class="p">(</span><span class="n">num_bits</span><span class="p">):</span>
    <span class="n">REM</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>
    <span class="n">REM</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">num_bits</span> <span class="o">-</span><span class="mi">1</span><span class="p">).</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">REM</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">num_bits</span><span class="p">).</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">REM</span><span class="p">.</span><span class="n">recvline</span><span class="p">()</span>
    <span class="n">ciphertext</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="sa">b</span><span class="s">':'</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="n">strip</span><span class="p">()</span>
    <span class="c1">#print(data)
</span>    <span class="n">REM</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">ciphertext</span>

<span class="n">flag_bits</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="mi">301</span><span class="p">)</span>  <span class="c1">#flag size known 
</span><span class="n">flag_bits</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">49</span>  <span class="c1"># ord('1') known from the first character 'f' of flag
</span><span class="n">flag_bits</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">49</span>  <span class="c1"># ord('1') 
</span><span class="k">for</span> <span class="n">num_bits</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">301</span><span class="p">):</span>
    <span class="n">ct</span> <span class="o">=</span> <span class="n">get_ct</span><span class="p">(</span><span class="n">num_bits</span><span class="p">)</span>
    <span class="n">flag_bits</span><span class="p">[</span><span class="n">num_bits</span><span class="p">]</span> <span class="o">=</span> <span class="mi">48</span> <span class="k">if</span> <span class="n">ct</span><span class="p">[</span><span class="n">num_bits</span><span class="p">]</span> <span class="o">==</span> <span class="mi">49</span> <span class="k">else</span> <span class="mi">49</span>

<span class="k">print</span><span class="p">(</span><span class="n">bits_to_str</span><span class="p">(</span><span class="n">flag_bits</span><span class="p">))</span>
</code></pre></div></div>

<p>This can be improved just by noting the fact we knew most of the bits <code class="language-plaintext highlighter-rouge">i</code> before reaching the index <code class="language-plaintext highlighter-rouge">i</code>, we will only make a request if bit <code class="language-plaintext highlighter-rouge">i</code> is not known</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">num_bits</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">301</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">flag_bits</span><span class="p">[</span><span class="n">num_bits</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">ct</span> <span class="o">=</span> <span class="n">get_ct</span><span class="p">(</span><span class="n">num_bits</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_bits</span><span class="p">,</span> <span class="mi">301</span><span class="p">,</span> <span class="n">num_bits</span><span class="p">):</span>
            <span class="n">flag_bits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">48</span> <span class="k">if</span> <span class="n">ct</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">49</span> <span class="k">else</span> <span class="mi">49</span>
<span class="k">print</span><span class="p">(</span><span class="n">bits_to_str</span><span class="p">(</span><span class="n">flag_bits</span><span class="p">))</span>
</code></pre></div></div>
<p>Which takes 62 requests instead of 300 as in original</p>

<h3 id="flagbits_leaking_out_down_the_water_spout">flag{bits_leaking_out_down_the_water_spout}</h3>]]></content><author><name>deuterium</name><email>farziemailid69@gmail.com</email></author><category term="redpwn" /><category term="2020" /><category term="cryptography" /><category term="leakage" /><category term="xor" /><summary type="html"><![CDATA[itsy-bitsy Description The itsy-bitsy spider climbed up the water spout... nc 2020.redpwnc.tf 31284 Files itsy-bitsy.py Lets quickly take a look at now the connection works nc 2020.redpwnc.tf 31284 Enter an integer i such that i &gt; 0: 1 Enter an integer j such that j &gt; i &gt; 0: 2 Ciphertext: 0010001001011101111000001100000010000011000111100100111100011000100001001001100111110011100100000001101101010101001100001100010010000001111000000010100001001100100001000000010101000101010101011010011011100110100000010001110000101000011011001001010110010101000000100001011110000100010100010010110100000 Let us quickly go through the required functions of the source #!/usr/bin/env python3 from Crypto.Random.random import randint def str_to_bits(s): bit_str = '' for c in s: i = ord(c) bit_str += bin(i)[2:] return bit_str def recv_input(): i = input('Enter an integer i such that i &gt; 0: ') j = input('Enter an integer j such that j &gt; i &gt; 0: ') try: i = int(i) j = int(j) if i &lt;= 0 or j &lt;= i: raise Exception except: print('Error! You must adhere to the restrictions!') exit() return i,j def generate_random_bits(lower_bound, upper_bound, number_of_bits): bit_str = '' while len(bit_str) &lt; number_of_bits: r = randint(lower_bound, upper_bound) bit_str += bin(r)[2:] return bit_str[:number_of_bits] def bit_str_xor(bit_str_1, bit_str_2): xor_res = '' for i in range(len(bit_str_1)): bit_1 = bit_str_1[i] bit_2 = bit_str_2[i] xor_res += str(int(bit_1) ^ int(bit_2)) return xor_res def main(): with open('flag.txt','r') as f: flag = f.read() for c in flag: i = ord(c) assert i in range(2**6,2**7) flag_bits = str_to_bits(flag) i,j = recv_input() lb = 2**i ub = 2**j - 1 n = len(flag_bits) random_bits = generate_random_bits(lb,ub,n) encrypted_bits = bit_str_xor(flag_bits,random_bits) print(f'Ciphertext: {encrypted_bits}') if __name__ == '__main__': main() def generate_random_bits(lower_bound, upper_bound, number_of_bits): bit_str = '' while len(bit_str) &lt; number_of_bits: r = randint(lower_bound, upper_bound) bit_str += bin(r)[2:] return bit_str[:number_of_bits] It will generate a random bitstring of length number_of_bits from lower_bound to upper_bound and if the lower_bound itself is greater than the requirement, it will truncate it. We are asked for input for i and j which are converted to lower and upper bounds as 2**i to 2**j - 1. The generated bitstream is xored (bit-wise) with the flag and returned Observation If one sets i and j to i and i+1, the bounds are 2**i and 2**(i+1) - 1, which are both i bits in length. The pecularity being the first bit would always be 1 because of 2**i and all the bits at positions multiples of i would be 1 Example generate_random_bits(2**1,2**(1+1)-1,80) '10101111111010111010111110111010101010101111101111111010101010111111111011111011' Notice the 0th, 2nd, 4th index and so on is always 1 My unoptimized script solve.py which just concerns about knowing the bit at position i by sending the index i-1 and i. from pwn import remote HOST, PORT = "2020.redpwnc.tf", 31284 def get_ct(num_bits): REM = remote(HOST, PORT) REM.sendline(str(num_bits -1).encode()) REM.sendline(str(num_bits).encode()) data = REM.recvline() ciphertext = data.split(b':')[-1].strip() #print(data) REM.close() return ciphertext flag_bits = bytearray(301) #flag size known flag_bits[0] = 49 # ord('1') known from the first character 'f' of flag flag_bits[1] = 49 # ord('1') for num_bits in range(2,301): ct = get_ct(num_bits) flag_bits[num_bits] = 48 if ct[num_bits] == 49 else 49 print(bits_to_str(flag_bits)) This can be improved just by noting the fact we knew most of the bits i before reaching the index i, we will only make a request if bit i is not known for num_bits in range(2,301): if flag_bits[num_bits] == 0: ct = get_ct(num_bits) for i in range(num_bits, 301, num_bits): flag_bits[i] = 48 if ct[i] == 49 else 49 print(bits_to_str(flag_bits)) Which takes 62 requests instead of 300 as in original flag{bits_leaking_out_down_the_water_spout}]]></summary></entry></feed>